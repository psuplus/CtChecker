Args: ../../../..//Debug+Asserts/bin/opt -load ../../../..//projects/poolalloc/Debug+Asserts/lib/LLVMDataStructure.dylib -load ../../../..//projects/llvm-deps/Debug+Asserts/lib/Constraints.dylib -load ../../../..//projects/llvm-deps/Debug+Asserts/lib/sourcesinkanalysis.dylib -load ../../../..//projects/llvm-deps/Debug+Asserts/lib/pointstointerface.dylib -load ../../../..//projects/llvm-deps/Debug+Asserts/lib/Deps.dylib -load ../../../..//projects/llvm-deps/Debug+Asserts/lib/Security.dylib -vulnerablebranch -debug 

Features:+64bit,+sse2
CPU:generic

Subtarget features: SSELevel 3, 3DNowLevel 0, 64bit 1
Merged 13 call nodes.
Merged 5 call nodes.
Merged 6 call nodes.
Merged 4 call nodes.
Merged 6 call nodes.
Merged 5 call nodes.
Merged 1 call nodes.
Attempting to merge two chunks of the same node together!
Merged 3 call nodes.
Merged 2 call nodes.
Merged 2 call nodes.
Merged 2 call nodes.
Merged 2 call nodes.
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_RECP_CTX_set
Removing llvm.dbg.declare from BN_RECP_CTX_set
Removing llvm.dbg.declare from BN_RECP_CTX_set
Removing llvm.dbg.declare from BN_RECP_CTX_free
Removing llvm.dbg.declare from BN_RECP_CTX_new
Removing llvm.dbg.declare from BN_RECP_CTX_init
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_copy
Removing llvm.dbg.declare from BN_MONT_CTX_copy
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_free
Removing llvm.dbg.declare from BN_MONT_CTX_init
Removing llvm.dbg.declare from BN_MONT_CTX_new
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from bn_free_d
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand
Removing llvm.dbg.declare from bn_expand
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from BN_GENCB_get_arg
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_free
Removing llvm.dbg.declare from BN_GENCB_new
Removing llvm.dbg.declare from BN_with_flags
Removing llvm.dbg.declare from BN_with_flags
Removing llvm.dbg.declare from BN_with_flags
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_is_negative
Removing llvm.dbg.declare from BN_is_odd
Removing llvm.dbg.declare from BN_is_word
Removing llvm.dbg.declare from BN_is_word
Removing llvm.dbg.declare from BN_is_one
Removing llvm.dbg.declare from BN_abs_is_word
Removing llvm.dbg.declare from BN_abs_is_word
Removing llvm.dbg.declare from BN_zero_ex
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from BN_set_negative
Removing llvm.dbg.declare from BN_set_negative
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_bn2bin
Removing llvm.dbg.declare from BN_bn2bin
Removing llvm.dbg.declare from BN_bn2binpad
Removing llvm.dbg.declare from BN_bn2binpad
Removing llvm.dbg.declare from BN_bn2binpad
Removing llvm.dbg.declare from bn_correct_top
Removing llvm.dbg.declare from bn_correct_top
Removing llvm.dbg.declare from bn_correct_top
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_set_word
Removing llvm.dbg.declare from BN_set_word
Removing llvm.dbg.declare from BN_get_word
Removing llvm.dbg.declare from BN_clear
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_set_flags
Removing llvm.dbg.declare from BN_set_flags
Removing llvm.dbg.declare from bn_wexpand
Removing llvm.dbg.declare from bn_wexpand
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_dup
Removing llvm.dbg.declare from BN_dup
Removing llvm.dbg.declare from bn_expand2
Removing llvm.dbg.declare from bn_expand2
Removing llvm.dbg.declare from bn_expand2
Removing llvm.dbg.declare from BN_secure_new
Removing llvm.dbg.declare from BN_new
Removing llvm.dbg.declare from bn_init
Removing llvm.dbg.declare from BN_free
Removing llvm.dbg.declare from BN_get_flags
Removing llvm.dbg.declare from BN_get_flags
Removing llvm.dbg.declare from BN_clear_free
Removing llvm.dbg.declare from BN_clear_free
Removing llvm.dbg.declare from BN_is_zero
Removing llvm.dbg.declare from BN_num_bits
Removing llvm.dbg.declare from BN_num_bits
Removing llvm.dbg.declare from BN_num_bits_word
Removing llvm.dbg.declare from BN_get_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from constant_time_eq_int
Removing llvm.dbg.declare from constant_time_eq_int
Removing llvm.dbg.declare from constant_time_eq
Removing llvm.dbg.declare from constant_time_eq
Removing llvm.dbg.declare from constant_time_is_zero
Removing llvm.dbg.declare from constant_time_msb
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.objectsize.i64.p0i8 from BN_RECP_CTX_init
Removing llvm.objectsize.i64.p0i8 from BN_from_montgomery_word
Removing llvm.objectsize.i64.p0i8 from bn2binpad
Removing llvm.objectsize.i64.p0i8 from BN_bn2lebinpad
Removing llvm.objectsize.i64.p0i8 from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_RECP_CTX_set
Removing llvm.dbg.declare from BN_RECP_CTX_set
Removing llvm.dbg.declare from BN_RECP_CTX_set
Removing llvm.dbg.declare from BN_RECP_CTX_free
Removing llvm.dbg.declare from BN_RECP_CTX_new
Removing llvm.dbg.declare from BN_RECP_CTX_init
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_copy
Removing llvm.dbg.declare from BN_MONT_CTX_copy
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_free
Removing llvm.dbg.declare from BN_MONT_CTX_init
Removing llvm.dbg.declare from BN_MONT_CTX_new
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from bn_free_d
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand
Removing llvm.dbg.declare from bn_expand
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from BN_GENCB_get_arg
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_free
Removing llvm.dbg.declare from BN_GENCB_new
Removing llvm.dbg.declare from BN_with_flags
Removing llvm.dbg.declare from BN_with_flags
Removing llvm.dbg.declare from BN_with_flags
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_is_negative
Removing llvm.dbg.declare from BN_is_odd
Removing llvm.dbg.declare from BN_is_word
Removing llvm.dbg.declare from BN_is_word
Removing llvm.dbg.declare from BN_is_one
Removing llvm.dbg.declare from BN_abs_is_word
Removing llvm.dbg.declare from BN_abs_is_word
Removing llvm.dbg.declare from BN_zero_ex
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from BN_set_negative
Removing llvm.dbg.declare from BN_set_negative
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_bn2bin
Removing llvm.dbg.declare from BN_bn2bin
Removing llvm.dbg.declare from BN_bn2binpad
Removing llvm.dbg.declare from BN_bn2binpad
Removing llvm.dbg.declare from BN_bn2binpad
Removing llvm.dbg.declare from bn_correct_top
Removing llvm.dbg.declare from bn_correct_top
Removing llvm.dbg.declare from bn_correct_top
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_set_word
Removing llvm.dbg.declare from BN_set_word
Removing llvm.dbg.declare from BN_get_word
Removing llvm.dbg.declare from BN_clear
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_set_flags
Removing llvm.dbg.declare from BN_set_flags
Removing llvm.dbg.declare from bn_wexpand
Removing llvm.dbg.declare from bn_wexpand
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_dup
Removing llvm.dbg.declare from BN_dup
Removing llvm.dbg.declare from bn_expand2
Removing llvm.dbg.declare from bn_expand2
Removing llvm.dbg.declare from bn_expand2
Removing llvm.dbg.declare from BN_secure_new
Removing llvm.dbg.declare from BN_new
Removing llvm.dbg.declare from bn_init
Removing llvm.dbg.declare from BN_free
Removing llvm.dbg.declare from BN_get_flags
Removing llvm.dbg.declare from BN_get_flags
Removing llvm.dbg.declare from BN_clear_free
Removing llvm.dbg.declare from BN_clear_free
Removing llvm.dbg.declare from BN_is_zero
Removing llvm.dbg.declare from BN_num_bits
Removing llvm.dbg.declare from BN_num_bits
Removing llvm.dbg.declare from BN_num_bits_word
Removing llvm.dbg.declare from BN_get_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from constant_time_eq_int
Removing llvm.dbg.declare from constant_time_eq_int
Removing llvm.dbg.declare from constant_time_eq
Removing llvm.dbg.declare from constant_time_eq
Removing llvm.dbg.declare from constant_time_is_zero
Removing llvm.dbg.declare from constant_time_msb
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Visiting single node SCC #: 6 fn: BN_get_flags
  [BU] Calculating graph for: BN_get_flags
  [BU] Done inlining: BN_get_flags [3+0]
Visiting single node SCC #: 5 fn: bn_free_d
  [BU] Calculating graph for: bn_free_d
    Inlining graph for BN_get_flags[3+0] into 'bn_free_d' [4+0]
  [BU] Done inlining: bn_free_d [4+0]
Visiting single node SCC #: 7 fn: bn_expand_internal
  [BU] Calculating graph for: bn_expand_internal
    Inlining graph for BN_get_flags[3+0] into 'bn_expand_internal' [15+0]
  [BU] Done inlining: bn_expand_internal [15+0]
Visiting single node SCC #: 4 fn: bn_expand2
  [BU] Calculating graph for: bn_expand2
    Inlining graph for bn_free_d[4+0] into 'bn_expand2' [6+0]
    Inlining graph for bn_expand_internal[15+0] into 'bn_expand2' [6+0]
  [BU] Done inlining: bn_expand2 [6+0]
Visiting single node SCC #: 3 fn: bn_expand
  [BU] Calculating graph for: bn_expand
    Inlining graph for bn_expand2[6+0] into 'bn_expand' [4+0]
  [BU] Done inlining: bn_expand [5+0]
Visiting single node SCC #: 2 fn: BN_set_word
  [BU] Calculating graph for: BN_set_word
    Inlining graph for bn_expand[5+0] into 'BN_set_word' [6+0]
  [BU] Done inlining: BN_set_word [5+0]
Visiting single node SCC #: 9 fn: BN_num_bits_word
  [BU] Calculating graph for: BN_num_bits_word
  [BU] Done inlining: BN_num_bits_word [3+0]
Visiting single node SCC #: 10 fn: BN_is_zero
  [BU] Calculating graph for: BN_is_zero
  [BU] Done inlining: BN_is_zero [2+0]
Visiting single node SCC #: 8 fn: BN_num_bits
  [BU] Calculating graph for: BN_num_bits
    Inlining graph for BN_is_zero[2+0] into 'BN_num_bits' [5+0]
  [BU] Done inlining: BN_num_bits [5+0]
Visiting single node SCC #: 12 fn: bn_wexpand
  [BU] Calculating graph for: bn_wexpand
    Inlining graph for bn_expand2[6+0] into 'bn_wexpand' [3+0]
  [BU] Done inlining: bn_wexpand [4+0]
Visiting single node SCC #: 13 fn: BN_set_flags
  [BU] Calculating graph for: BN_set_flags
  [BU] Done inlining: BN_set_flags [3+0]
Visiting single node SCC #: 11 fn: BN_copy
  [BU] Calculating graph for: BN_copy
    Inlining graph for BN_get_flags[3+0] into 'BN_copy' [15+0]
    Inlining graph for bn_wexpand[4+0] into 'BN_copy' [15+0]
    Inlining graph for BN_set_flags[3+0] into 'BN_copy' [14+0]
  [BU] Done inlining: BN_copy [14+0]
Visiting single node SCC #: 14 fn: BN_is_bit_set
  [BU] Calculating graph for: BN_is_bit_set
  [BU] Done inlining: BN_is_bit_set [7+0]
Visiting single node SCC #: 15 fn: BN_is_odd
  [BU] Calculating graph for: BN_is_odd
  [BU] Done inlining: BN_is_odd [3+0]
Visiting single node SCC #: 1 fn: BN_exp
  [BU] Calculating graph for: BN_exp
    Inlining graph for BN_set_word[5+0] into 'BN_exp' [18+0]
    Inlining graph for BN_num_bits[5+0] into 'BN_exp' [19+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_exp' [20+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_exp' [20+0]
    Inlining graph for BN_copy[14+0] into 'BN_exp' [20+0]
    Inlining graph for BN_copy[14+0] into 'BN_exp' [21+0]
    Inlining graph for BN_copy[14+0] into 'BN_exp' [20+0]
    Inlining graph for BN_is_bit_set[7+0] into 'BN_exp' [19+0]
    Inlining graph for BN_is_odd[3+0] into 'BN_exp' [19+0]
  [BU] Done inlining: BN_exp [19+0]
Visiting single node SCC #: 20 fn: bn_correct_top
  [BU] Calculating graph for: bn_correct_top
  [BU] Done inlining: bn_correct_top [5+0]
Visiting single node SCC #: 19 fn: BN_from_montgomery_word
  [BU] Calculating graph for: BN_from_montgomery_word
    Inlining graph for bn_wexpand[4+0] into 'BN_from_montgomery_word' [29+0]
    Inlining graph for bn_wexpand[4+0] into 'BN_from_montgomery_word' [28+0]
    Inlining graph for bn_correct_top[5+0] into 'BN_from_montgomery_word' [27+0]
    Inlining graph for bn_correct_top[5+0] into 'BN_from_montgomery_word' [27+0]
  [BU] Done inlining: BN_from_montgomery_word [27+0]
Visiting single node SCC #: 18 fn: BN_mod_mul_montgomery
  [BU] Calculating graph for: BN_mod_mul_montgomery
    Inlining graph for BN_from_montgomery_word[27+0] into 'BN_mod_mul_montgomery' [13+0]
  [BU] Done inlining: BN_mod_mul_montgomery [15+0]
Visiting single node SCC #: 21 fn: BN_from_montgomery
  [BU] Calculating graph for: BN_from_montgomery
    Inlining graph for BN_copy[14+0] into 'BN_from_montgomery' [12+0]
    Inlining graph for BN_from_montgomery_word[27+0] into 'BN_from_montgomery' [13+0]
  [BU] Done inlining: BN_from_montgomery [14+0]
Visiting single node SCC #: 24 fn: bn_init
  [BU] Calculating graph for: bn_init
  [BU] Done inlining: bn_init [2+0]
Visiting single node SCC #: 23 fn: BN_MONT_CTX_init
  [BU] Calculating graph for: BN_MONT_CTX_init
    Inlining graph for bn_init[2+0] into 'BN_MONT_CTX_init' [2+0]
  [BU] Done inlining: BN_MONT_CTX_init [2+0]
Visiting single node SCC #: 22 fn: BN_MONT_CTX_new
  [BU] Calculating graph for: BN_MONT_CTX_new
    Inlining graph for BN_MONT_CTX_init[2+0] into 'BN_MONT_CTX_new' [4+0]
  [BU] Done inlining: BN_MONT_CTX_new [4+0]
Visiting single node SCC #: 26 fn: BN_clear_free
  [BU] Calculating graph for: BN_clear_free
    Inlining graph for BN_get_flags[3+0] into 'BN_clear_free' [5+0]
    Inlining graph for bn_free_d[4+0] into 'BN_clear_free' [5+0]
  [BU] Done inlining: BN_clear_free [5+0]
Visiting single node SCC #: 25 fn: BN_MONT_CTX_free
  [BU] Calculating graph for: BN_MONT_CTX_free
    Inlining graph for BN_clear_free[5+0] into 'BN_MONT_CTX_free' [3+0]
    Inlining graph for BN_clear_free[5+0] into 'BN_MONT_CTX_free' [4+0]
    Inlining graph for BN_clear_free[5+0] into 'BN_MONT_CTX_free' [5+0]
  [BU] Done inlining: BN_MONT_CTX_free [6+0]
Visiting single node SCC #: 28 fn: BN_set_bit
  [BU] Calculating graph for: BN_set_bit
    Inlining graph for bn_wexpand[4+0] into 'BN_set_bit' [9+0]
  [BU] Done inlining: BN_set_bit [8+0]
Visiting single node SCC #: 27 fn: BN_MONT_CTX_set
  [BU] Calculating graph for: BN_MONT_CTX_set
    Inlining graph for BN_set_word[5+0] into 'BN_MONT_CTX_set' [17+0]
    Inlining graph for BN_set_word[5+0] into 'BN_MONT_CTX_set' [17+0]
    Inlining graph for BN_num_bits[5+0] into 'BN_MONT_CTX_set' [18+0]
    Inlining graph for BN_is_zero[2+0] into 'BN_MONT_CTX_set' [18+0]
    Inlining graph for BN_is_zero[2+0] into 'BN_MONT_CTX_set' [18+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_MONT_CTX_set' [18+0]
    Inlining graph for bn_init[2+0] into 'BN_MONT_CTX_set' [18+0]
    Inlining graph for BN_copy[14+0] into 'BN_MONT_CTX_set' [18+0]
    Inlining graph for BN_set_flags[3+0] into 'BN_MONT_CTX_set' [17+0]
    Inlining graph for BN_set_bit[8+0] into 'BN_MONT_CTX_set' [17+0]
  [BU] Done inlining: BN_MONT_CTX_set [17+0]
Visiting single node SCC #: 30 fn: BN_abs_is_word
  [BU] Calculating graph for: BN_abs_is_word
  [BU] Done inlining: BN_abs_is_word [4+0]
Visiting single node SCC #: 29 fn: BN_is_one
  [BU] Calculating graph for: BN_is_one
    Inlining graph for BN_abs_is_word[4+0] into 'BN_is_one' [2+0]
  [BU] Done inlining: BN_is_one [3+0]
Visiting single node SCC #: 31 fn: BN_to_montgomery
  [BU] Calculating graph for: BN_to_montgomery
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_to_montgomery' [8+0]
  [BU] Done inlining: BN_to_montgomery [10+0]
Visiting single node SCC #: 17 fn: BN_mod_exp_mont_word
  [BU] Calculating graph for: BN_mod_exp_mont_word
    Inlining graph for BN_set_word[5+0] into 'BN_mod_exp_mont_word' [27+0]
    Inlining graph for BN_set_word[5+0] into 'BN_mod_exp_mont_word' [28+0]
    Inlining graph for BN_num_bits[5+0] into 'BN_mod_exp_mont_word' [29+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_mont_word' [30+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_mont_word' [30+0]
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_mod_exp_mont_word' [30+0]
    Inlining graph for BN_from_montgomery[14+0] into 'BN_mod_exp_mont_word' [31+0]
    Inlining graph for BN_MONT_CTX_new[4+0] into 'BN_mod_exp_mont_word' [31+0]
    Inlining graph for BN_MONT_CTX_free[6+0] into 'BN_mod_exp_mont_word' [31+0]
    Inlining graph for BN_MONT_CTX_set[17+0] into 'BN_mod_exp_mont_word' [31+0]
    Inlining graph for BN_is_bit_set[7+0] into 'BN_mod_exp_mont_word' [31+0]
    Inlining graph for BN_is_one[3+0] into 'BN_mod_exp_mont_word' [31+0]
    Inlining graph for BN_is_odd[3+0] into 'BN_mod_exp_mont_word' [31+0]
    Inlining graph for BN_to_montgomery[10+0] into 'BN_mod_exp_mont_word' [31+0]
  [BU] Done inlining: BN_mod_exp_mont_word [31+0]
Visiting single node SCC #: 34 fn: MOD_EXP_CTIME_COPY_TO_PREBUF
  [BU] Calculating graph for: MOD_EXP_CTIME_COPY_TO_PREBUF
  [BU] Done inlining: MOD_EXP_CTIME_COPY_TO_PREBUF [12+0]
Visiting single node SCC #: 39 fn: constant_time_msb
  [BU] Calculating graph for: constant_time_msb
  [BU] Done inlining: constant_time_msb [1+0]
Visiting single node SCC #: 38 fn: constant_time_is_zero
  [BU] Calculating graph for: constant_time_is_zero
  [BU] Done inlining: constant_time_is_zero [1+0]
Visiting single node SCC #: 37 fn: constant_time_eq
  [BU] Calculating graph for: constant_time_eq
  [BU] Done inlining: constant_time_eq [2+0]
Visiting single node SCC #: 36 fn: constant_time_eq_int
  [BU] Calculating graph for: constant_time_eq_int
  [BU] Done inlining: constant_time_eq_int [2+0]
Visiting single node SCC #: 35 fn: MOD_EXP_CTIME_COPY_FROM_PREBUF
  [BU] Calculating graph for: MOD_EXP_CTIME_COPY_FROM_PREBUF
    Inlining graph for bn_wexpand[4+0] into 'MOD_EXP_CTIME_COPY_FROM_PREBUF' [21+0]
    Inlining graph for bn_correct_top[5+0] into 'MOD_EXP_CTIME_COPY_FROM_PREBUF' [20+0]
  [BU] Done inlining: MOD_EXP_CTIME_COPY_FROM_PREBUF [20+0]
Visiting single node SCC #: 40 fn: BN_value_one
  [BU] Calculating graph for: BN_value_one
  [BU] Done inlining: BN_value_one [2+0]
Visiting single node SCC #: 41 fn: BN_ucmp
  [BU] Calculating graph for: BN_ucmp
  [BU] Done inlining: BN_ucmp [12+0]
Visiting single node SCC #: 33 fn: BN_mod_exp_mont_consttime
  [BU] Calculating graph for: BN_mod_exp_mont_consttime
    Inlining graph for MOD_EXP_CTIME_COPY_TO_PREBUF[12+0] into 'BN_mod_exp_mont_consttime' [31+0]
    Inlining graph for MOD_EXP_CTIME_COPY_TO_PREBUF[12+0] into 'BN_mod_exp_mont_consttime' [31+0]
    Inlining graph for MOD_EXP_CTIME_COPY_FROM_PREBUF[20+0] into 'BN_mod_exp_mont_consttime' [31+0]
    Inlining graph for MOD_EXP_CTIME_COPY_FROM_PREBUF[20+0] into 'BN_mod_exp_mont_consttime' [31+0]
    Inlining graph for BN_value_one[2+0] into 'BN_mod_exp_mont_consttime' [31+0]
    Inlining graph for BN_set_word[5+0] into 'BN_mod_exp_mont_consttime' [32+0]
    Inlining graph for BN_num_bits[5+0] into 'BN_mod_exp_mont_consttime' [33+0]
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_mod_exp_mont_consttime' [34+0]
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_mod_exp_mont_consttime' [35+0]
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_mod_exp_mont_consttime' [35+0]
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_mod_exp_mont_consttime' [35+0]
    Inlining graph for BN_from_montgomery[14+0] into 'BN_mod_exp_mont_consttime' [35+0]
    Inlining graph for BN_MONT_CTX_new[4+0] into 'BN_mod_exp_mont_consttime' [35+0]
    Inlining graph for BN_MONT_CTX_free[6+0] into 'BN_mod_exp_mont_consttime' [35+0]
    Inlining graph for BN_MONT_CTX_set[17+0] into 'BN_mod_exp_mont_consttime' [35+0]
    Inlining graph for BN_is_bit_set[7+0] into 'BN_mod_exp_mont_consttime' [35+0]
    Inlining graph for BN_ucmp[12+0] into 'BN_mod_exp_mont_consttime' [35+0]
    Inlining graph for BN_is_one[3+0] into 'BN_mod_exp_mont_consttime' [36+0]
    Inlining graph for BN_is_odd[3+0] into 'BN_mod_exp_mont_consttime' [36+0]
    Inlining graph for BN_to_montgomery[10+0] into 'BN_mod_exp_mont_consttime' [36+0]
    Inlining graph for BN_to_montgomery[10+0] into 'BN_mod_exp_mont_consttime' [36+0]
    Inlining graph for BN_to_montgomery[10+0] into 'BN_mod_exp_mont_consttime' [36+0]
  [BU] Done inlining: BN_mod_exp_mont_consttime [36+0]
Visiting single node SCC #: 32 fn: BN_mod_exp_mont
  [BU] Calculating graph for: BN_mod_exp_mont
    Inlining graph for BN_mod_exp_mont_consttime[36+0] into 'BN_mod_exp_mont' [34+0]
    Inlining graph for BN_value_one[2+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_set_word[5+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_num_bits[5+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_is_zero[2+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for bn_wexpand[4+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for bn_correct_top[5+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_from_montgomery[14+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_MONT_CTX_new[4+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_MONT_CTX_free[6+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_MONT_CTX_set[17+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_is_bit_set[7+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_ucmp[12+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_is_one[3+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_is_odd[3+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_to_montgomery[10+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_to_montgomery[10+0] into 'BN_mod_exp_mont' [39+0]
  [BU] Done inlining: BN_mod_exp_mont [39+0]
Visiting single node SCC #: 43 fn: BN_RECP_CTX_init
  [BU] Calculating graph for: BN_RECP_CTX_init
    Inlining graph for bn_init[2+0] into 'BN_RECP_CTX_init' [3+0]
    Inlining graph for bn_init[2+0] into 'BN_RECP_CTX_init' [3+0]
Attempting to merge two chunks of the same node together!
Merged 1 call nodes.
  [BU] Done inlining: BN_RECP_CTX_init [3+0]
Visiting single node SCC #: 45 fn: BN_free
  [BU] Calculating graph for: BN_free
    Inlining graph for BN_get_flags[3+0] into 'BN_free' [3+0]
    Inlining graph for bn_free_d[4+0] into 'BN_free' [3+0]
  [BU] Done inlining: BN_free [4+0]
Visiting single node SCC #: 44 fn: BN_RECP_CTX_free
  [BU] Calculating graph for: BN_RECP_CTX_free
    Inlining graph for BN_free[4+0] into 'BN_RECP_CTX_free' [3+0]
    Inlining graph for BN_free[4+0] into 'BN_RECP_CTX_free' [4+0]
  [BU] Done inlining: BN_RECP_CTX_free [5+0]
Visiting single node SCC #: 46 fn: BN_RECP_CTX_set
  [BU] Calculating graph for: BN_RECP_CTX_set
    Inlining graph for BN_set_word[5+0] into 'BN_RECP_CTX_set' [8+0]
    Inlining graph for BN_num_bits[5+0] into 'BN_RECP_CTX_set' [9+0]
    Inlining graph for BN_copy[14+0] into 'BN_RECP_CTX_set' [10+0]
  [BU] Done inlining: BN_RECP_CTX_set [10+0]
Visiting single node SCC #: 49 fn: BN_reciprocal
  [BU] Calculating graph for: BN_reciprocal
    Inlining graph for BN_set_bit[8+0] into 'BN_reciprocal' [10+0]
  [BU] Done inlining: BN_reciprocal [11+0]
Visiting single node SCC #: 48 fn: BN_div_recp
  [BU] Calculating graph for: BN_div_recp
    Inlining graph for BN_set_word[5+0] into 'BN_div_recp' [22+0]
    Inlining graph for BN_num_bits[5+0] into 'BN_div_recp' [23+0]
    Inlining graph for BN_is_zero[2+0] into 'BN_div_recp' [24+0]
    Inlining graph for BN_copy[14+0] into 'BN_div_recp' [24+0]
    Inlining graph for BN_ucmp[12+0] into 'BN_div_recp' [24+0]
    Inlining graph for BN_ucmp[12+0] into 'BN_div_recp' [25+0]
    Inlining graph for BN_reciprocal[11+0] into 'BN_div_recp' [25+0]
  [BU] Done inlining: BN_div_recp [25+0]
Visiting single node SCC #: 47 fn: BN_mod_mul_reciprocal
  [BU] Calculating graph for: BN_mod_mul_reciprocal
    Inlining graph for BN_div_recp[25+0] into 'BN_mod_mul_reciprocal' [13+0]
  [BU] Done inlining: BN_mod_mul_reciprocal [16+0]
Visiting single node SCC #: 42 fn: BN_mod_exp_recp
  [BU] Calculating graph for: BN_mod_exp_recp
    Inlining graph for BN_set_word[5+0] into 'BN_mod_exp_recp' [27+0]
    Inlining graph for BN_num_bits[5+0] into 'BN_mod_exp_recp' [28+0]
    Inlining graph for BN_is_zero[2+0] into 'BN_mod_exp_recp' [29+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_recp' [29+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_recp' [29+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_recp' [29+0]
    Inlining graph for BN_copy[14+0] into 'BN_mod_exp_recp' [29+0]
    Inlining graph for BN_is_bit_set[7+0] into 'BN_mod_exp_recp' [30+0]
    Inlining graph for BN_is_one[3+0] into 'BN_mod_exp_recp' [30+0]
    Inlining graph for BN_RECP_CTX_init[3+0] into 'BN_mod_exp_recp' [30+0]
    Inlining graph for BN_RECP_CTX_free[5+0] into 'BN_mod_exp_recp' [30+0]
    Inlining graph for BN_RECP_CTX_set[10+0] into 'BN_mod_exp_recp' [31+0]
    Inlining graph for BN_RECP_CTX_set[10+0] into 'BN_mod_exp_recp' [31+0]
    Inlining graph for BN_mod_mul_reciprocal[16+0] into 'BN_mod_exp_recp' [31+0]
    Inlining graph for BN_mod_mul_reciprocal[16+0] into 'BN_mod_exp_recp' [31+0]
    Inlining graph for BN_mod_mul_reciprocal[16+0] into 'BN_mod_exp_recp' [31+0]
    Inlining graph for BN_mod_mul_reciprocal[16+0] into 'BN_mod_exp_recp' [32+0]
  [BU] Done inlining: BN_mod_exp_recp [32+0]
Visiting single node SCC #: 16 fn: BN_mod_exp
  [BU] Calculating graph for: BN_mod_exp
    Inlining graph for BN_mod_exp_mont_word[31+0] into 'BN_mod_exp' [13+0]
    Inlining graph for BN_mod_exp_mont[39+0] into 'BN_mod_exp' [18+0]
    Inlining graph for BN_mod_exp_recp[32+0] into 'BN_mod_exp' [18+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp' [18+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp' [18+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp' [18+0]
    Inlining graph for BN_is_odd[3+0] into 'BN_mod_exp' [18+0]
  [BU] Done inlining: BN_mod_exp [16+0]
Visiting single node SCC #: 50 fn: BN_mod_exp_simple
  [BU] Calculating graph for: BN_mod_exp_simple
    Inlining graph for BN_set_word[5+0] into 'BN_mod_exp_simple' [25+0]
    Inlining graph for BN_num_bits[5+0] into 'BN_mod_exp_simple' [26+0]
    Inlining graph for BN_is_zero[2+0] into 'BN_mod_exp_simple' [27+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_simple' [27+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_simple' [27+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_simple' [27+0]
    Inlining graph for BN_is_bit_set[7+0] into 'BN_mod_exp_simple' [27+0]
    Inlining graph for BN_is_one[3+0] into 'BN_mod_exp_simple' [27+0]
  [BU] Done inlining: BN_mod_exp_simple [28+0]
Visiting single node SCC #: 51 fn: BN_set_params
  [BU] Calculating graph for: BN_set_params
  [BU] Done inlining: BN_set_params [4+0]
Visiting single node SCC #: 52 fn: BN_get_params
  [BU] Calculating graph for: BN_get_params
  [BU] Done inlining: BN_get_params [2+0]
Visiting single node SCC #: 53 fn: BN_new
  [BU] Calculating graph for: BN_new
  [BU] Done inlining: BN_new [4+0]
Visiting single node SCC #: 54 fn: BN_secure_new
  [BU] Calculating graph for: BN_secure_new
    Inlining graph for BN_new[4+0] into 'BN_secure_new' [2+0]
  [BU] Done inlining: BN_secure_new [2+0]
Visiting single node SCC #: 55 fn: BN_dup
  [BU] Calculating graph for: BN_dup
    Inlining graph for BN_get_flags[3+0] into 'BN_dup' [6+0]
    Inlining graph for BN_free[4+0] into 'BN_dup' [6+0]
    Inlining graph for BN_new[4+0] into 'BN_dup' [7+0]
    Inlining graph for BN_secure_new[2+0] into 'BN_dup' [7+0]
    Inlining graph for BN_copy[14+0] into 'BN_dup' [7+0]
  [BU] Done inlining: BN_dup [7+0]
Visiting single node SCC #: 56 fn: BN_swap
  [BU] Calculating graph for: BN_swap
  [BU] Done inlining: BN_swap [11+0]
Visiting single node SCC #: 57 fn: BN_clear
  [BU] Calculating graph for: BN_clear
  [BU] Done inlining: BN_clear [3+0]
Visiting single node SCC #: 58 fn: BN_get_word
  [BU] Calculating graph for: BN_get_word
  [BU] Done inlining: BN_get_word [4+0]
Visiting single node SCC #: 59 fn: BN_bin2bn
  [BU] Calculating graph for: BN_bin2bn
    Inlining graph for BN_free[4+0] into 'BN_bin2bn' [13+0]
    Inlining graph for BN_new[4+0] into 'BN_bin2bn' [13+0]
    Inlining graph for bn_wexpand[4+0] into 'BN_bin2bn' [13+0]
    Inlining graph for bn_correct_top[5+0] into 'BN_bin2bn' [12+0]
  [BU] Done inlining: BN_bin2bn [12+0]
Visiting single node SCC #: 61 fn: bn2binpad
  [BU] Calculating graph for: bn2binpad
    Inlining graph for BN_num_bits[5+0] into 'bn2binpad' [10+0]
  [BU] Done inlining: bn2binpad [10+0]
Visiting single node SCC #: 60 fn: BN_bn2binpad
  [BU] Calculating graph for: BN_bn2binpad
    Inlining graph for bn2binpad[10+0] into 'BN_bn2binpad' [6+0]
  [BU] Done inlining: BN_bn2binpad [7+0]
Visiting single node SCC #: 62 fn: BN_bn2bin
  [BU] Calculating graph for: BN_bn2bin
    Inlining graph for bn2binpad[10+0] into 'BN_bn2bin' [4+0]
  [BU] Done inlining: BN_bn2bin [5+0]
Visiting single node SCC #: 63 fn: BN_lebin2bn
  [BU] Calculating graph for: BN_lebin2bn
    Inlining graph for BN_free[4+0] into 'BN_lebin2bn' [13+0]
    Inlining graph for BN_new[4+0] into 'BN_lebin2bn' [13+0]
    Inlining graph for bn_wexpand[4+0] into 'BN_lebin2bn' [13+0]
    Inlining graph for bn_correct_top[5+0] into 'BN_lebin2bn' [12+0]
  [BU] Done inlining: BN_lebin2bn [12+0]
Visiting single node SCC #: 64 fn: BN_bn2lebinpad
  [BU] Calculating graph for: BN_bn2lebinpad
    Inlining graph for BN_num_bits[5+0] into 'BN_bn2lebinpad' [10+0]
  [BU] Done inlining: BN_bn2lebinpad [10+0]
Visiting single node SCC #: 65 fn: BN_cmp
  [BU] Calculating graph for: BN_cmp
  [BU] Done inlining: BN_cmp [12+0]
Visiting single node SCC #: 66 fn: BN_clear_bit
  [BU] Calculating graph for: BN_clear_bit
    Inlining graph for bn_correct_top[5+0] into 'BN_clear_bit' [7+0]
  [BU] Done inlining: BN_clear_bit [7+0]
Visiting single node SCC #: 67 fn: BN_mask_bits
  [BU] Calculating graph for: BN_mask_bits
    Inlining graph for bn_correct_top[5+0] into 'BN_mask_bits' [7+0]
  [BU] Done inlining: BN_mask_bits [7+0]
Visiting single node SCC #: 68 fn: BN_set_negative
  [BU] Calculating graph for: BN_set_negative
    Inlining graph for BN_is_zero[2+0] into 'BN_set_negative' [3+0]
  [BU] Done inlining: BN_set_negative [3+0]
Visiting single node SCC #: 69 fn: bn_cmp_words
  [BU] Calculating graph for: bn_cmp_words
  [BU] Done inlining: bn_cmp_words [9+0]
Visiting single node SCC #: 70 fn: bn_cmp_part_words
  [BU] Calculating graph for: bn_cmp_part_words
    Inlining graph for bn_cmp_words[9+0] into 'bn_cmp_part_words' [9+0]
  [BU] Done inlining: bn_cmp_part_words [9+0]
Visiting single node SCC #: 71 fn: BN_consttime_swap
  [BU] Calculating graph for: BN_consttime_swap
  [BU] Done inlining: BN_consttime_swap [14+0]
Visiting single node SCC #: 72 fn: BN_security_bits
  [BU] Calculating graph for: BN_security_bits
  [BU] Done inlining: BN_security_bits [5+0]
Visiting single node SCC #: 73 fn: BN_zero_ex
  [BU] Calculating graph for: BN_zero_ex
  [BU] Done inlining: BN_zero_ex [2+0]
Visiting single node SCC #: 74 fn: BN_is_word
  [BU] Calculating graph for: BN_is_word
    Inlining graph for BN_abs_is_word[4+0] into 'BN_is_word' [3+0]
  [BU] Done inlining: BN_is_word [4+0]
Visiting single node SCC #: 75 fn: BN_is_negative
  [BU] Calculating graph for: BN_is_negative
  [BU] Done inlining: BN_is_negative [2+0]
Visiting single node SCC #: 76 fn: BN_with_flags
  [BU] Calculating graph for: BN_with_flags
  [BU] Done inlining: BN_with_flags [6+0]
Visiting single node SCC #: 77 fn: BN_GENCB_new
  [BU] Calculating graph for: BN_GENCB_new
  [BU] Done inlining: BN_GENCB_new [4+0]
Visiting single node SCC #: 78 fn: BN_GENCB_free
  [BU] Calculating graph for: BN_GENCB_free
  [BU] Done inlining: BN_GENCB_free [3+0]
Visiting single node SCC #: 79 fn: BN_GENCB_set_old
  [BU] Calculating graph for: BN_GENCB_set_old
  [BU] Done inlining: BN_GENCB_set_old [7+0]
Visiting single node SCC #: 80 fn: BN_GENCB_set
  [BU] Calculating graph for: BN_GENCB_set
  [BU] Done inlining: BN_GENCB_set [7+0]
Visiting single node SCC #: 81 fn: BN_GENCB_get_arg
  [BU] Calculating graph for: BN_GENCB_get_arg
  [BU] Done inlining: BN_GENCB_get_arg [3+0]
Visiting single node SCC #: 82 fn: BN_MONT_CTX_copy
  [BU] Calculating graph for: BN_MONT_CTX_copy
    Inlining graph for BN_copy[14+0] into 'BN_MONT_CTX_copy' [8+0]
    Inlining graph for BN_copy[14+0] into 'BN_MONT_CTX_copy' [9+0]
    Inlining graph for BN_copy[14+0] into 'BN_MONT_CTX_copy' [8+0]
Merged 2 call nodes.
  [BU] Done inlining: BN_MONT_CTX_copy [7+0]
Visiting single node SCC #: 83 fn: BN_MONT_CTX_set_locked
  [BU] Calculating graph for: BN_MONT_CTX_set_locked
    Inlining graph for BN_MONT_CTX_new[4+0] into 'BN_MONT_CTX_set_locked' [11+0]
    Inlining graph for BN_MONT_CTX_free[6+0] into 'BN_MONT_CTX_set_locked' [11+0]
    Inlining graph for BN_MONT_CTX_set[17+0] into 'BN_MONT_CTX_set_locked' [12+0]
  [BU] Done inlining: BN_MONT_CTX_set_locked [13+0]
Visiting single node SCC #: 84 fn: BN_RECP_CTX_new
  [BU] Calculating graph for: BN_RECP_CTX_new
    Inlining graph for bn_init[2+0] into 'BN_RECP_CTX_new' [4+0]
    Inlining graph for bn_init[2+0] into 'BN_RECP_CTX_new' [4+0]
Attempting to merge two chunks of the same node together!
Merged 1 call nodes.
  [BU] Done inlining: BN_RECP_CTX_new [4+0]
[TD] Inlining callers into 'BN_RECP_CTX_new'
[TD] Inlining callers into 'BN_MONT_CTX_set_locked'
[TD] Inlining callers into 'BN_MONT_CTX_copy'
[TD] Inlining callers into 'BN_GENCB_get_arg'
[TD] Inlining callers into 'BN_GENCB_set'
[TD] Inlining callers into 'BN_GENCB_set_old'
[TD] Inlining callers into 'BN_GENCB_free'
[TD] Inlining callers into 'BN_GENCB_new'
[TD] Inlining callers into 'BN_with_flags'
[TD] Inlining callers into 'BN_is_negative'
[TD] Inlining callers into 'BN_is_word'
[TD] Inlining callers into 'BN_zero_ex'
[TD] Inlining callers into 'BN_security_bits'
[TD] Inlining callers into 'BN_consttime_swap'
[TD] Inlining callers into 'bn_cmp_part_words'
[TD] Inlining callers into 'bn_cmp_words'
   [TD] Inlining graph into Fn 'bn_cmp_words' from Fn 'bn_cmp_part_words': 3 args
[TD] Inlining callers into 'BN_set_negative'
[TD] Inlining callers into 'BN_mask_bits'
[TD] Inlining callers into 'BN_clear_bit'
[TD] Inlining callers into 'BN_cmp'
[TD] Inlining callers into 'BN_bn2lebinpad'
[TD] Inlining callers into 'BN_lebin2bn'
[TD] Inlining callers into 'BN_bn2bin'
[TD] Inlining callers into 'BN_bn2binpad'
[TD] Inlining callers into 'bn2binpad'
   [TD] Inlining graph into Fn 'bn2binpad' from Fn 'BN_bn2bin': 3 args
   [TD] Inlining graph into Fn 'bn2binpad' from Fn 'BN_bn2binpad': 3 args
[TD] Inlining callers into 'BN_bin2bn'
[TD] Inlining callers into 'BN_get_word'
[TD] Inlining callers into 'BN_clear'
[TD] Inlining callers into 'BN_swap'
[TD] Inlining callers into 'BN_dup'
[TD] Inlining callers into 'BN_secure_new'
   [TD] Inlining graph into Fn 'BN_secure_new' from Fn 'BN_dup': 0 args
[TD] Inlining callers into 'BN_new'
   [TD] Inlining graph into Fn 'BN_new' from Fn 'BN_lebin2bn': 0 args
   [TD] Inlining graph into Fn 'BN_new' from Fn 'BN_bin2bn': 0 args
   [TD] Inlining graph into Fn 'BN_new' from Fn 'BN_dup': 0 args
   [TD] Inlining graph into Fn 'BN_new' from Fn 'BN_secure_new': 0 args
[TD] Inlining callers into 'BN_get_params'
[TD] Inlining callers into 'BN_set_params'
[TD] Inlining callers into 'BN_mod_exp_simple'
[TD] Inlining callers into 'BN_mod_exp'
[TD] Inlining callers into 'BN_mod_exp_recp'
   [TD] Inlining graph into Fn 'BN_mod_exp_recp' from Fn 'BN_mod_exp': 5 args
[TD] Inlining callers into 'BN_mod_mul_reciprocal'
   [TD] Inlining graph into Fn 'BN_mod_mul_reciprocal' from Fn 'BN_mod_exp_recp': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_reciprocal' from Fn 'BN_mod_exp_recp': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_reciprocal' from Fn 'BN_mod_exp_recp': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_reciprocal' from Fn 'BN_mod_exp_recp': 5 args
[TD] Inlining callers into 'BN_div_recp'
   [TD] Inlining graph into Fn 'BN_div_recp' from Fn 'BN_mod_mul_reciprocal': 5 args
Merged 1 call nodes.
[TD] Inlining callers into 'BN_reciprocal'
   [TD] Inlining graph into Fn 'BN_reciprocal' from Fn 'BN_div_recp': 4 args
[TD] Inlining callers into 'BN_RECP_CTX_set'
   [TD] Inlining graph into Fn 'BN_RECP_CTX_set' from Fn 'BN_mod_exp_recp': 3 args
   [TD] Inlining graph into Fn 'BN_RECP_CTX_set' from Fn 'BN_mod_exp_recp': 3 args
[TD] Inlining callers into 'BN_RECP_CTX_free'
   [TD] Inlining graph into Fn 'BN_RECP_CTX_free' from Fn 'BN_mod_exp_recp': 1 args
Merged 1 call nodes.
[TD] Inlining callers into 'BN_free'
   [TD] Inlining graph into Fn 'BN_free' from Fn 'BN_lebin2bn': 1 args
   [TD] Inlining graph into Fn 'BN_free' from Fn 'BN_bin2bn': 1 args
   [TD] Inlining graph into Fn 'BN_free' from Fn 'BN_dup': 1 args
   [TD] Inlining graph into Fn 'BN_free' from Fn 'BN_RECP_CTX_free': 1 args
[TD] Inlining callers into 'BN_RECP_CTX_init'
   [TD] Inlining graph into Fn 'BN_RECP_CTX_init' from Fn 'BN_mod_exp_recp': 1 args
[TD] Inlining callers into 'BN_mod_exp_mont'
   [TD] Inlining graph into Fn 'BN_mod_exp_mont' from Fn 'BN_mod_exp': 6 args
[TD] Inlining callers into 'BN_mod_exp_mont_consttime'
   [TD] Inlining graph into Fn 'BN_mod_exp_mont_consttime' from Fn 'BN_mod_exp_mont': 6 args
[TD] Inlining callers into 'BN_ucmp'
   [TD] Inlining graph into Fn 'BN_ucmp' from Fn 'BN_div_recp': 2 args
   [TD] Inlining graph into Fn 'BN_ucmp' from Fn 'BN_mod_exp_mont_consttime': 2 args
   [TD] Inlining graph into Fn 'BN_ucmp' from Fn 'BN_mod_exp_mont': 2 args
[TD] Inlining callers into 'BN_value_one'
   [TD] Inlining graph into Fn 'BN_value_one' from Fn 'BN_mod_exp_mont_consttime': 0 args
   [TD] Inlining graph into Fn 'BN_value_one' from Fn 'BN_mod_exp_mont': 0 args
[TD] Inlining callers into 'MOD_EXP_CTIME_COPY_FROM_PREBUF'
   [TD] Inlining graph into Fn 'MOD_EXP_CTIME_COPY_FROM_PREBUF' from Fn 'BN_mod_exp_mont_consttime': 5 args
   [TD] Inlining graph into Fn 'MOD_EXP_CTIME_COPY_FROM_PREBUF' from Fn 'BN_mod_exp_mont_consttime': 5 args
[TD] Inlining callers into 'constant_time_eq_int'
   [TD] Inlining graph into Fn 'constant_time_eq_int' from Fn 'MOD_EXP_CTIME_COPY_FROM_PREBUF': 2 args
[TD] Inlining callers into 'constant_time_eq'
   [TD] Inlining graph into Fn 'constant_time_eq' from Fn 'constant_time_eq_int': 2 args
[TD] Inlining callers into 'constant_time_is_zero'
   [TD] Inlining graph into Fn 'constant_time_is_zero' from Fn 'constant_time_eq': 1 args
[TD] Inlining callers into 'constant_time_msb'
   [TD] Inlining graph into Fn 'constant_time_msb' from Fn 'constant_time_is_zero': 1 args
[TD] Inlining callers into 'MOD_EXP_CTIME_COPY_TO_PREBUF'
   [TD] Inlining graph into Fn 'MOD_EXP_CTIME_COPY_TO_PREBUF' from Fn 'BN_mod_exp_mont_consttime': 5 args
   [TD] Inlining graph into Fn 'MOD_EXP_CTIME_COPY_TO_PREBUF' from Fn 'BN_mod_exp_mont_consttime': 5 args
[TD] Inlining callers into 'BN_mod_exp_mont_word'
   [TD] Inlining graph into Fn 'BN_mod_exp_mont_word' from Fn 'BN_mod_exp': 6 args
[TD] Inlining callers into 'BN_to_montgomery'
   [TD] Inlining graph into Fn 'BN_to_montgomery' from Fn 'BN_mod_exp_mont_consttime': 4 args
   [TD] Inlining graph into Fn 'BN_to_montgomery' from Fn 'BN_mod_exp_mont_consttime': 4 args
   [TD] Inlining graph into Fn 'BN_to_montgomery' from Fn 'BN_mod_exp_mont_consttime': 4 args
   [TD] Inlining graph into Fn 'BN_to_montgomery' from Fn 'BN_mod_exp_mont': 4 args
   [TD] Inlining graph into Fn 'BN_to_montgomery' from Fn 'BN_mod_exp_mont': 4 args
   [TD] Inlining graph into Fn 'BN_to_montgomery' from Fn 'BN_mod_exp_mont_word': 4 args
[TD] Inlining callers into 'BN_is_one'
   [TD] Inlining graph into Fn 'BN_is_one' from Fn 'BN_mod_exp_simple': 1 args
   [TD] Inlining graph into Fn 'BN_is_one' from Fn 'BN_mod_exp_recp': 1 args
   [TD] Inlining graph into Fn 'BN_is_one' from Fn 'BN_mod_exp_mont_consttime': 1 args
   [TD] Inlining graph into Fn 'BN_is_one' from Fn 'BN_mod_exp_mont': 1 args
   [TD] Inlining graph into Fn 'BN_is_one' from Fn 'BN_mod_exp_mont_word': 1 args
[TD] Inlining callers into 'BN_abs_is_word'
   [TD] Inlining graph into Fn 'BN_abs_is_word' from Fn 'BN_is_word': 2 args
   [TD] Inlining graph into Fn 'BN_abs_is_word' from Fn 'BN_is_one': 2 args
[TD] Inlining callers into 'BN_MONT_CTX_set'
   [TD] Inlining graph into Fn 'BN_MONT_CTX_set' from Fn 'BN_MONT_CTX_set_locked': 3 args
   [TD] Inlining graph into Fn 'BN_MONT_CTX_set' from Fn 'BN_mod_exp_mont_consttime': 3 args
   [TD] Inlining graph into Fn 'BN_MONT_CTX_set' from Fn 'BN_mod_exp_mont': 3 args
   [TD] Inlining graph into Fn 'BN_MONT_CTX_set' from Fn 'BN_mod_exp_mont_word': 3 args
[TD] Inlining callers into 'BN_set_bit'
   [TD] Inlining graph into Fn 'BN_set_bit' from Fn 'BN_MONT_CTX_set': 2 args
   [TD] Inlining graph into Fn 'BN_set_bit' from Fn 'BN_reciprocal': 2 args
[TD] Inlining callers into 'BN_MONT_CTX_free'
   [TD] Inlining graph into Fn 'BN_MONT_CTX_free' from Fn 'BN_MONT_CTX_set_locked': 1 args
   [TD] Inlining graph into Fn 'BN_MONT_CTX_free' from Fn 'BN_mod_exp_mont_consttime': 1 args
   [TD] Inlining graph into Fn 'BN_MONT_CTX_free' from Fn 'BN_mod_exp_mont': 1 args
   [TD] Inlining graph into Fn 'BN_MONT_CTX_free' from Fn 'BN_mod_exp_mont_word': 1 args
Merged 2 call nodes.
[TD] Inlining callers into 'BN_clear_free'
   [TD] Inlining graph into Fn 'BN_clear_free' from Fn 'BN_MONT_CTX_free': 1 args
[TD] Inlining callers into 'BN_MONT_CTX_new'
   [TD] Inlining graph into Fn 'BN_MONT_CTX_new' from Fn 'BN_MONT_CTX_set_locked': 0 args
   [TD] Inlining graph into Fn 'BN_MONT_CTX_new' from Fn 'BN_mod_exp_mont_consttime': 0 args
   [TD] Inlining graph into Fn 'BN_MONT_CTX_new' from Fn 'BN_mod_exp_mont': 0 args
   [TD] Inlining graph into Fn 'BN_MONT_CTX_new' from Fn 'BN_mod_exp_mont_word': 0 args
[TD] Inlining callers into 'BN_MONT_CTX_init'
   [TD] Inlining graph into Fn 'BN_MONT_CTX_init' from Fn 'BN_MONT_CTX_new': 1 args
[TD] Inlining callers into 'bn_init'
   [TD] Inlining graph into Fn 'bn_init' from Fn 'BN_RECP_CTX_new': 1 args
   [TD] Inlining graph into Fn 'bn_init' from Fn 'BN_RECP_CTX_init': 1 args
   [TD] Inlining graph into Fn 'bn_init' from Fn 'BN_MONT_CTX_set': 1 args
   [TD] Inlining graph into Fn 'bn_init' from Fn 'BN_MONT_CTX_init': 1 args
[TD] Inlining callers into 'BN_from_montgomery'
   [TD] Inlining graph into Fn 'BN_from_montgomery' from Fn 'BN_mod_exp_mont_consttime': 4 args
   [TD] Inlining graph into Fn 'BN_from_montgomery' from Fn 'BN_mod_exp_mont': 4 args
   [TD] Inlining graph into Fn 'BN_from_montgomery' from Fn 'BN_mod_exp_mont_word': 4 args
[TD] Inlining callers into 'BN_mod_mul_montgomery'
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_mod_exp_mont_consttime': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_mod_exp_mont_consttime': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_mod_exp_mont_consttime': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_mod_exp_mont_consttime': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_mod_exp_mont': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_mod_exp_mont': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_mod_exp_mont': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_mod_exp_mont': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_to_montgomery': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_mod_exp_mont_word': 5 args
[TD] Inlining callers into 'BN_from_montgomery_word'
   [TD] Inlining graph into Fn 'BN_from_montgomery_word' from Fn 'BN_from_montgomery': 3 args
   [TD] Inlining graph into Fn 'BN_from_montgomery_word' from Fn 'BN_mod_mul_montgomery': 3 args
[TD] Inlining callers into 'bn_correct_top'
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'BN_mask_bits': 1 args
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'BN_lebin2bn': 1 args
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'BN_bin2bn': 1 args
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'BN_clear_bit': 1 args
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'MOD_EXP_CTIME_COPY_FROM_PREBUF': 1 args
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'BN_mod_exp_mont': 1 args
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'BN_from_montgomery_word': 1 args
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'BN_from_montgomery_word': 1 args
[TD] Inlining callers into 'BN_exp'
[TD] Inlining callers into 'BN_is_odd'
   [TD] Inlining graph into Fn 'BN_is_odd' from Fn 'BN_mod_exp_mont_consttime': 1 args
   [TD] Inlining graph into Fn 'BN_is_odd' from Fn 'BN_mod_exp_mont': 1 args
   [TD] Inlining graph into Fn 'BN_is_odd' from Fn 'BN_mod_exp_mont_word': 1 args
   [TD] Inlining graph into Fn 'BN_is_odd' from Fn 'BN_mod_exp': 1 args
   [TD] Inlining graph into Fn 'BN_is_odd' from Fn 'BN_exp': 1 args
[TD] Inlining callers into 'BN_is_bit_set'
   [TD] Inlining graph into Fn 'BN_is_bit_set' from Fn 'BN_mod_exp_simple': 2 args
   [TD] Inlining graph into Fn 'BN_is_bit_set' from Fn 'BN_mod_exp_recp': 2 args
   [TD] Inlining graph into Fn 'BN_is_bit_set' from Fn 'BN_mod_exp_mont_consttime': 2 args
   [TD] Inlining graph into Fn 'BN_is_bit_set' from Fn 'BN_mod_exp_mont': 2 args
   [TD] Inlining graph into Fn 'BN_is_bit_set' from Fn 'BN_mod_exp_mont_word': 2 args
   [TD] Inlining graph into Fn 'BN_is_bit_set' from Fn 'BN_exp': 2 args
[TD] Inlining callers into 'BN_copy'
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_MONT_CTX_copy': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_dup': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_div_recp': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_RECP_CTX_set': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_mod_exp_recp': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_MONT_CTX_set': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_from_montgomery': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_exp': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_exp': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_exp': 2 args
[TD] Inlining callers into 'BN_set_flags'
   [TD] Inlining graph into Fn 'BN_set_flags' from Fn 'BN_MONT_CTX_set': 2 args
   [TD] Inlining graph into Fn 'BN_set_flags' from Fn 'BN_copy': 2 args
[TD] Inlining callers into 'bn_wexpand'
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'BN_lebin2bn': 2 args
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'BN_bin2bn': 2 args
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'MOD_EXP_CTIME_COPY_FROM_PREBUF': 2 args
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'BN_mod_exp_mont': 2 args
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'BN_set_bit': 2 args
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'BN_from_montgomery_word': 2 args
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'BN_from_montgomery_word': 2 args
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'BN_copy': 2 args
[TD] Inlining callers into 'BN_num_bits'
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_bn2lebinpad': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'bn2binpad': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_mod_exp_simple': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_div_recp': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_RECP_CTX_set': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_mod_exp_recp': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_mod_exp_mont_consttime': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_mod_exp_mont': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_MONT_CTX_set': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_mod_exp_mont_word': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_exp': 1 args
[TD] Inlining callers into 'BN_is_zero'
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_set_negative': 1 args
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_mod_exp_simple': 1 args
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_div_recp': 1 args
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_mod_exp_recp': 1 args
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_mod_exp_mont': 1 args
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_MONT_CTX_set': 1 args
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_MONT_CTX_set': 1 args
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_num_bits': 1 args
[TD] Inlining callers into 'BN_num_bits_word'
   [TD] Inlining graph into Fn 'BN_num_bits_word' from Fn 'BN_num_bits': 1 args
[TD] Inlining callers into 'BN_set_word'
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_mod_exp_simple': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_div_recp': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_RECP_CTX_set': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_mod_exp_recp': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_mod_exp_mont_consttime': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_mod_exp_mont': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_MONT_CTX_set': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_MONT_CTX_set': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_mod_exp_mont_word': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_mod_exp_mont_word': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_exp': 2 args
[TD] Inlining callers into 'bn_expand'
   [TD] Inlining graph into Fn 'bn_expand' from Fn 'BN_set_word': 2 args
[TD] Inlining callers into 'bn_expand2'
   [TD] Inlining graph into Fn 'bn_expand2' from Fn 'bn_wexpand': 2 args
   [TD] Inlining graph into Fn 'bn_expand2' from Fn 'bn_expand': 2 args
[TD] Inlining callers into 'bn_expand_internal'
   [TD] Inlining graph into Fn 'bn_expand_internal' from Fn 'bn_expand2': 2 args
[TD] Inlining callers into 'bn_free_d'
   [TD] Inlining graph into Fn 'bn_free_d' from Fn 'BN_free': 1 args
   [TD] Inlining graph into Fn 'bn_free_d' from Fn 'BN_clear_free': 1 args
   [TD] Inlining graph into Fn 'bn_free_d' from Fn 'bn_expand2': 1 args
[TD] Inlining callers into 'BN_get_flags'
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_dup': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_simple': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_simple': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_simple': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_free': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_recp': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_recp': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_recp': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_mont': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_mont': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_mont': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_MONT_CTX_set': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_clear_free': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_mont_word': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_mont_word': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_copy': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'bn_expand_internal': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'bn_free_d': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_exp': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_exp': 2 args
Eliminating 1 EC Globals!
Running on BN_exp in context []
Running on llvm.dbg.declare in context []
Running on CRYPTO_malloc in context []
Running on __memset_chk in context []
Running on llvm.objectsize.i64.p0i8 in context []
Running on ERR_put_error in context []
Running on BN_CTX_start in context []
Running on BN_CTX_get in context []
Running on BN_sqr in context []
Running on BN_mul in context []
Running on BN_CTX_end in context []
Running on BN_mod_exp in context []
Running on BN_mod_exp_mont_word in context []
Running on BN_mod_exp_mont in context []
Using taint reachable signature for:   call void @ERR_put_error(i32 3, i32 109, i32 102, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 328), !dbg !433
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
Creating ConsElem Map for :	Node0x7fce5aefae10 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str = private unnamed_addr constant [9 x i8] c\"bn_exp.c\\00\", align 1\n|{<s0>0}}"];
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
	Node0x7fce5aefae10 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str = private unnamed_addr constant [9 x i8] c\"bn_exp.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %16), !dbg !458
RSINKGEP INSTRUCTION   %16 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !457
Creating ConsElem Map for :	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
REACHABLE SOURCE:   %16 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !457
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %16 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !457
Using taint reachable signature for:   %call20 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %17), !dbg !460
RSINKGEP INSTRUCTION   %17 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !459
REACHABLE SOURCE:   %17 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !459
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %17 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !459
Using taint reachable signature for:   %call21 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %18), !dbg !463
RSINKGEP INSTRUCTION   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !462
REACHABLE SOURCE:   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !462
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !462
Using taint reachable signature for:   %call22 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %19), !dbg !466
RSINKGEP INSTRUCTION   %19 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !465
REACHABLE SOURCE:   %19 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !465
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %19 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !465
Using taint reachable signature for:   %call49 = call i32 @BN_nnmod(%struct.bignum_st* %32, %struct.bignum_st* %33, %struct.bignum_st* %34, %struct.bignum_ctx* %35), !dbg !513
RSINKGEP INSTRUCTION   %32 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx48, align 8, !dbg !507
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %33 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !510
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %34 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !511
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %35 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !512
Creating ConsElem Map for :	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
REACHABLE SOURCE:   %32 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx48, align 8, !dbg !507
REACHABLE SOURCE:   %33 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !510
REACHABLE SOURCE:   %34 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !511
REACHABLE SOURCE:   %35 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !512
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %32 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx48, align 8, !dbg !507
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %33 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !510
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %34 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !511
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %35 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !512
Using taint reachable signature for:   %call88 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %57), !dbg !568
RSINKGEP INSTRUCTION   %57 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !565
REACHABLE SOURCE:   %57 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !565
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %57 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !565
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %146), !dbg !790
RSINKGEP INSTRUCTION   %146 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !789
REACHABLE SOURCE:   %146 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !789
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %146 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !789
Creating ConsElem Map for :	Node0x7fce5aed9920 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aed9920:s0 -> Node0x7fce5aed9070;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aed9070 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aed9070:s0 -> Node0x7fce5aedb8b0;
Creating ConsElem Map for :	Node0x7fce5aed9a60 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aed9a60:s0 -> Node0x7fce5aed9190;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aed9190 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aed9190:s0 -> Node0x7fce5aedb9b0;
Creating ConsElem Map for :	Node0x7fce5aed9ba0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aed9ba0:s0 -> Node0x7fce5aed92d0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aed92d0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aed92d0:s0 -> Node0x7fce5aedbab0;
Creating ConsElem Map for :	Node0x7fce5aed9ce0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aed9ce0:s0 -> Node0x7fce5aed9470;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aed9470 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aed9470:s0 -> Node0x7fce5aedb4b0;
Creating ConsElem Map for :	Node0x7fce5aed9e20 [shape=record,shape=Mrecord,label="{0: %struct.bignum_ctx*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aed9e20:s0 -> Node0x7fce5aed9640;
EDGE: [0: tymap-size 1]:%struct.bignum_ctx = type opaque
	Node0x7fce5aed9640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x7fce5aed9f60 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aed9f60:s0 -> Node0x7fce5afabed0;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x7fce5afabed0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5afabed0:s0 -> Node0x7fce5afac1c0;
Creating ConsElem Map for :	Node0x7fce5aeda3a0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aeda8a0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aedaea0 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aedaea0:s0 -> Node0x7fce5afabed0;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x7fce5afabed0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5afabed0:s0 -> Node0x7fce5afac1c0;
Creating ConsElem Map for :	Node0x7fce5aed9820 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aeda2a0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aeda9a0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aeda9a0:s0 -> Node0x7fce5aedb0b0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aedb0b0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x7fce5aedb0b0:s0 -> Node0x7fce5aedbd80;
Creating ConsElem Map for :	Node0x7fce5aedaae0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aedaae0:s0 -> Node0x7fce5aedb2b0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aedb2b0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x7fce5aedb2b0:s0 -> Node0x7fce5aedb5b0;
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !467
[Sink:]   %arrayidx = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !467
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Tainting at offset: 0
	Node0x7fce5aed9190 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aed9190:s0 -> Node0x7fce5aedb9b0;
Trying to find element at offset 0
Tainting at offset: 0
Created 32 constraint variable(s) for node of size 8
	Node0x7fce5aedad60 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x7fce5aedad60:s0 -> Node0x7fce5aed9190;
Trying to find element at offset 0
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !467
[Sink:]   %arrayidx = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !467
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Tainting at offset: 0
	Node0x7fce5aed9190 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aed9190:s0 -> Node0x7fce5aedb9b0;
Trying to find element at offset 0
Tainting at offset: 0
	Node0x7fce5aedad60 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x7fce5aedad60:s0 -> Node0x7fce5aed9190;
Trying to find element at offset 0
DSOURCEGEP INSTRUCTION   %arrayidx27 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !474
[Source:]   %arrayidx27 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !474
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Trying to find element at offset 0
	Node0x7fce5aedad60 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x7fce5aedad60:s0 -> Node0x7fce5aed9190;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7fce5acc00c0
CONSTRAINING: 0: %struct.bignum_st*,   array: SCMR: elem 0::0x7fce5d112650
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %28, i32 0, i32 3, !dbg !500
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %28, i32 0, i32 3, !dbg !500
StructType: allocation intermediate:   %28 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !498
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 16
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[16,20]0x7fce5acc02a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
DSOURCEGEP INSTRUCTION   %arrayidx48 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !507
[Source:]   %arrayidx48 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !507
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Trying to find element at offset 0
	Node0x7fce5aedad60 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x7fce5aedad60:s0 -> Node0x7fce5aed9190;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7fce5acc00c0
CONSTRAINING: 0: %struct.bignum_st*,   array: SCMR: elem 0::0x7fce5d112650
DSOURCEGEP INSTRUCTION   %arrayidx53 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !516
[Source:]   %arrayidx53 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !516
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Trying to find element at offset 0
	Node0x7fce5aedad60 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x7fce5aedad60:s0 -> Node0x7fce5aed9190;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7fce5acc00c0
CONSTRAINING: 0: %struct.bignum_st*,   array: SCMR: elem 0::0x7fce5d112650
Creating ConsElem Map for :	Node0x7fce5aedac20 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aedac20:s0 -> Node0x7fce5aed9190;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aed9190 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aed9190:s0 -> Node0x7fce5aedb9b0;
DSOURCEGEP INSTRUCTION   %arrayidx61 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !529
[Source:]   %arrayidx61 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !529
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Trying to find element at offset 0
	Node0x7fce5aedad60 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x7fce5aedad60:s0 -> Node0x7fce5aed9190;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7fce5acc00c0
CONSTRAINING: 0: %struct.bignum_st*,   array: SCMR: elem 0::0x7fce5d112650
Creating ConsElem Map for :	Node0x7fce5aeda6a0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx81 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !546
[Source:]   %arrayidx81 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !546
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Trying to find element at offset 0
	Node0x7fce5aedad60 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x7fce5aedad60:s0 -> Node0x7fce5aed9190;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7fce5acc00c0
CONSTRAINING: 0: %struct.bignum_st*,   array: SCMR: elem 0::0x7fce5d112650
DSOURCEGEP INSTRUCTION   %arrayidx82 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !547
[Source:]   %arrayidx82 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !547
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Trying to find element at offset 0
	Node0x7fce5aedad60 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x7fce5aedad60:s0 -> Node0x7fce5aed9190;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7fce5acc00c0
CONSTRAINING: 0: %struct.bignum_st*,   array: SCMR: elem 0::0x7fce5d112650
Creating ConsElem Map for :	Node0x7fce5aeda1a0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aeda0a0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSINKGEP INSTRUCTION   %arrayidx89 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom, !dbg !570
[Sink:]   %arrayidx89 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom, !dbg !570
DSINKGEP INSTRUCTION   %arrayidx89 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom, !dbg !570
[Sink:]   %arrayidx89 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom, !dbg !570
DSOURCEGEP INSTRUCTION   %arrayidx93 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom92, !dbg !575
[Source:]   %arrayidx93 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom92, !dbg !575
DSOURCEGEP INSTRUCTION   %arrayidx96 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom95, !dbg !578
[Source:]   %arrayidx96 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom95, !dbg !578
Creating ConsElem Map for :	Node0x7fce5aeda7a0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aeda4a0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aeda5a0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %68, i32 0, i32 1, !dbg !596
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %68, i32 0, i32 1, !dbg !596
StructType: allocation intermediate:   %68 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !595
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[8,12]0x7fce5acc0ba0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
DSOURCEGEP INSTRUCTION   %d105 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %71, i32 0, i32 0, !dbg !602
[Source:]   %d105 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %71, i32 0, i32 0, !dbg !602
StructType: allocation intermediate:   %71 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !601
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x7fce5acc0b80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
DSOURCEGEP INSTRUCTION   %arrayidx106 = getelementptr inbounds i64, i64* %72, i64 %idxprom104, !dbg !601
[Source:]   %arrayidx106 = getelementptr inbounds i64, i64* %72, i64 %idxprom104, !dbg !601
DSOURCEGEP INSTRUCTION   %d113 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %76, i32 0, i32 0, !dbg !614
[Source:]   %d113 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %76, i32 0, i32 0, !dbg !614
StructType: allocation intermediate:   %76 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !613
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x7fce5acc0b80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
DSOURCEGEP INSTRUCTION   %arrayidx114 = getelementptr inbounds i64, i64* %77, i64 0, !dbg !613
[Source:]   %arrayidx114 = getelementptr inbounds i64, i64* %77, i64 0, !dbg !613
 allocation intermediate:   %77 = load i64*, i64** %d113, align 8, !dbg !614
=>  %d113 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %76, i32 0, i32 0, !dbg !614
 allocation intermediate:   %d113 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %76, i32 0, i32 0, !dbg !614
=>  %76 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !613
 allocation intermediate:   %76 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !613
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x7fce5acc0b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
DSOURCEGEP INSTRUCTION   %d116 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %79, i32 0, i32 0, !dbg !617
[Source:]   %d116 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %79, i32 0, i32 0, !dbg !617
StructType: allocation intermediate:   %79 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !616
=>  %r = alloca %struct.bignum_st*, align 8
FINAL:   %r = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7fce5afe39f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
DSINKGEP INSTRUCTION   %arrayidx117 = getelementptr inbounds i64, i64* %80, i64 0, !dbg !616
[Sink:]   %arrayidx117 = getelementptr inbounds i64, i64* %80, i64 0, !dbg !616
 allocation intermediate:   %80 = load i64*, i64** %d116, align 8, !dbg !617
=>  %d116 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %79, i32 0, i32 0, !dbg !617
 allocation intermediate:   %d116 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %79, i32 0, i32 0, !dbg !617
=>  %79 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !616
 allocation intermediate:   %79 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !616
=>  %r = alloca %struct.bignum_st*, align 8
FINAL:   %r = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fce5aedb2b0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x7fce5aedb2b0:s0 -> Node0x7fce5aedb5b0;
Trying to find element at offset 0
DSINKGEP INSTRUCTION   %arrayidx117 = getelementptr inbounds i64, i64* %80, i64 0, !dbg !616
[Sink:]   %arrayidx117 = getelementptr inbounds i64, i64* %80, i64 0, !dbg !616
 allocation intermediate:   %80 = load i64*, i64** %d116, align 8, !dbg !617
=>  %d116 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %79, i32 0, i32 0, !dbg !617
 allocation intermediate:   %d116 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %79, i32 0, i32 0, !dbg !617
=>  %79 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !616
 allocation intermediate:   %79 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !616
=>  %r = alloca %struct.bignum_st*, align 8
FINAL:   %r = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fce5aedb2b0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x7fce5aedb2b0:s0 -> Node0x7fce5aedb5b0;
Trying to find element at offset 0
DSOURCEGEP INSTRUCTION   %d122 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %84, i32 0, i32 0, !dbg !629
[Source:]   %d122 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %84, i32 0, i32 0, !dbg !629
StructType: allocation intermediate:   %84 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !628
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x7fce5acc0b80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
DSOURCEGEP INSTRUCTION   %arrayidx123 = getelementptr inbounds i64, i64* %85, i64 %idxprom121, !dbg !628
[Source:]   %arrayidx123 = getelementptr inbounds i64, i64* %85, i64 %idxprom121, !dbg !628
DSOURCEGEP INSTRUCTION   %d126 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %88, i32 0, i32 0, !dbg !633
[Source:]   %d126 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %88, i32 0, i32 0, !dbg !633
StructType: allocation intermediate:   %88 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !632
=>  %r = alloca %struct.bignum_st*, align 8
FINAL:   %r = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7fce5afe39f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
DSINKGEP INSTRUCTION   %arrayidx127 = getelementptr inbounds i64, i64* %89, i64 %idxprom125, !dbg !632
[Sink:]   %arrayidx127 = getelementptr inbounds i64, i64* %89, i64 %idxprom125, !dbg !632
DSINKGEP INSTRUCTION   %arrayidx127 = getelementptr inbounds i64, i64* %89, i64 %idxprom125, !dbg !632
[Sink:]   %arrayidx127 = getelementptr inbounds i64, i64* %89, i64 %idxprom125, !dbg !632
DSINKGEP INSTRUCTION   %top131 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %92, i32 0, i32 1, !dbg !639
[Sink:]   %top131 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %92, i32 0, i32 1, !dbg !639
StructType:::IS STRUCT TY:: allocation intermediate:   %92 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !638
=>  %r = alloca %struct.bignum_st*, align 8
FINAL:   %r = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 8
	Node0x7fce5aedb2b0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x7fce5aedb2b0:s0 -> Node0x7fce5aedb5b0;
Trying to find element at offset 8
DSINKGEP INSTRUCTION   %top131 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %92, i32 0, i32 1, !dbg !639
[Sink:]   %top131 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %92, i32 0, i32 1, !dbg !639
StructType:::IS STRUCT TY:: allocation intermediate:   %92 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !638
=>  %r = alloca %struct.bignum_st*, align 8
FINAL:   %r = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 8
	Node0x7fce5aedb2b0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x7fce5aedb2b0:s0 -> Node0x7fce5aedb5b0;
Trying to find element at offset 8
DSOURCEGEP INSTRUCTION   %arrayidx185 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom184, !dbg !756
[Source:]   %arrayidx185 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom184, !dbg !756
Running on BN_mod_exp_recp in context []
Running on BN_nnmod in context []
Running on BN_mod_exp_mont_consttime in context []
Running on BN_div in context []
Running on OPENSSL_cleanse in context []
Running on CRYPTO_free in context []
Running on BN_mul_word in context []
Running on BN_mod_exp_simple in context []
Running on BN_mod_mul in context []
Running on BN_set_params in context []
Running on BN_get_params in context []
Running on BN_value_one in context []
Running on BN_num_bits_word in context []
Running on BN_set_word in context []
Running on BN_num_bits in context []
Running on BN_is_zero in context []
Running on BN_clear_free in context []
Running on BN_get_flags in context []
Running on BN_free in context []
Running on bn_init in context []
Running on llvm.memcpy.p0i8.p0i8.i64 in context []
Running on BN_new in context []
Running on CRYPTO_zalloc in context []
Running on BN_secure_new in context []
Running on bn_expand2 in context []
Running on BN_dup in context []
Running on BN_copy in context []
Running on bn_wexpand in context []
Running on BN_set_flags in context []
Running on BN_swap in context []
Running on BN_clear in context []
Running on BN_get_word in context []
Running on BN_bin2bn in context []
Running on bn_correct_top in context []
Running on BN_bn2binpad in context []
Running on BN_bn2bin in context []
Running on BN_lebin2bn in context []
Running on BN_bn2lebinpad in context []
Running on BN_with_flags in context []
Running on BN_GENCB_new in context []
Running on BN_GENCB_free in context []
Running on BN_GENCB_get_arg in context []
Running on CRYPTO_secure_free in context []
Running on BN_GENCB_set_old in context []
Running on BN_GENCB_set in context []
Running on CRYPTO_secure_zalloc in context []
Running on BN_mod_mul_montgomery in context []
Running on BN_from_montgomery in context []
Running on BN_MONT_CTX_new in context []
Running on BN_MONT_CTX_init in context []
Running on BN_MONT_CTX_free in context []
Running on BN_MONT_CTX_set in context []
Running on BN_mod_inverse in context []
Running on BN_lshift in context []
Running on BN_set_bit in context []
Running on BN_clear_bit in context []
Running on BN_is_bit_set in context []
Running on BN_mask_bits in context []
Running on BN_set_negative in context []
Running on bn_cmp_words in context []
Running on bn_cmp_part_words in context []
Running on BN_consttime_swap in context []
Running on __assert_rtn in context []
Running on BN_ucmp in context []
Running on BN_cmp in context []
Running on BN_security_bits in context []
Running on BN_zero_ex in context []
Running on BN_abs_is_word in context []
Running on BN_is_one in context []
Running on BN_is_word in context []
Running on BN_is_odd in context []
Running on BN_is_negative in context []
Running on BN_to_montgomery in context []
Running on BN_sub_word in context []
Running on BN_MONT_CTX_copy in context []
Running on BN_MONT_CTX_set_locked in context []
Running on CRYPTO_THREAD_read_lock in context []
Running on CRYPTO_THREAD_unlock in context []
Running on CRYPTO_THREAD_write_lock in context []
Running on bn_mul_add_words in context []
Running on bn_sub_words in context []
Running on BN_RECP_CTX_init in context []
Running on BN_RECP_CTX_new in context []
Running on BN_RECP_CTX_free in context []
Running on BN_RECP_CTX_set in context []
Running on BN_mod_mul_reciprocal in context []
Running on BN_div_recp in context []
Running on BN_reciprocal in context []
Running on BN_rshift in context []
Running on BN_usub in context []
Running on BN_add_word in context []
Running on BN_get_flags in context [BN_mod_exp_mont ]
Creating ConsElem Map for :	Node0x7fce5aeb8ce0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aeb8ce0:s0 -> Node0x7fce5acbe880;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5acbe880 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbe880:s0 -> Node0x7fce5afabc00;
Creating ConsElem Map for :	Node0x7fce5aeb8db0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !369
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !369
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !368
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d1165b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d116690
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d116770
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d116850
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d11ef30
Running on BN_mod_exp_mont_consttime in context [BN_mod_exp_mont ]
Using taint reachable signature for:   call void @ERR_put_error(i32 3, i32 124, i32 102, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 622), !dbg !406
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
	Node0x7fce5aefae10 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str = private unnamed_addr constant [9 x i8] c\"bn_exp.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %9), !dbg !434
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !433
REACHABLE SOURCE:   %9 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !433
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !433
Using taint reachable signature for:   %call56 = call i8* @CRYPTO_malloc(i64 %conv55, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 718), !dbg !483
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
	Node0x7fce5aefae10 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str = private unnamed_addr constant [9 x i8] c\"bn_exp.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
Unsupported intrinsic: llvm.objectsize
Using taint reachable signature for:   %call63 = call i8* @__memset_chk(i8* %34, i32 0, i64 %conv62, i64 %37) #5, !dbg !491
RSINKGEP INSTRUCTION   %34 = load i8*, i8** %powerbuf, align 8, !dbg !491
REACHABLE SOURCE:   %34 = load i8*, i8** %powerbuf, align 8, !dbg !491
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %34 = load i8*, i8** %powerbuf, align 8, !dbg !491
Using taint reachable signature for:   %call114 = call i32 @BN_div(%struct.bignum_st* null, %struct.bignum_st* %am, %struct.bignum_st* %70, %struct.bignum_st* %71, %struct.bignum_ctx* %72), !dbg !581
RSINKGEP INSTRUCTION %struct.bignum_st* null
RSINKGEP INSTRUCTION   %71 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !581
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %72 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !581
RSINKGEP INSTRUCTION   %70 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !581
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %am = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE: %struct.bignum_st* null
REACHABLE SOURCE:   %71 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !581
REACHABLE SOURCE:   %72 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !581
REACHABLE SOURCE:   %70 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !581
REACHABLE SOURCE:   %am = alloca %struct.bignum_st, align 8
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
RSINKGEP INSTRUCTION %struct.bignum_st* null
RSINKGEP INSTRUCTION   %71 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !581
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %72 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !581
RSINKGEP INSTRUCTION   %70 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !581
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %am = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   call void @OPENSSL_cleanse(i8* %134, i64 %conv214), !dbg !758
RSINKGEP INSTRUCTION   %134 = load i8*, i8** %powerbuf, align 8, !dbg !755
REACHABLE SOURCE:   %134 = load i8*, i8** %powerbuf, align 8, !dbg !755
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %134 = load i8*, i8** %powerbuf, align 8, !dbg !755
Using taint reachable signature for:   call void @CRYPTO_free(i8* %136, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 1091), !dbg !759
RSINKGEP INSTRUCTION   %136 = load i8*, i8** %powerbufFree, align 8, !dbg !759
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
REACHABLE SOURCE:   %136 = load i8*, i8** %powerbufFree, align 8, !dbg !759
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aefae10 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str = private unnamed_addr constant [9 x i8] c\"bn_exp.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %136 = load i8*, i8** %powerbufFree, align 8, !dbg !759
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %137), !dbg !762
RSINKGEP INSTRUCTION   %137 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !761
REACHABLE SOURCE:   %137 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !761
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %137 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !761
Creating ConsElem Map for :	Node0x7fce5aedff00 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aedff00:s0 -> Node0x7fce5aedfa80;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aedfa80 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aedfa80:s0 -> Node0x7fce5aee1950;
Creating ConsElem Map for :	Node0x7fce5aedff90 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aedff90:s0 -> Node0x7fce5aedfba0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aedfba0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aedfba0:s0 -> Node0x7fce5aee1c50;
Creating ConsElem Map for :	Node0x7fce5aee0020 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aee0020:s0 -> Node0x7fce5aedfc30;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aedfc30 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aedfc30:s0 -> Node0x7fce5aee1a50;
Creating ConsElem Map for :	Node0x7fce5aee00b0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aee00b0:s0 -> Node0x7fce5aedfcc0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aedfcc0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aedfcc0:s0 -> Node0x7fce5aee1580;
Creating ConsElem Map for :	Node0x7fce5aee0140 [shape=record,shape=Mrecord,label="{0: %struct.bignum_ctx*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aee0140:s0 -> Node0x7fce5aedfd50;
EDGE: [0: tymap-size 1]:%struct.bignum_ctx = type opaque
	Node0x7fce5aedfd50 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x7fce5aee0210 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aee0210:s0 -> Node0x7fce5afac040;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x7fce5afac040 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5afac040:s0 -> Node0x7fce5ad8c470;
Creating ConsElem Map for :	Node0x7fce5aee0550 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aee0950 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aee0950:s0 -> Node0x7fce5afac040;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x7fce5afac040 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5afac040:s0 -> Node0x7fce5ad8c470;
Creating ConsElem Map for :	Node0x7fce5aee0b90 [shape=record,shape=Mrecord,label="{0: i8*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aee0b90:s0 -> Node0x7fce5aee13e0;
EDGE: [0: tymap-size 1]:i8
	Node0x7fce5aee13e0 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n}"];
Creating ConsElem Map for :	Node0x7fce5aee0cd0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aee0dd0 [shape=record,shape=Mrecord,label="{0: i8*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aee0dd0:s0 -> Node0x7fce5aee13e0;
EDGE: [0: tymap-size 1]:i8
	Node0x7fce5aee13e0 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n}"];
Creating ConsElem Map for :	Node0x7fce5aedfe70 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %top2 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 1, !dbg !410
[Source:]   %top2 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 1, !dbg !410
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !409
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[8,12]0x7fce5acd12e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
Creating ConsElem Map for :	Node0x7fce5aee0850 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aee0450 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aee0650 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aee0a90 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSINKGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !505
[Sink:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !505
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !505
[Sink:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !505
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSOURCEGEP INSTRUCTION   %d73 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !507
[Source:]   %d73 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !507
StructType:FINAL:   %tmp = alloca %struct.bignum_st, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
DSINKGEP INSTRUCTION   %d75 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 0, !dbg !510
[Sink:]   %d75 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 0, !dbg !510
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %d75 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 0, !dbg !510
[Sink:]   %d75 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 0, !dbg !510
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %top76 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 1, !dbg !512
[Sink:]   %top76 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 1, !dbg !512
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %top76 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 1, !dbg !512
[Sink:]   %top76 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 1, !dbg !512
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %top77 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 1, !dbg !514
[Sink:]   %top77 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 1, !dbg !514
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %top77 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 1, !dbg !514
[Sink:]   %top77 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 1, !dbg !514
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 2, !dbg !517
[Sink:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 2, !dbg !517
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 12
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 2, !dbg !517
[Sink:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 2, !dbg !517
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 12
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %dmax78 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 2, !dbg !519
[Sink:]   %dmax78 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 2, !dbg !519
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 12
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %dmax78 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 2, !dbg !519
[Sink:]   %dmax78 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 2, !dbg !519
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 12
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 3, !dbg !521
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 3, !dbg !521
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 3, !dbg !521
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 3, !dbg !521
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg79 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 3, !dbg !523
[Sink:]   %neg79 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 3, !dbg !523
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg79 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 3, !dbg !523
[Sink:]   %neg79 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 3, !dbg !523
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 4, !dbg !525
[Sink:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 4, !dbg !525
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 20
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 4, !dbg !525
[Sink:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 4, !dbg !525
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 20
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %flags80 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 4, !dbg !527
[Sink:]   %flags80 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 4, !dbg !527
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 20
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %flags80 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 4, !dbg !527
[Sink:]   %flags80 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 4, !dbg !527
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 20
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSOURCEGEP INSTRUCTION   %d82 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 0, !dbg !533
[Source:]   %d82 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 0, !dbg !533
StructType: allocation intermediate:   %47 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !532
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x7fce5acd12c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %48, i64 %idxprom, !dbg !532
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %48, i64 %idxprom, !dbg !532
DSOURCEGEP INSTRUCTION   %d86 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 0, !dbg !538
[Source:]   %d86 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 0, !dbg !538
StructType: allocation intermediate:   %50 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !536
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x7fce5acd12c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
DSOURCEGEP INSTRUCTION   %arrayidx87 = getelementptr inbounds i64, i64* %51, i64 0, !dbg !536
[Source:]   %arrayidx87 = getelementptr inbounds i64, i64* %51, i64 0, !dbg !536
 allocation intermediate:   %51 = load i64*, i64** %d86, align 8, !dbg !538
=>  %d86 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 0, !dbg !538
 allocation intermediate:   %d86 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 0, !dbg !538
=>  %50 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !536
 allocation intermediate:   %50 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !536
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x7fce5acd12c0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
DSOURCEGEP INSTRUCTION   %d89 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !540
[Source:]   %d89 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !540
StructType:FINAL:   %tmp = alloca %struct.bignum_st, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
DSINKGEP INSTRUCTION   %arrayidx90 = getelementptr inbounds i64, i64* %53, i64 0, !dbg !541
[Sink:]   %arrayidx90 = getelementptr inbounds i64, i64* %53, i64 0, !dbg !541
 allocation intermediate:   %53 = load i64*, i64** %d89, align 8, !dbg !540
=>  %d89 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !540
 allocation intermediate:   %d89 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !540
=>  %tmp = alloca %struct.bignum_st, align 8
FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx90 = getelementptr inbounds i64, i64* %53, i64 0, !dbg !541
[Sink:]   %arrayidx90 = getelementptr inbounds i64, i64* %53, i64 0, !dbg !541
 allocation intermediate:   %53 = load i64*, i64** %d89, align 8, !dbg !540
=>  %d89 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !540
 allocation intermediate:   %d89 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !540
=>  %tmp = alloca %struct.bignum_st, align 8
FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Creating ConsElem Map for :	Node0x7fce5aee0350 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %d94 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %57, i32 0, i32 0, !dbg !553
[Source:]   %d94 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %57, i32 0, i32 0, !dbg !553
StructType: allocation intermediate:   %57 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !552
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x7fce5acd12c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
DSOURCEGEP INSTRUCTION   %arrayidx95 = getelementptr inbounds i64, i64* %58, i64 %idxprom93, !dbg !552
[Source:]   %arrayidx95 = getelementptr inbounds i64, i64* %58, i64 %idxprom93, !dbg !552
DSOURCEGEP INSTRUCTION   %d98 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !557
[Source:]   %d98 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !557
StructType:FINAL:   %tmp = alloca %struct.bignum_st, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
DSINKGEP INSTRUCTION   %arrayidx99 = getelementptr inbounds i64, i64* %61, i64 %idxprom97, !dbg !556
[Sink:]   %arrayidx99 = getelementptr inbounds i64, i64* %61, i64 %idxprom97, !dbg !556
DSINKGEP INSTRUCTION   %arrayidx99 = getelementptr inbounds i64, i64* %61, i64 %idxprom97, !dbg !556
[Sink:]   %arrayidx99 = getelementptr inbounds i64, i64* %61, i64 %idxprom97, !dbg !556
DSINKGEP INSTRUCTION   %top100 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 1, !dbg !562
[Sink:]   %top100 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 1, !dbg !562
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %top100 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 1, !dbg !562
[Sink:]   %top100 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 1, !dbg !562
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSOURCEGEP INSTRUCTION   %neg108 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %66, i32 0, i32 3, !dbg !574
[Source:]   %neg108 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %66, i32 0, i32 3, !dbg !574
StructType: allocation intermediate:   %66 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !572
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 16
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[16,20]0x7fce5acd0ac0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
Creating ConsElem Map for :	Node0x7fce5aee0750 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Running on BN_is_odd in context [BN_mod_exp_mont ]
Creating ConsElem Map for :	Node0x7fce5aec0a10 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aec0a10:s0 -> Node0x7fce5aec08f0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aec08f0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aec08f0:s0 -> Node0x7fce5aec0aa0;
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !367
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !367
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !366
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[8,12]0x7fce5d02b970
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !371
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !371
StructType: allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !370
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x7fce5d02b950
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %3, i64 0, !dbg !370
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %3, i64 0, !dbg !370
 allocation intermediate:   %3 = load i64*, i64** %d, align 8, !dbg !371
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !371
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !371
=>  %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !370
 allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !370
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x7fce5d02b950
Running on BN_num_bits in context [BN_mod_exp_mont ]
Creating ConsElem Map for :	Node0x7fce5aebb740 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aebb740:s0 -> Node0x7fce5aebb590;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aebb590 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aebb590:s0 -> Node0x7fce5aebb860;
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !369
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !369
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !368
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7fce5d128a30
Creating ConsElem Map for :	Node0x7fce5aebb7d0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aebb6b0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !380
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !380
StructType: allocation intermediate:   %5 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !379
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7fce5d128950
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !379
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !379
Running on BN_is_one in context [BN_mod_exp_mont ]
Creating ConsElem Map for :	Node0x7fce5aed7160 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aed7160:s0 -> Node0x7fce5aed7040;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aed7040 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aed7040:s0 -> Node0x7fce5aed71f0;
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !370
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !370
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !369
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 16
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[16,20]0x7fce5acdf400
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
Running on BN_set_word in context [BN_mod_exp_mont ]
Creating ConsElem Map for :	Node0x7fce5aeb5fb0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aeb5fb0:s0 -> Node0x7fce5acbdc70;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5acbdc70 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdc70:s0 -> Node0x7fce5ade42c0;
Creating ConsElem Map for :	Node0x7fce5aeb6040 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aeb5f20 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !375
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !375
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !374
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fce5acbdc70 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdc70:s0 -> Node0x7fce5ade42c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !375
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !375
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !374
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fce5acbdc70 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdc70:s0 -> Node0x7fce5ade42c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5ace05f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5ace0a10
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5ace0a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5ace0ab0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5ace0ad0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !378
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !378
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !379
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x7fce5acbdc70 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdc70:s0 -> Node0x7fce5ade42c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !378
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !378
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !379
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x7fce5acbdc70 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdc70:s0 -> Node0x7fce5ade42c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !383
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !383
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !382
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5acbdc70 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdc70:s0 -> Node0x7fce5ade42c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !383
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !383
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !382
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5acbdc70 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdc70:s0 -> Node0x7fce5ade42c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Running on BN_MONT_CTX_new in context [BN_mod_exp_mont ]
Using taint reachable signature for:   %call = call i8* @CRYPTO_malloc(i64 104, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0), i32 217), !dbg !366
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
Creating ConsElem Map for :	Node0x7fce5aed1580 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str38 = private unnamed_addr constant [10 x i8] c\"bn_mont.c\\00\", align 1\n|{<s0>0}}"];
REACHABLE SOURCE: i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
	Node0x7fce5aed1580 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str38 = private unnamed_addr constant [10 x i8] c\"bn_mont.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
Creating ConsElem Map for :	Node0x7fce5aecf9a0 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aecf9a0:s0 -> Node0x7fce5aecfac0;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x7fce5aecfac0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aecfac0:s0 -> Node0x7fce5addf2e0;
Creating ConsElem Map for :	Node0x7fce5aecf880 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aecf880:s0 -> Node0x7fce5aecfac0;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x7fce5aecfac0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aecfac0:s0 -> Node0x7fce5addf2e0;
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 5, !dbg !375
[Sink:]   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 5, !dbg !375
StructType:::IS STRUCT TY:: allocation intermediate:   %2 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ret, align 8, !dbg !374
=>  %ret = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %ret = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 96
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 96
	Node0x7fce5aecfac0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aecfac0:s0 -> Node0x7fce5addf2e0;
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 5, !dbg !375
[Sink:]   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 5, !dbg !375
StructType:::IS STRUCT TY:: allocation intermediate:   %2 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ret, align 8, !dbg !374
=>  %ret = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %ret = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 96
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 96
	Node0x7fce5aecfac0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aecfac0:s0 -> Node0x7fce5addf2e0;
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Running on BN_MONT_CTX_set in context [BN_mod_exp_mont ]
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %1), !dbg !382
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !381
REACHABLE SOURCE:   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !381
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !381
Using taint reachable signature for:   %call1 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %2), !dbg !385
RSINKGEP INSTRUCTION   %2 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !383
REACHABLE SOURCE:   %2 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !383
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %2 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !383
Using taint reachable signature for:   %call25 = call %struct.bignum_st* @BN_mod_inverse(%struct.bignum_st* %16, %struct.bignum_st* %17, %struct.bignum_st* %tmod, %struct.bignum_ctx* %18), !dbg !451
RSINKGEP INSTRUCTION   %tmod = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %17 = load %struct.bignum_st*, %struct.bignum_st** %R, align 8, !dbg !449
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %16 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !447
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !450
REACHABLE SOURCE:   %tmod = alloca %struct.bignum_st, align 8
REACHABLE SOURCE:   %17 = load %struct.bignum_st*, %struct.bignum_st** %R, align 8, !dbg !449
REACHABLE SOURCE:   %16 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !447
REACHABLE SOURCE:   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !450
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %tmod = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %17 = load %struct.bignum_st*, %struct.bignum_st** %R, align 8, !dbg !449
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %16 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !447
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !450
Using taint reachable signature for:   %call29 = call i32 @BN_lshift(%struct.bignum_st* %19, %struct.bignum_st* %20, i32 64), !dbg !458
RSINKGEP INSTRUCTION   %20 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !457
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %19 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !455
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %20 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !457
REACHABLE SOURCE:   %19 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !455
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
RSINKGEP INSTRUCTION   %20 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !457
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %19 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !455
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call36 = call i32 @BN_sub_word(%struct.bignum_st* %22, i64 1), !dbg !468
RSINKGEP INSTRUCTION   %22 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !465
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %22 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !465
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
RSINKGEP INSTRUCTION   %22 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !465
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call45 = call i32 @BN_div(%struct.bignum_st* %24, %struct.bignum_st* null, %struct.bignum_st* %25, %struct.bignum_st* %tmod, %struct.bignum_ctx* %26), !dbg !482
RSINKGEP INSTRUCTION   %25 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !480
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %26 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !481
RSINKGEP INSTRUCTION   %24 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !478
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %tmod = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION %struct.bignum_st* null
REACHABLE SOURCE:   %25 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !480
REACHABLE SOURCE:   %26 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !481
REACHABLE SOURCE:   %24 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !478
REACHABLE SOURCE:   %tmod = alloca %struct.bignum_st, align 8
REACHABLE SOURCE: %struct.bignum_st* null
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
RSINKGEP INSTRUCTION   %25 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !480
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %26 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !481
RSINKGEP INSTRUCTION   %24 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !478
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %tmod = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION %struct.bignum_st* null
Using taint reachable signature for:   %call69 = call i32 @BN_div(%struct.bignum_st* null, %struct.bignum_st* %RR66, %struct.bignum_st* %RR67, %struct.bignum_st* %N68, %struct.bignum_ctx* %41), !dbg !507
RSINKGEP INSTRUCTION   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !507
[Sink:]   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !507
StructType:::IS STRUCT TY:: allocation intermediate:   %38 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !507
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 1
Created 1 constraint variable(s) for node of size 1
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Adding 1 elements
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !507
[Sink:]   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !507
StructType:::IS STRUCT TY:: allocation intermediate:   %39 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !507
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Adding 1 elements
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !507
[Sink:]   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !507
StructType:::IS STRUCT TY:: allocation intermediate:   %40 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !507
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 2
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 2
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Adding 1 elements
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %41 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !507
RSINKGEP INSTRUCTION %struct.bignum_st* null
REACHABLE SOURCE:   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !507
REACHABLE SOURCE:   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !507
REACHABLE SOURCE:   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !507
REACHABLE SOURCE:   %41 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !507
REACHABLE SOURCE: %struct.bignum_st* null
RSOURCEGEP INSTRUCTION   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !507
[Source:]   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !507
StructType: allocation intermediate:   %38 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !507
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x7fce5d02d8d0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x7fce5d02d8d0
RSOURCEGEP INSTRUCTION   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !507
[Source:]   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !507
StructType: allocation intermediate:   %39 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !507
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x7fce5d02d8d0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x7fce5d02d8d0
RSOURCEGEP INSTRUCTION   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !507
[Source:]   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !507
StructType: allocation intermediate:   %40 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !507
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 2
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x7fce5d02d8d0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x7fce5d02d8d0
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !507
[Sink:]   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !507
StructType:::IS STRUCT TY:: allocation intermediate:   %38 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !507
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Adding 1 elements
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !507
[Sink:]   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !507
StructType:::IS STRUCT TY:: allocation intermediate:   %39 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !507
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Adding 1 elements
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !507
[Sink:]   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !507
StructType:::IS STRUCT TY:: allocation intermediate:   %40 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !507
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 2
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 2
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Adding 1 elements
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %41 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !507
RSINKGEP INSTRUCTION %struct.bignum_st* null
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %42), !dbg !514
RSINKGEP INSTRUCTION   %42 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !513
REACHABLE SOURCE:   %42 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !513
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %42 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !513
Creating ConsElem Map for :	Node0x7fce5aed3200 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aed3200:s0 -> Node0x7fce5aed4120;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Creating ConsElem Map for :	Node0x7fce5aed3340 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aed3340:s0 -> Node0x7fce5aed2ed0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aed2ed0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aed2ed0:s0 -> Node0x7fce5aed3c40;
Creating ConsElem Map for :	Node0x7fce5aed3480 [shape=record,shape=Mrecord,label="{0: %struct.bignum_ctx*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aed3480:s0 -> Node0x7fce5aed3030;
EDGE: [0: tymap-size 1]:%struct.bignum_ctx = type opaque
	Node0x7fce5aed3030 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x7fce5aed35c0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aed3100 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aed36c0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aed36c0:s0 -> Node0x7fce5aed3a40;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aed3a40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x7fce5aed3a40:s0 -> Node0x7fce5aed3e10;
Creating ConsElem Map for :	Node0x7fce5aed3800 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aed3800:s0 -> Node0x7fce5aed4120;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %N8, i32 0, i32 3, !dbg !402
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %N8, i32 0, i32 3, !dbg !402
StructType:::IS STRUCT TY:: allocation intermediate:   %N8 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %6, i32 0, i32 2, !dbg !401
=>  %6 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !400
 allocation intermediate:   %6 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !400
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 16
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %N8, i32 0, i32 3, !dbg !402
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %N8, i32 0, i32 3, !dbg !402
StructType:::IS STRUCT TY:: allocation intermediate:   %N8 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %6, i32 0, i32 2, !dbg !401
=>  %6 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !400
 allocation intermediate:   %6 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !400
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 16
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Adding 1 elements
DSINKGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 0, !dbg !411
[Sink:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 0, !dbg !411
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 0, !dbg !411
[Sink:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 0, !dbg !411
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 2, !dbg !413
[Sink:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 2, !dbg !413
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 12
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 2, !dbg !413
[Sink:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 2, !dbg !413
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 12
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg9 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 3, !dbg !415
[Sink:]   %neg9 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 3, !dbg !415
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg9 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 3, !dbg !415
[Sink:]   %neg9 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 3, !dbg !415
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %ri = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %9, i32 0, i32 0, !dbg !429
[Sink:]   %ri = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %9, i32 0, i32 0, !dbg !429
StructType:::IS STRUCT TY:: allocation intermediate:   %9 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !428
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 0
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Adding 1 elements
DSINKGEP INSTRUCTION   %ri = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %9, i32 0, i32 0, !dbg !429
[Sink:]   %ri = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %9, i32 0, i32 0, !dbg !429
StructType:::IS STRUCT TY:: allocation intermediate:   %9 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !428
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 0
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Adding 1 elements
DSOURCEGEP INSTRUCTION   %d20 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !438
[Source:]   %d20 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !438
StructType: allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %mod.addr, align 8, !dbg !437
=>  %mod.addr = alloca %struct.bignum_st*, align 8
FINAL:   %mod.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x7fce5d206510
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !437
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !437
 allocation intermediate:   %13 = load i64*, i64** %d20, align 8, !dbg !438
=>  %d20 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !438
 allocation intermediate:   %d20 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !438
=>  %12 = load %struct.bignum_st*, %struct.bignum_st** %mod.addr, align 8, !dbg !437
 allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %mod.addr, align 8, !dbg !437
=>  %mod.addr = alloca %struct.bignum_st*, align 8
FINAL:   %mod.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x7fce5d206510
DSINKGEP INSTRUCTION   %arrayidx21 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !439
[Sink:]   %arrayidx21 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !439
ArrayType:FINAL:   %buf = alloca [2 x i64], align 16
Tainting at offset: 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx21 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !439
[Sink:]   %arrayidx21 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !439
ArrayType:FINAL:   %buf = alloca [2 x i64], align 16
Tainting at offset: 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx22 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 1, !dbg !441
[Sink:]   %arrayidx22 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 1, !dbg !441
ArrayType:FINAL:   %buf = alloca [2 x i64], align 16
Tainting at offset: 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx22 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 1, !dbg !441
[Sink:]   %arrayidx22 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 1, !dbg !441
ArrayType:FINAL:   %buf = alloca [2 x i64], align 16
Tainting at offset: 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !443
[Source:]   %arrayidx23 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !443
ArrayType:FINAL:   %buf = alloca [2 x i64], align 16
Trying to find element at offset 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 1, !dbg !445
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 1, !dbg !445
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 1, !dbg !445
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 1, !dbg !445
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top49 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %27, i32 0, i32 1, !dbg !486
[Source:]   %top49 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %27, i32 0, i32 1, !dbg !486
StructType: allocation intermediate:   %27 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !485
=>  %Ri = alloca %struct.bignum_st*, align 8
FINAL:   %Ri = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7fce5d02e4c0
DSOURCEGEP INSTRUCTION   %d51 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %29, i32 0, i32 0, !dbg !490
[Source:]   %d51 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %29, i32 0, i32 0, !dbg !490
StructType: allocation intermediate:   %29 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !489
=>  %Ri = alloca %struct.bignum_st*, align 8
FINAL:   %Ri = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7fce5d02e360
DSOURCEGEP INSTRUCTION   %arrayidx52 = getelementptr inbounds i64, i64* %30, i64 0, !dbg !489
[Source:]   %arrayidx52 = getelementptr inbounds i64, i64* %30, i64 0, !dbg !489
 allocation intermediate:   %30 = load i64*, i64** %d51, align 8, !dbg !490
=>  %d51 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %29, i32 0, i32 0, !dbg !490
 allocation intermediate:   %d51 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %29, i32 0, i32 0, !dbg !490
=>  %29 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !489
 allocation intermediate:   %29 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !489
=>  %Ri = alloca %struct.bignum_st*, align 8
FINAL:   %Ri = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7fce5d02e360
DSINKGEP INSTRUCTION   %arrayidx54 = getelementptr inbounds [2 x i64], [2 x i64]* %n0, i32 0, i64 0, !dbg !491
[Sink:]   %arrayidx54 = getelementptr inbounds [2 x i64], [2 x i64]* %n0, i32 0, i64 0, !dbg !491
ArrayType: allocation intermediate:   %n0 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %32, i32 0, i32 4, !dbg !492
=>  %32 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !491
 allocation intermediate:   %32 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !491
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 0
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx54 = getelementptr inbounds [2 x i64], [2 x i64]* %n0, i32 0, i64 0, !dbg !491
[Sink:]   %arrayidx54 = getelementptr inbounds [2 x i64], [2 x i64]* %n0, i32 0, i64 0, !dbg !491
ArrayType: allocation intermediate:   %n0 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %32, i32 0, i32 4, !dbg !492
=>  %32 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !491
 allocation intermediate:   %32 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !491
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 0
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx56 = getelementptr inbounds [2 x i64], [2 x i64]* %n055, i32 0, i64 1, !dbg !494
[Sink:]   %arrayidx56 = getelementptr inbounds [2 x i64], [2 x i64]* %n055, i32 0, i64 1, !dbg !494
ArrayType: allocation intermediate:   %n055 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %33, i32 0, i32 4, !dbg !495
=>  %33 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !494
 allocation intermediate:   %33 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !494
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx56 = getelementptr inbounds [2 x i64], [2 x i64]* %n055, i32 0, i64 1, !dbg !494
[Sink:]   %arrayidx56 = getelementptr inbounds [2 x i64], [2 x i64]* %n055, i32 0, i64 1, !dbg !494
ArrayType: allocation intermediate:   %n055 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %33, i32 0, i32 4, !dbg !495
=>  %33 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !494
 allocation intermediate:   %33 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !494
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Adding 1 elements
DSOURCEGEP INSTRUCTION   %ri60 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %36, i32 0, i32 0, !dbg !502
[Source:]   %ri60 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %36, i32 0, i32 0, !dbg !502
StructType: allocation intermediate:   %36 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !501
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x7fce5d02d8d0
Running on BN_ucmp in context [BN_mod_exp_mont ]
Creating ConsElem Map for :	Node0x7fce5aee97a0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aee97a0:s0 -> Node0x7fce5aee93a0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aee93a0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aee93a0:s0 -> Node0x7fce5aee9fa0;
Creating ConsElem Map for :	Node0x7fce5aee98e0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aee98e0:s0 -> Node0x7fce5acbe4c0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5acbe4c0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbe4c0:s0 -> Node0x7fce5ad8c700;
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !379
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !379
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7fce5d033780
DSOURCEGEP INSTRUCTION   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 1, !dbg !381
[Source:]   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 1, !dbg !381
StructType: allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !380
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d033f90
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d12cdd0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d12d110
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d12d200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d12d470
Creating ConsElem Map for :	Node0x7fce5aee9a20 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aee96a0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !391
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !391
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !390
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7fce5d0336e0
Creating ConsElem Map for :	Node0x7fce5aee9d20 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aee9d20:s0 -> Node0x7fce5aee9fa0;
EDGE: [0: tymap-size 1]:i64
	Node0x7fce5aee9fa0 [shape=record,shape=Mrecord,label="{0: i64,   array: MRE2\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
DSOURCEGEP INSTRUCTION   %d2 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !394
[Source:]   %d2 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !394
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !393
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d033f90
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d12cdd0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d12d110
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d12d200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d12d470
Creating ConsElem Map for :	Node0x7fce5aee9e60 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aee9e60:s0 -> Node0x7fce5ad8c700;
EDGE: [0: tymap-size 1]:i64
	Node0x7fce5ad8c700 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
DSOURCEGEP INSTRUCTION   %top3 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !398
[Source:]   %top3 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !398
StructType: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !396
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7fce5d033780
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !408
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !408
Creating ConsElem Map for :	Node0x7fce5aee9b20 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx7 = getelementptr inbounds i64, i64* %17, i64 %idxprom6, !dbg !411
[Source:]   %arrayidx7 = getelementptr inbounds i64, i64* %17, i64 %idxprom6, !dbg !411
Creating ConsElem Map for :	Node0x7fce5aee9c20 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Running on BN_is_zero in context [BN_mod_exp_mont ]
Creating ConsElem Map for :	Node0x7fce5aebc600 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aebc600:s0 -> Node0x7fce5aebc4e0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aebc4e0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aebc4e0:s0 -> Node0x7fce5acbe390;
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !367
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !367
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !366
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7fce5ace9090
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
Running on BN_to_montgomery in context [BN_mod_exp_mont ]
Creating ConsElem Map for :	Node0x7fce5aed8270 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aed8270:s0 -> Node0x7fce5aeb8bc0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aeb8bc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb8bc0:s0 -> Node0x7fce5aeb8160;
Creating ConsElem Map for :	Node0x7fce5aed83b0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aed83b0:s0 -> Node0x7fce5aeb8bc0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aeb8bc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb8bc0:s0 -> Node0x7fce5aeb8160;
Creating ConsElem Map for :	Node0x7fce5aed84f0 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aed84f0:s0 -> Node0x7fce5aeb8bc0;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x7fce5aeb8bc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb8bc0:s0 -> Node0x7fce5aeb8160;
Creating ConsElem Map for :	Node0x7fce5aed8630 [shape=record,shape=Mrecord,label="{0: %struct.bignum_ctx*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aed8630:s0 -> Node0x7fce5aed81a0;
EDGE: [0: tymap-size 1]:%struct.bignum_ctx = type opaque
	Node0x7fce5aed81a0 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Running on BN_mod_mul_montgomery in context [BN_mod_exp_mont ]
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %0), !dbg !379
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !378
REACHABLE SOURCE:   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !378
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !378
Using taint reachable signature for:   %call = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %1), !dbg !381
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !380
REACHABLE SOURCE:   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !380
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !380
Using taint reachable signature for:   %call4 = call i32 @BN_sqr(%struct.bignum_st* %5, %struct.bignum_st* %6, %struct.bignum_ctx* %7), !dbg !398
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !397
RSINKGEP INSTRUCTION   %5 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !393
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !396
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !397
REACHABLE SOURCE:   %5 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !393
REACHABLE SOURCE:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !396
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !397
RSINKGEP INSTRUCTION   %5 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !393
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !396
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call7 = call i32 @BN_mul(%struct.bignum_st* %8, %struct.bignum_st* %9, %struct.bignum_st* %10, %struct.bignum_ctx* %11), !dbg !408
RSINKGEP INSTRUCTION   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !406
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !407
RSINKGEP INSTRUCTION   %8 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !402
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !405
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !406
REACHABLE SOURCE:   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !407
REACHABLE SOURCE:   %8 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !402
REACHABLE SOURCE:   %9 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !405
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
RSINKGEP INSTRUCTION   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !406
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !407
RSINKGEP INSTRUCTION   %8 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !402
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !405
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %15), !dbg !421
RSINKGEP INSTRUCTION   %15 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !420
REACHABLE SOURCE:   %15 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !420
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %15 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !420
Creating ConsElem Map for :	Node0x7fce5aec81b0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aec81b0:s0 -> Node0x7fce5aec8090;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aec8090 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aec8090:s0 -> Node0x7fce5aeefc40;
Creating ConsElem Map for :	Node0x7fce5aec8240 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aec8240:s0 -> Node0x7fce5aec8090;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aec8090 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aec8090:s0 -> Node0x7fce5aeefc40;
Creating ConsElem Map for :	Node0x7fce5aec82d0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aec82d0:s0 -> Node0x7fce5aec8090;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aec8090 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aec8090:s0 -> Node0x7fce5aeefc40;
Creating ConsElem Map for :	Node0x7fce5aec8360 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aec8360:s0 -> Node0x7fce5aec8090;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x7fce5aec8090 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aec8090:s0 -> Node0x7fce5aeefc40;
Creating ConsElem Map for :	Node0x7fce5aec83f0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_ctx*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aec83f0:s0 -> Node0x7fce5aec8120;
EDGE: [0: tymap-size 1]:%struct.bignum_ctx = type opaque
	Node0x7fce5aec8120 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x7fce5aec8510 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aec8480 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aec8480:s0 -> Node0x7fce5aec85a0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aec85a0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x7fce5aec85a0:s0 -> Node0x7fce5aeefc40;
Running on bn_wexpand in context [BN_mod_exp_mont ]
Creating ConsElem Map for :	Node0x7fce5aebf170 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aebf170:s0 -> Node0x7fce5acbc1a0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5acbc1a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbc1a0:s0 -> Node0x7fce5acbc110;
Creating ConsElem Map for :	Node0x7fce5aebf200 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !370
[Source:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !370
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !369
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d20cb00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d20cb50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d20cba0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d20cce0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d20cd30
Running on bn_correct_top in context [BN_mod_exp_mont ]
Creating ConsElem Map for :	Node0x7fce5aecd800 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aecd800:s0 -> Node0x7fce5acbded0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5acbded0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbded0:s0 -> Node0x7fce5acbc780;
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !371
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !371
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !370
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d038560
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d0389c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d038a10
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d038bb0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d038c00
Creating ConsElem Map for :	Node0x7fce5aecd920 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !380
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !380
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !379
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d038560
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d0389c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d038a10
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d038bb0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d038c00
Creating ConsElem Map for :	Node0x7fce5aecd890 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aecd890:s0 -> Node0x7fce5acbc780;
EDGE: [0: tymap-size 1]:i64
	Node0x7fce5acbc780 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
DSINKGEP INSTRUCTION   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !400
[Sink:]   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !400
StructType:::IS STRUCT TY:: allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !399
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5acbded0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbded0:s0 -> Node0x7fce5acbc780;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !400
[Sink:]   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !400
StructType:::IS STRUCT TY:: allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !399
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5acbded0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbded0:s0 -> Node0x7fce5acbc780;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %13, i32 0, i32 1, !dbg !405
[Source:]   %top6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %13, i32 0, i32 1, !dbg !405
StructType: allocation intermediate:   %13 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !403
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d038560
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d0389c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d038a10
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d038bb0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d038c00
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !409
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !409
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !408
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fce5acbded0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbded0:s0 -> Node0x7fce5acbc780;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !409
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !409
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !408
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fce5acbded0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbded0:s0 -> Node0x7fce5acbc780;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Running on BN_value_one in context [BN_mod_exp_mont ]
Running on BN_is_bit_set in context [BN_mod_exp_mont ]
Creating ConsElem Map for :	Node0x7fce5aebff30 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aebff30:s0 -> Node0x7fce5aebfcd0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aebfcd0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aebfcd0:s0 -> Node0x7fce5aec0370;
Creating ConsElem Map for :	Node0x7fce5aec0070 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aebfe30 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aec0170 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aec0270 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 1, !dbg !385
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 1, !dbg !385
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !383
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  20: i32,  : CRE[8,12]0x7fce5d03a350
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 0, !dbg !392
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 0, !dbg !392
StructType: allocation intermediate:   %7 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !391
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  20: i32,  : CRE[0,8]0x7fce5d03a2d0
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %8, i64 %idxprom, !dbg !391
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %8, i64 %idxprom, !dbg !391
Running on BN_from_montgomery in context [BN_mod_exp_mont ]
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %0), !dbg !377
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !376
REACHABLE SOURCE:   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !376
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !376
Using taint reachable signature for:   %call = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %1), !dbg !380
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !378
REACHABLE SOURCE:   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !378
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !378
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %7), !dbg !394
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !393
REACHABLE SOURCE:   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !393
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !393
Creating ConsElem Map for :	Node0x7fce5aece390 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aece390:s0 -> Node0x7fce5aecde40;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aecde40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aecde40:s0 -> Node0x7fce5aececd0;
Creating ConsElem Map for :	Node0x7fce5aece4d0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aece4d0:s0 -> Node0x7fce5aecdfe0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aecdfe0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aecdfe0:s0 -> Node0x7fce5aed2030;
Creating ConsElem Map for :	Node0x7fce5aece610 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aece610:s0 -> Node0x7fce5aece1b0;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x7fce5aece1b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aece1b0:s0 -> Node0x7fce5adc6310;
Creating ConsElem Map for :	Node0x7fce5aece750 [shape=record,shape=Mrecord,label="{0: %struct.bignum_ctx*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aece750:s0 -> Node0x7fce5aece2c0;
EDGE: [0: tymap-size 1]:%struct.bignum_ctx = type opaque
	Node0x7fce5aece2c0 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x7fce5aece890 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aece990 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aece990:s0 -> Node0x7fce5aecead0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aecead0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x7fce5aecead0:s0 -> Node0x7fce5aececd0;
Running on BN_MONT_CTX_free in context [BN_mod_exp_mont ]
Using taint reachable signature for:   call void @CRYPTO_free(i8* %7, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0), i32 244), !dbg !385
RSINKGEP INSTRUCTION   %7 = bitcast %struct.bn_mont_ctx_st* %6 to i8*, !dbg !385
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
REACHABLE SOURCE:   %7 = bitcast %struct.bn_mont_ctx_st* %6 to i8*, !dbg !385
REACHABLE SOURCE: i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5aed1580 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str38 = private unnamed_addr constant [10 x i8] c\"bn_mont.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %7 = bitcast %struct.bn_mont_ctx_st* %6 to i8*, !dbg !385
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
Creating ConsElem Map for :	Node0x7fce5aed1440 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aed1440:s0 -> Node0x7fce5aed6290;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x7fce5aed6290 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed6290:s0 -> Node0x7fce5add2c10;
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %4, i32 0, i32 5, !dbg !382
[Source:]   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %4, i32 0, i32 5, !dbg !382
StructType: allocation intermediate:   %4 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !380
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 96
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 96
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,4]0x7fce5acf26f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[80,96]0x7fce5acf2870
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,32]0x7fce5acf28b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[32,56]0x7fce5acf2900
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[56,80]0x7fce5acf2920
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[96,100]0x7fce5acf34b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
Running on BN_is_odd in context [BN_mod_exp_mont_consttime ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !367
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !367
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !366
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[8,12]0x7fce5d02b970
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !371
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !371
StructType: allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !370
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x7fce5d02b950
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %3, i64 0, !dbg !370
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %3, i64 0, !dbg !370
 allocation intermediate:   %3 = load i64*, i64** %d, align 8, !dbg !371
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !371
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !371
=>  %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !370
 allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !370
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x7fce5d02b950
Running on BN_num_bits in context [BN_mod_exp_mont_consttime ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !369
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !369
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !368
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7fce5d128a30
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !380
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !380
StructType: allocation intermediate:   %5 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !379
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7fce5d128950
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !379
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !379
Running on BN_is_one in context [BN_mod_exp_mont_consttime ]
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !370
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !370
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !369
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 16
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[16,20]0x7fce5acdf400
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
Running on BN_set_word in context [BN_mod_exp_mont_consttime ]
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !375
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !375
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !374
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fce5acbdc70 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdc70:s0 -> Node0x7fce5ade42c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !375
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !375
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !374
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fce5acbdc70 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdc70:s0 -> Node0x7fce5ade42c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5ace05f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5ace0a10
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5ace0a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5ace0ab0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5ace0ad0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !378
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !378
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !379
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x7fce5acbdc70 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdc70:s0 -> Node0x7fce5ade42c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !378
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !378
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !379
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x7fce5acbdc70 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdc70:s0 -> Node0x7fce5ade42c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !383
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !383
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !382
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5acbdc70 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdc70:s0 -> Node0x7fce5ade42c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !383
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !383
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !382
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5acbdc70 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdc70:s0 -> Node0x7fce5ade42c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Running on BN_MONT_CTX_new in context [BN_mod_exp_mont_consttime ]
Using taint reachable signature for:   %call = call i8* @CRYPTO_malloc(i64 104, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0), i32 217), !dbg !366
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
	Node0x7fce5aed1580 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str38 = private unnamed_addr constant [10 x i8] c\"bn_mont.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 5, !dbg !375
[Sink:]   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 5, !dbg !375
StructType:::IS STRUCT TY:: allocation intermediate:   %2 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ret, align 8, !dbg !374
=>  %ret = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %ret = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 96
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 96
	Node0x7fce5aecfac0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aecfac0:s0 -> Node0x7fce5addf2e0;
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 5, !dbg !375
[Sink:]   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 5, !dbg !375
StructType:::IS STRUCT TY:: allocation intermediate:   %2 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ret, align 8, !dbg !374
=>  %ret = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %ret = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 96
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 96
	Node0x7fce5aecfac0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aecfac0:s0 -> Node0x7fce5addf2e0;
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Running on BN_MONT_CTX_set in context [BN_mod_exp_mont_consttime ]
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %1), !dbg !382
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !381
REACHABLE SOURCE:   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !381
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !381
Using taint reachable signature for:   %call1 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %2), !dbg !385
RSINKGEP INSTRUCTION   %2 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !383
REACHABLE SOURCE:   %2 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !383
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %2 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !383
Using taint reachable signature for:   %call25 = call %struct.bignum_st* @BN_mod_inverse(%struct.bignum_st* %16, %struct.bignum_st* %17, %struct.bignum_st* %tmod, %struct.bignum_ctx* %18), !dbg !451
RSINKGEP INSTRUCTION   %tmod = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %17 = load %struct.bignum_st*, %struct.bignum_st** %R, align 8, !dbg !449
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %16 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !447
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !450
REACHABLE SOURCE:   %tmod = alloca %struct.bignum_st, align 8
REACHABLE SOURCE:   %17 = load %struct.bignum_st*, %struct.bignum_st** %R, align 8, !dbg !449
REACHABLE SOURCE:   %16 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !447
REACHABLE SOURCE:   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !450
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %tmod = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %17 = load %struct.bignum_st*, %struct.bignum_st** %R, align 8, !dbg !449
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %16 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !447
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !450
Using taint reachable signature for:   %call29 = call i32 @BN_lshift(%struct.bignum_st* %19, %struct.bignum_st* %20, i32 64), !dbg !458
RSINKGEP INSTRUCTION   %20 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !457
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %19 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !455
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %20 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !457
REACHABLE SOURCE:   %19 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !455
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
RSINKGEP INSTRUCTION   %20 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !457
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %19 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !455
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call36 = call i32 @BN_sub_word(%struct.bignum_st* %22, i64 1), !dbg !468
RSINKGEP INSTRUCTION   %22 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !465
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %22 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !465
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
RSINKGEP INSTRUCTION   %22 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !465
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call45 = call i32 @BN_div(%struct.bignum_st* %24, %struct.bignum_st* null, %struct.bignum_st* %25, %struct.bignum_st* %tmod, %struct.bignum_ctx* %26), !dbg !482
RSINKGEP INSTRUCTION   %25 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !480
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %26 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !481
RSINKGEP INSTRUCTION   %24 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !478
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %tmod = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION %struct.bignum_st* null
REACHABLE SOURCE:   %25 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !480
REACHABLE SOURCE:   %26 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !481
REACHABLE SOURCE:   %24 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !478
REACHABLE SOURCE:   %tmod = alloca %struct.bignum_st, align 8
REACHABLE SOURCE: %struct.bignum_st* null
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
RSINKGEP INSTRUCTION   %25 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !480
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %26 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !481
RSINKGEP INSTRUCTION   %24 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !478
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %tmod = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION %struct.bignum_st* null
Using taint reachable signature for:   %call69 = call i32 @BN_div(%struct.bignum_st* null, %struct.bignum_st* %RR66, %struct.bignum_st* %RR67, %struct.bignum_st* %N68, %struct.bignum_ctx* %41), !dbg !507
RSINKGEP INSTRUCTION   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !507
[Sink:]   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !507
StructType:::IS STRUCT TY:: allocation intermediate:   %38 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !507
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Adding 1 elements
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !507
[Sink:]   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !507
StructType:::IS STRUCT TY:: allocation intermediate:   %39 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !507
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Adding 1 elements
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !507
[Sink:]   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !507
StructType:::IS STRUCT TY:: allocation intermediate:   %40 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !507
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 2
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 2
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Adding 1 elements
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %41 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !507
RSINKGEP INSTRUCTION %struct.bignum_st* null
REACHABLE SOURCE:   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !507
REACHABLE SOURCE:   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !507
REACHABLE SOURCE:   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !507
REACHABLE SOURCE:   %41 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !507
REACHABLE SOURCE: %struct.bignum_st* null
RSOURCEGEP INSTRUCTION   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !507
[Source:]   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !507
StructType: allocation intermediate:   %38 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !507
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x7fce5d02d8d0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x7fce5d02d8d0
RSOURCEGEP INSTRUCTION   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !507
[Source:]   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !507
StructType: allocation intermediate:   %39 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !507
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x7fce5d02d8d0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x7fce5d02d8d0
RSOURCEGEP INSTRUCTION   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !507
[Source:]   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !507
StructType: allocation intermediate:   %40 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !507
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 2
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x7fce5d02d8d0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x7fce5d02d8d0
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !507
[Sink:]   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !507
StructType:::IS STRUCT TY:: allocation intermediate:   %38 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !507
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Adding 1 elements
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !507
[Sink:]   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !507
StructType:::IS STRUCT TY:: allocation intermediate:   %39 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !507
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Adding 1 elements
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !507
[Sink:]   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !507
StructType:::IS STRUCT TY:: allocation intermediate:   %40 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !507
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 2
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 2
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Adding 1 elements
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %41 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !507
RSINKGEP INSTRUCTION %struct.bignum_st* null
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %42), !dbg !514
RSINKGEP INSTRUCTION   %42 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !513
REACHABLE SOURCE:   %42 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !513
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %42 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !513
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %N8, i32 0, i32 3, !dbg !402
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %N8, i32 0, i32 3, !dbg !402
StructType:::IS STRUCT TY:: allocation intermediate:   %N8 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %6, i32 0, i32 2, !dbg !401
=>  %6 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !400
 allocation intermediate:   %6 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !400
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 16
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %N8, i32 0, i32 3, !dbg !402
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %N8, i32 0, i32 3, !dbg !402
StructType:::IS STRUCT TY:: allocation intermediate:   %N8 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %6, i32 0, i32 2, !dbg !401
=>  %6 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !400
 allocation intermediate:   %6 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !400
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 16
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Adding 1 elements
DSINKGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 0, !dbg !411
[Sink:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 0, !dbg !411
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 0, !dbg !411
[Sink:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 0, !dbg !411
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 2, !dbg !413
[Sink:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 2, !dbg !413
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 12
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 2, !dbg !413
[Sink:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 2, !dbg !413
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 12
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg9 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 3, !dbg !415
[Sink:]   %neg9 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 3, !dbg !415
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg9 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 3, !dbg !415
[Sink:]   %neg9 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 3, !dbg !415
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %ri = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %9, i32 0, i32 0, !dbg !429
[Sink:]   %ri = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %9, i32 0, i32 0, !dbg !429
StructType:::IS STRUCT TY:: allocation intermediate:   %9 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !428
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 0
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Adding 1 elements
DSINKGEP INSTRUCTION   %ri = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %9, i32 0, i32 0, !dbg !429
[Sink:]   %ri = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %9, i32 0, i32 0, !dbg !429
StructType:::IS STRUCT TY:: allocation intermediate:   %9 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !428
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 0
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Adding 1 elements
DSOURCEGEP INSTRUCTION   %d20 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !438
[Source:]   %d20 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !438
StructType: allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %mod.addr, align 8, !dbg !437
=>  %mod.addr = alloca %struct.bignum_st*, align 8
FINAL:   %mod.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x7fce5d206510
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !437
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !437
 allocation intermediate:   %13 = load i64*, i64** %d20, align 8, !dbg !438
=>  %d20 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !438
 allocation intermediate:   %d20 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !438
=>  %12 = load %struct.bignum_st*, %struct.bignum_st** %mod.addr, align 8, !dbg !437
 allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %mod.addr, align 8, !dbg !437
=>  %mod.addr = alloca %struct.bignum_st*, align 8
FINAL:   %mod.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x7fce5d206510
DSINKGEP INSTRUCTION   %arrayidx21 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !439
[Sink:]   %arrayidx21 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !439
ArrayType:FINAL:   %buf = alloca [2 x i64], align 16
Tainting at offset: 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx21 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !439
[Sink:]   %arrayidx21 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !439
ArrayType:FINAL:   %buf = alloca [2 x i64], align 16
Tainting at offset: 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx22 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 1, !dbg !441
[Sink:]   %arrayidx22 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 1, !dbg !441
ArrayType:FINAL:   %buf = alloca [2 x i64], align 16
Tainting at offset: 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx22 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 1, !dbg !441
[Sink:]   %arrayidx22 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 1, !dbg !441
ArrayType:FINAL:   %buf = alloca [2 x i64], align 16
Tainting at offset: 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !443
[Source:]   %arrayidx23 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !443
ArrayType:FINAL:   %buf = alloca [2 x i64], align 16
Trying to find element at offset 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 1, !dbg !445
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 1, !dbg !445
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 1, !dbg !445
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 1, !dbg !445
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top49 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %27, i32 0, i32 1, !dbg !486
[Source:]   %top49 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %27, i32 0, i32 1, !dbg !486
StructType: allocation intermediate:   %27 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !485
=>  %Ri = alloca %struct.bignum_st*, align 8
FINAL:   %Ri = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7fce5d02e4c0
DSOURCEGEP INSTRUCTION   %d51 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %29, i32 0, i32 0, !dbg !490
[Source:]   %d51 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %29, i32 0, i32 0, !dbg !490
StructType: allocation intermediate:   %29 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !489
=>  %Ri = alloca %struct.bignum_st*, align 8
FINAL:   %Ri = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7fce5d02e360
DSOURCEGEP INSTRUCTION   %arrayidx52 = getelementptr inbounds i64, i64* %30, i64 0, !dbg !489
[Source:]   %arrayidx52 = getelementptr inbounds i64, i64* %30, i64 0, !dbg !489
 allocation intermediate:   %30 = load i64*, i64** %d51, align 8, !dbg !490
=>  %d51 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %29, i32 0, i32 0, !dbg !490
 allocation intermediate:   %d51 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %29, i32 0, i32 0, !dbg !490
=>  %29 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !489
 allocation intermediate:   %29 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !489
=>  %Ri = alloca %struct.bignum_st*, align 8
FINAL:   %Ri = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7fce5d02e360
DSINKGEP INSTRUCTION   %arrayidx54 = getelementptr inbounds [2 x i64], [2 x i64]* %n0, i32 0, i64 0, !dbg !491
[Sink:]   %arrayidx54 = getelementptr inbounds [2 x i64], [2 x i64]* %n0, i32 0, i64 0, !dbg !491
ArrayType: allocation intermediate:   %n0 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %32, i32 0, i32 4, !dbg !492
=>  %32 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !491
 allocation intermediate:   %32 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !491
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 0
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx54 = getelementptr inbounds [2 x i64], [2 x i64]* %n0, i32 0, i64 0, !dbg !491
[Sink:]   %arrayidx54 = getelementptr inbounds [2 x i64], [2 x i64]* %n0, i32 0, i64 0, !dbg !491
ArrayType: allocation intermediate:   %n0 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %32, i32 0, i32 4, !dbg !492
=>  %32 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !491
 allocation intermediate:   %32 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !491
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 0
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx56 = getelementptr inbounds [2 x i64], [2 x i64]* %n055, i32 0, i64 1, !dbg !494
[Sink:]   %arrayidx56 = getelementptr inbounds [2 x i64], [2 x i64]* %n055, i32 0, i64 1, !dbg !494
ArrayType: allocation intermediate:   %n055 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %33, i32 0, i32 4, !dbg !495
=>  %33 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !494
 allocation intermediate:   %33 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !494
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx56 = getelementptr inbounds [2 x i64], [2 x i64]* %n055, i32 0, i64 1, !dbg !494
[Sink:]   %arrayidx56 = getelementptr inbounds [2 x i64], [2 x i64]* %n055, i32 0, i64 1, !dbg !494
ArrayType: allocation intermediate:   %n055 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %33, i32 0, i32 4, !dbg !495
=>  %33 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !494
 allocation intermediate:   %33 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !494
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5aed4120 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed4120:s0 -> Node0x7fce5add2ca0;
Adding 1 elements
DSOURCEGEP INSTRUCTION   %ri60 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %36, i32 0, i32 0, !dbg !502
[Source:]   %ri60 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %36, i32 0, i32 0, !dbg !502
StructType: allocation intermediate:   %36 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !501
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x7fce5d02d8d0
Running on BN_value_one in context [BN_mod_exp_mont_consttime ]
Running on BN_to_montgomery in context [BN_mod_exp_mont_consttime ]
Running on BN_ucmp in context [BN_mod_exp_mont_consttime ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !379
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !379
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7fce5d033780
DSOURCEGEP INSTRUCTION   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 1, !dbg !381
[Source:]   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 1, !dbg !381
StructType: allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !380
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d033f90
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d12cdd0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d12d110
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d12d200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d12d470
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !391
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !391
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !390
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7fce5d0336e0
DSOURCEGEP INSTRUCTION   %d2 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !394
[Source:]   %d2 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !394
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !393
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d033f90
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d12cdd0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d12d110
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d12d200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d12d470
DSOURCEGEP INSTRUCTION   %top3 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !398
[Source:]   %top3 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !398
StructType: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !396
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7fce5d033780
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !408
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !408
DSOURCEGEP INSTRUCTION   %arrayidx7 = getelementptr inbounds i64, i64* %17, i64 %idxprom6, !dbg !411
[Source:]   %arrayidx7 = getelementptr inbounds i64, i64* %17, i64 %idxprom6, !dbg !411
Running on MOD_EXP_CTIME_COPY_TO_PREBUF in context [BN_mod_exp_mont_consttime ]
Creating ConsElem Map for :	Node0x7fce5aee5410 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aee5410:s0 -> Node0x7fce5aee5260;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aee5260 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aee5260:s0 -> Node0x7fce5aef0340;
Creating ConsElem Map for :	Node0x7fce5aee54a0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aee5530 [shape=record,shape=Mrecord,label="{0: i8*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aee5530:s0 -> Node0x7fce5aef0340;
EDGE: [0: tymap-size 1]:i8
	Node0x7fce5aef0340 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x7fce5aee55c0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aee5650 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aee5800 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aee5890 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aee5890:s0 -> Node0x7fce5aef0340;
EDGE: [0: tymap-size 1]:i64
	Node0x7fce5aef0340 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
DSOURCEGEP INSTRUCTION   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !389
[Source:]   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !389
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !388
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[8,12]0x7fce5d041200
DSOURCEGEP INSTRUCTION   %top2 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !393
[Source:]   %top2 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !393
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !392
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[8,12]0x7fce5d041200
Creating ConsElem Map for :	Node0x7fce5aee56e0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aee5770 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !409
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !409
StructType: allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !408
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[0,8]0x7fce5d041160
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %13, i64 %idxprom, !dbg !408
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %13, i64 %idxprom, !dbg !408
DSINKGEP INSTRUCTION   %arrayidx5 = getelementptr inbounds i64, i64* %16, i64 %idxprom4, !dbg !411
[Sink:]   %arrayidx5 = getelementptr inbounds i64, i64* %16, i64 %idxprom4, !dbg !411
DSINKGEP INSTRUCTION   %arrayidx5 = getelementptr inbounds i64, i64* %16, i64 %idxprom4, !dbg !411
[Sink:]   %arrayidx5 = getelementptr inbounds i64, i64* %16, i64 %idxprom4, !dbg !411
Running on BN_mod_mul_montgomery in context [BN_mod_exp_mont_consttime ]
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %0), !dbg !379
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !378
REACHABLE SOURCE:   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !378
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !378
Using taint reachable signature for:   %call = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %1), !dbg !381
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !380
REACHABLE SOURCE:   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !380
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !380
Using taint reachable signature for:   %call4 = call i32 @BN_sqr(%struct.bignum_st* %5, %struct.bignum_st* %6, %struct.bignum_ctx* %7), !dbg !398
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !397
RSINKGEP INSTRUCTION   %5 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !393
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !396
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !397
REACHABLE SOURCE:   %5 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !393
REACHABLE SOURCE:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !396
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !397
RSINKGEP INSTRUCTION   %5 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !393
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !396
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call7 = call i32 @BN_mul(%struct.bignum_st* %8, %struct.bignum_st* %9, %struct.bignum_st* %10, %struct.bignum_ctx* %11), !dbg !408
RSINKGEP INSTRUCTION   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !406
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !407
RSINKGEP INSTRUCTION   %8 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !402
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !405
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !406
REACHABLE SOURCE:   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !407
REACHABLE SOURCE:   %8 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !402
REACHABLE SOURCE:   %9 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !405
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
RSINKGEP INSTRUCTION   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !406
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !407
RSINKGEP INSTRUCTION   %8 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !402
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !405
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %15), !dbg !421
RSINKGEP INSTRUCTION   %15 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !420
REACHABLE SOURCE:   %15 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !420
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %15 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !420
Running on BN_is_bit_set in context [BN_mod_exp_mont_consttime ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 1, !dbg !385
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 1, !dbg !385
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !383
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  20: i32,  : CRE[8,12]0x7fce5d03a350
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 0, !dbg !392
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 0, !dbg !392
StructType: allocation intermediate:   %7 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !391
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  20: i32,  : CRE[0,8]0x7fce5d03a2d0
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %8, i64 %idxprom, !dbg !391
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %8, i64 %idxprom, !dbg !391
Running on MOD_EXP_CTIME_COPY_FROM_PREBUF in context [BN_mod_exp_mont_consttime ]
Creating ConsElem Map for :	Node0x7fce5aee6130 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aee6130:s0 -> Node0x7fce5aee5ef0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aee5ef0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aee5ef0:s0 -> Node0x7fce5acbe5d0;
Creating ConsElem Map for :	Node0x7fce5aee6240 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aee6340 [shape=record,shape=Mrecord,label="{0: i8*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aee6340:s0 -> Node0x7fce5acbe5d0;
EDGE: [0: tymap-size 1]:i8
	Node0x7fce5acbe5d0 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x7fce5aee6480 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aee6580 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aee6880 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aee6980 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aee6980:s0 -> Node0x7fce5acbe5d0;
EDGE: [0: tymap-size 1]:i64
	Node0x7fce5acbe5d0 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x7fce5aee60a0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aee6680 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aee6ac0 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aee6780 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %11, i64 %idxprom, !dbg !419
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %11, i64 %idxprom, !dbg !419
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %19, i32 0, i32 0, !dbg !434
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %19, i32 0, i32 0, !dbg !434
StructType: allocation intermediate:   %19 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !433
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[0,8]0x7fce5d303a10
DSINKGEP INSTRUCTION   %arrayidx10 = getelementptr inbounds i64, i64* %20, i64 %idxprom9, !dbg !433
[Sink:]   %arrayidx10 = getelementptr inbounds i64, i64* %20, i64 %idxprom9, !dbg !433
DSINKGEP INSTRUCTION   %arrayidx10 = getelementptr inbounds i64, i64* %20, i64 %idxprom9, !dbg !433
[Sink:]   %arrayidx10 = getelementptr inbounds i64, i64* %20, i64 %idxprom9, !dbg !433
Creating ConsElem Map for :	Node0x7fce5aee6bc0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aee6cc0 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aee6dc0 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aee6ec0 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aee6fc0 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aee70c0 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx45 = getelementptr inbounds i64, i64* %39, i64 %idxprom44, !dbg !512
[Source:]   %arrayidx45 = getelementptr inbounds i64, i64* %39, i64 %idxprom44, !dbg !512
DSOURCEGEP INSTRUCTION   %arrayidx50 = getelementptr inbounds i64, i64* %44, i64 %idxprom49, !dbg !519
[Source:]   %arrayidx50 = getelementptr inbounds i64, i64* %44, i64 %idxprom49, !dbg !519
DSOURCEGEP INSTRUCTION   %arrayidx56 = getelementptr inbounds i64, i64* %49, i64 %idxprom55, !dbg !527
[Source:]   %arrayidx56 = getelementptr inbounds i64, i64* %49, i64 %idxprom55, !dbg !527
DSOURCEGEP INSTRUCTION   %arrayidx62 = getelementptr inbounds i64, i64* %54, i64 %idxprom61, !dbg !535
[Source:]   %arrayidx62 = getelementptr inbounds i64, i64* %54, i64 %idxprom61, !dbg !535
DSOURCEGEP INSTRUCTION   %d75 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %63, i32 0, i32 0, !dbg !553
[Source:]   %d75 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %63, i32 0, i32 0, !dbg !553
StructType: allocation intermediate:   %63 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !552
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[0,8]0x7fce5d303a10
DSINKGEP INSTRUCTION   %arrayidx76 = getelementptr inbounds i64, i64* %64, i64 %idxprom74, !dbg !552
[Sink:]   %arrayidx76 = getelementptr inbounds i64, i64* %64, i64 %idxprom74, !dbg !552
DSINKGEP INSTRUCTION   %arrayidx76 = getelementptr inbounds i64, i64* %64, i64 %idxprom74, !dbg !552
[Sink:]   %arrayidx76 = getelementptr inbounds i64, i64* %64, i64 %idxprom74, !dbg !552
DSINKGEP INSTRUCTION   %top83 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %69, i32 0, i32 1, !dbg !562
[Sink:]   %top83 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %69, i32 0, i32 1, !dbg !562
StructType:::IS STRUCT TY:: allocation intermediate:   %69 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !561
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 8
	Node0x7fce5aee5ef0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aee5ef0:s0 -> Node0x7fce5acbe5d0;
Trying to find element at offset 8
DSINKGEP INSTRUCTION   %top83 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %69, i32 0, i32 1, !dbg !562
[Sink:]   %top83 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %69, i32 0, i32 1, !dbg !562
StructType:::IS STRUCT TY:: allocation intermediate:   %69 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !561
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 8
	Node0x7fce5aee5ef0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aee5ef0:s0 -> Node0x7fce5acbe5d0;
Trying to find element at offset 8
Running on BN_from_montgomery in context [BN_mod_exp_mont_consttime ]
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %0), !dbg !377
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !376
REACHABLE SOURCE:   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !376
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !376
Using taint reachable signature for:   %call = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %1), !dbg !380
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !378
REACHABLE SOURCE:   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !378
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !378
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %7), !dbg !394
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !393
REACHABLE SOURCE:   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !393
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !393
Running on BN_MONT_CTX_free in context [BN_mod_exp_mont_consttime ]
Using taint reachable signature for:   call void @CRYPTO_free(i8* %7, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0), i32 244), !dbg !385
RSINKGEP INSTRUCTION   %7 = bitcast %struct.bn_mont_ctx_st* %6 to i8*, !dbg !385
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
REACHABLE SOURCE:   %7 = bitcast %struct.bn_mont_ctx_st* %6 to i8*, !dbg !385
REACHABLE SOURCE: i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5aed1580 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str38 = private unnamed_addr constant [10 x i8] c\"bn_mont.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %7 = bitcast %struct.bn_mont_ctx_st* %6 to i8*, !dbg !385
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %4, i32 0, i32 5, !dbg !382
[Source:]   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %4, i32 0, i32 5, !dbg !382
StructType: allocation intermediate:   %4 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !380
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 96
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 96
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,4]0x7fce5acf26f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[80,96]0x7fce5acf2870
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,32]0x7fce5acf28b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[32,56]0x7fce5acf2900
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[56,80]0x7fce5acf2920
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[96,100]0x7fce5acf34b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
Running on BN_is_zero in context [BN_num_bits ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !367
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !367
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !366
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7fce5ace9090
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
Running on BN_num_bits_word in context [BN_num_bits ]
Creating ConsElem Map for :	Node0x7fce5aebbf10 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom, !dbg !384
[Source:]   %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom, !dbg !384
Created 256 constraint variable(s) for node of size 1
Creating ConsElem Map for :	Node0x7fce5aebbdf0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx11 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom10, !dbg !390
[Source:]   %arrayidx11 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom10, !dbg !390
DSOURCEGEP INSTRUCTION   %arrayidx21 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom20, !dbg !402
[Source:]   %arrayidx21 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom20, !dbg !402
DSOURCEGEP INSTRUCTION   %arrayidx28 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom27, !dbg !408
[Source:]   %arrayidx28 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom27, !dbg !408
DSOURCEGEP INSTRUCTION   %arrayidx41 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom40, !dbg !424
[Source:]   %arrayidx41 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom40, !dbg !424
DSOURCEGEP INSTRUCTION   %arrayidx48 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom47, !dbg !430
[Source:]   %arrayidx48 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom47, !dbg !430
DSOURCEGEP INSTRUCTION   %arrayidx58 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom57, !dbg !441
[Source:]   %arrayidx58 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom57, !dbg !441
DSOURCEGEP INSTRUCTION   %arrayidx64 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom63, !dbg !446
[Source:]   %arrayidx64 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom63, !dbg !446
Running on BN_abs_is_word in context [BN_is_one ]
Creating ConsElem Map for :	Node0x7fce5aed7790 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aed7790:s0 -> Node0x7fce5aed7630;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aed7630 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aed7630:s0 -> Node0x7fce5aed79d0;
Creating ConsElem Map for :	Node0x7fce5aed78d0 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !369
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !369
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !368
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[8,12]0x7fce5d312820
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !373
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !373
StructType: allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !372
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x7fce5d312800
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %3, i64 0, !dbg !372
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %3, i64 0, !dbg !372
 allocation intermediate:   %3 = load i64*, i64** %d, align 8, !dbg !373
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !373
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !373
=>  %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !372
 allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !372
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x7fce5d312800
DSOURCEGEP INSTRUCTION   %top3 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 1, !dbg !381
[Source:]   %top3 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 1, !dbg !381
StructType: allocation intermediate:   %7 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !380
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[8,12]0x7fce5d312820
Running on bn_expand in context [BN_set_word ]
Creating ConsElem Map for :	Node0x7fce5aeb68c0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aeb68c0:s0 -> Node0x7fce5adb9af0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5adb9af0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5adb9af0:s0 -> Node0x7fce5add8000;
Creating ConsElem Map for :	Node0x7fce5aeb6a00 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aeb6780 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aeb6780:s0 -> Node0x7fce5adb9af0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5adb9af0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5adb9af0:s0 -> Node0x7fce5add8000;
DSOURCEGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 2, !dbg !379
[Source:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 2, !dbg !379
StructType: allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d26e1b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d26e1d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d26e250
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d26e390
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d26e3b0
Running on BN_MONT_CTX_init in context [BN_MONT_CTX_new ]
Creating ConsElem Map for :	Node0x7fce5aed00e0 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aed00e0:s0 -> Node0x7fce5aed0200;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x7fce5aed0200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed0200:s0 -> Node0x7fce5adba830;
DSINKGEP INSTRUCTION   %ri = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %0, i32 0, i32 0, !dbg !367
[Sink:]   %ri = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %0, i32 0, i32 0, !dbg !367
StructType:::IS STRUCT TY:: allocation intermediate:   %0 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ctx.addr, align 8, !dbg !366
=>  %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 0
	Node0x7fce5aed0200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed0200:s0 -> Node0x7fce5adba830;
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
DSINKGEP INSTRUCTION   %ri = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %0, i32 0, i32 0, !dbg !367
[Sink:]   %ri = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %0, i32 0, i32 0, !dbg !367
StructType:::IS STRUCT TY:: allocation intermediate:   %0 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ctx.addr, align 8, !dbg !366
=>  %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 0
	Node0x7fce5aed0200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed0200:s0 -> Node0x7fce5adba830;
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %n0, i32 0, i64 1, !dbg !378
[Sink:]   %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %n0, i32 0, i64 1, !dbg !378
ArrayType: allocation intermediate:   %n0 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %4, i32 0, i32 4, !dbg !379
=>  %4 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ctx.addr, align 8, !dbg !378
 allocation intermediate:   %4 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ctx.addr, align 8, !dbg !378
=>  %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5aed0200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed0200:s0 -> Node0x7fce5adba830;
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %n0, i32 0, i64 1, !dbg !378
[Sink:]   %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %n0, i32 0, i64 1, !dbg !378
ArrayType: allocation intermediate:   %n0 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %4, i32 0, i32 4, !dbg !379
=>  %4 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ctx.addr, align 8, !dbg !378
 allocation intermediate:   %4 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ctx.addr, align 8, !dbg !378
=>  %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5aed0200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed0200:s0 -> Node0x7fce5adba830;
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
DSINKGEP INSTRUCTION   %arrayidx2 = getelementptr inbounds [2 x i64], [2 x i64]* %n01, i32 0, i64 0, !dbg !381
[Sink:]   %arrayidx2 = getelementptr inbounds [2 x i64], [2 x i64]* %n01, i32 0, i64 0, !dbg !381
ArrayType: allocation intermediate:   %n01 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %5, i32 0, i32 4, !dbg !382
=>  %5 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ctx.addr, align 8, !dbg !381
 allocation intermediate:   %5 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ctx.addr, align 8, !dbg !381
=>  %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 0
	Node0x7fce5aed0200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed0200:s0 -> Node0x7fce5adba830;
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
DSINKGEP INSTRUCTION   %arrayidx2 = getelementptr inbounds [2 x i64], [2 x i64]* %n01, i32 0, i64 0, !dbg !381
[Sink:]   %arrayidx2 = getelementptr inbounds [2 x i64], [2 x i64]* %n01, i32 0, i64 0, !dbg !381
ArrayType: allocation intermediate:   %n01 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %5, i32 0, i32 4, !dbg !382
=>  %5 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ctx.addr, align 8, !dbg !381
 allocation intermediate:   %5 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ctx.addr, align 8, !dbg !381
=>  %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 0
	Node0x7fce5aed0200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed0200:s0 -> Node0x7fce5adba830;
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %6, i32 0, i32 5, !dbg !385
[Sink:]   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %6, i32 0, i32 5, !dbg !385
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ctx.addr, align 8, !dbg !384
=>  %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 96
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 96
	Node0x7fce5aed0200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed0200:s0 -> Node0x7fce5adba830;
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %6, i32 0, i32 5, !dbg !385
[Sink:]   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %6, i32 0, i32 5, !dbg !385
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ctx.addr, align 8, !dbg !384
=>  %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 96
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 96
	Node0x7fce5aed0200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed0200:s0 -> Node0x7fce5adba830;
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Running on BN_is_zero in context [BN_MONT_CTX_set ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !367
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !367
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !366
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7fce5ace9090
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
Running on BN_copy in context [BN_MONT_CTX_set ]
Creating ConsElem Map for :	Node0x7fce5aebcf10 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aebcf10:s0 -> Node0x7fce5acbdd30;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5acbdd30 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdd30:s0 -> Node0x7fce5acbde00;
Creating ConsElem Map for :	Node0x7fce5aebd050 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aebd050:s0 -> Node0x7fce5acbdd30;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5acbdd30 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdd30:s0 -> Node0x7fce5acbde00;
Creating ConsElem Map for :	Node0x7fce5aebcdd0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aebcdd0:s0 -> Node0x7fce5acbdd30;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5acbdd30 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdd30:s0 -> Node0x7fce5acbde00;
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !384
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !384
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !383
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d2691c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d2691e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d269260
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d2693a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d2693c0
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !390
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !390
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !389
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d2691c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d2691e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d269260
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d2693a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d2693c0
Creating ConsElem Map for :	Node0x7fce5aebd290 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aebd290:s0 -> Node0x7fce5acbde00;
EDGE: [0: tymap-size 1]:i64
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
DSOURCEGEP INSTRUCTION   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !393
[Source:]   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !393
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !392
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d2691c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d2691e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d269260
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d2693a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d2693c0
Creating ConsElem Map for :	Node0x7fce5aebd3d0 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aebd3d0:s0 -> Node0x7fce5acbde00;
EDGE: [0: tymap-size 1]:i64
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
DSOURCEGEP INSTRUCTION   %top5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !397
[Source:]   %top5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !397
StructType: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !395
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d2691c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d2691e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d269260
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d2693a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d2693c0
Creating ConsElem Map for :	Node0x7fce5aebd190 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !414
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !414
 allocation intermediate:   %13 = load i64*, i64** %B, align 8, !dbg !414
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
Creating ConsElem Map for :	Node0x7fce5aebd510 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx7 = getelementptr inbounds i64, i64* %15, i64 1, !dbg !416
[Source:]   %arrayidx7 = getelementptr inbounds i64, i64* %15, i64 1, !dbg !416
 allocation intermediate:   %15 = load i64*, i64** %B, align 8, !dbg !416
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
Creating ConsElem Map for :	Node0x7fce5aebd610 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx8 = getelementptr inbounds i64, i64* %17, i64 2, !dbg !418
[Source:]   %arrayidx8 = getelementptr inbounds i64, i64* %17, i64 2, !dbg !418
 allocation intermediate:   %17 = load i64*, i64** %B, align 8, !dbg !418
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
Creating ConsElem Map for :	Node0x7fce5aebd710 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx9 = getelementptr inbounds i64, i64* %19, i64 3, !dbg !420
[Source:]   %arrayidx9 = getelementptr inbounds i64, i64* %19, i64 3, !dbg !420
 allocation intermediate:   %19 = load i64*, i64** %B, align 8, !dbg !420
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 3
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
Creating ConsElem Map for :	Node0x7fce5aebd810 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSINKGEP INSTRUCTION   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !423
[Sink:]   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !423
 allocation intermediate:   %22 = load i64*, i64** %A, align 8, !dbg !423
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
Created 1 constraint variable(s) for node of size 1
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !423
[Sink:]   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !423
 allocation intermediate:   %22 = load i64*, i64** %A, align 8, !dbg !423
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !426
[Sink:]   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !426
 allocation intermediate:   %24 = load i64*, i64** %A, align 8, !dbg !426
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !426
[Sink:]   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !426
 allocation intermediate:   %24 = load i64*, i64** %A, align 8, !dbg !426
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !429
[Sink:]   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !429
 allocation intermediate:   %26 = load i64*, i64** %A, align 8, !dbg !429
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !429
[Sink:]   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !429
 allocation intermediate:   %26 = load i64*, i64** %A, align 8, !dbg !429
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !432
[Sink:]   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !432
 allocation intermediate:   %28 = load i64*, i64** %A, align 8, !dbg !432
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 3
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 3
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !432
[Sink:]   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !432
 allocation intermediate:   %28 = load i64*, i64** %A, align 8, !dbg !432
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 3
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 3
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top15 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %32, i32 0, i32 1, !dbg !440
[Source:]   %top15 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %32, i32 0, i32 1, !dbg !440
StructType: allocation intermediate:   %32 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !439
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d2691c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d2691e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d269260
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d2693a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d2693c0
DSOURCEGEP INSTRUCTION   %arrayidx16 = getelementptr inbounds i64, i64* %34, i64 2, !dbg !443
[Source:]   %arrayidx16 = getelementptr inbounds i64, i64* %34, i64 2, !dbg !443
 allocation intermediate:   %34 = load i64*, i64** %B, align 8, !dbg !443
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 2
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fce5d1409c0
DSINKGEP INSTRUCTION   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !445
[Sink:]   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !445
 allocation intermediate:   %36 = load i64*, i64** %A, align 8, !dbg !445
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !445
[Sink:]   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !445
 allocation intermediate:   %36 = load i64*, i64** %A, align 8, !dbg !445
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx19 = getelementptr inbounds i64, i64* %37, i64 1, !dbg !447
[Source:]   %arrayidx19 = getelementptr inbounds i64, i64* %37, i64 1, !dbg !447
 allocation intermediate:   %37 = load i64*, i64** %B, align 8, !dbg !447
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fce5d1409c0
DSINKGEP INSTRUCTION   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !448
[Sink:]   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !448
 allocation intermediate:   %39 = load i64*, i64** %A, align 8, !dbg !448
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !448
[Sink:]   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !448
 allocation intermediate:   %39 = load i64*, i64** %A, align 8, !dbg !448
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx22 = getelementptr inbounds i64, i64* %40, i64 0, !dbg !450
[Source:]   %arrayidx22 = getelementptr inbounds i64, i64* %40, i64 0, !dbg !450
 allocation intermediate:   %40 = load i64*, i64** %B, align 8, !dbg !450
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fce5d1409c0
DSINKGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !451
[Sink:]   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !451
 allocation intermediate:   %42 = load i64*, i64** %A, align 8, !dbg !451
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !451
[Sink:]   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !451
 allocation intermediate:   %42 = load i64*, i64** %A, align 8, !dbg !451
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top29 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %45, i32 0, i32 1, !dbg !462
[Source:]   %top29 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %45, i32 0, i32 1, !dbg !462
StructType: allocation intermediate:   %45 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !461
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d2691c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d2691e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d269260
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d2693a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d2693c0
DSINKGEP INSTRUCTION   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !464
[Sink:]   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !464
StructType:::IS STRUCT TY:: allocation intermediate:   %47 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !463
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5acbdd30 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdd30:s0 -> Node0x7fce5acbde00;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !464
[Sink:]   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !464
StructType:::IS STRUCT TY:: allocation intermediate:   %47 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !463
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5acbdd30 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdd30:s0 -> Node0x7fce5acbde00;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %48, i32 0, i32 3, !dbg !467
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %48, i32 0, i32 3, !dbg !467
StructType: allocation intermediate:   %48 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !466
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d2691c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d2691e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d269260
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d2693a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d2693c0
DSINKGEP INSTRUCTION   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !469
[Sink:]   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !469
StructType:::IS STRUCT TY:: allocation intermediate:   %50 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !468
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fce5acbdd30 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdd30:s0 -> Node0x7fce5acbde00;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !469
[Sink:]   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !469
StructType:::IS STRUCT TY:: allocation intermediate:   %50 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !468
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fce5acbdd30 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdd30:s0 -> Node0x7fce5acbde00;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Running on bn_init in context [BN_MONT_CTX_set ]
Creating ConsElem Map for :	Node0x7fce5aed0a80 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aed0a80:s0 -> Node0x7fce5aed0ba0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aed0ba0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed0ba0:s0 -> Node0x7fce5adc2cc0;
Running on BN_get_flags in context [BN_MONT_CTX_set ]
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !369
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !369
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !368
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d1165b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d116690
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d116770
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d116850
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d11ef30
Running on BN_set_flags in context [BN_MONT_CTX_set ]
Creating ConsElem Map for :	Node0x7fce5aebf840 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aebf840:s0 -> Node0x7fce5acbd8a0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5acbd8a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbd8a0:s0 -> Node0x7fce5acbe660;
Creating ConsElem Map for :	Node0x7fce5aebf910 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !370
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !370
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !369
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d27a840
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d27a860
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d27a8e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d27aa20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d27aa40
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !370
[Sink:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !370
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !369
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 20
	Node0x7fce5acbd8a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbd8a0:s0 -> Node0x7fce5acbe660;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 20
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !370
[Sink:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !370
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !369
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 20
	Node0x7fce5acbd8a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbd8a0:s0 -> Node0x7fce5acbe660;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 20
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Running on BN_num_bits in context [BN_MONT_CTX_set ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !369
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !369
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !368
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7fce5d128a30
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !380
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !380
StructType: allocation intermediate:   %5 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !379
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7fce5d128950
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !379
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !379
Running on BN_set_word in context [BN_MONT_CTX_set ]
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !375
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !375
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !374
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fce5acbdc70 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdc70:s0 -> Node0x7fce5ade42c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !375
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !375
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !374
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fce5acbdc70 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdc70:s0 -> Node0x7fce5ade42c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5ace05f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5ace0a10
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5ace0a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5ace0ab0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5ace0ad0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !378
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !378
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !379
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x7fce5acbdc70 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdc70:s0 -> Node0x7fce5ade42c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !378
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !378
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !379
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x7fce5acbdc70 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdc70:s0 -> Node0x7fce5ade42c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !383
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !383
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !382
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5acbdc70 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdc70:s0 -> Node0x7fce5ade42c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !383
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !383
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !382
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5acbdc70 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdc70:s0 -> Node0x7fce5ade42c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Running on BN_set_bit in context [BN_MONT_CTX_set ]
Creating ConsElem Map for :	Node0x7fce5aed6440 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aed6440:s0 -> Node0x7fce5aee5920;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aee5920 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aee5920:s0 -> Node0x7fce5ad8c540;
Creating ConsElem Map for :	Node0x7fce5aed64d0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aed63b0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aed6560 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aed65f0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 1, !dbg !387
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 1, !dbg !387
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !385
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d27e980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d27eb70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d27ebc0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d27ed60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d27edb0
DSOURCEGEP INSTRUCTION   %top6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 1, !dbg !402
[Source:]   %top6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 1, !dbg !402
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !400
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d27e980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d27eb70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d27ebc0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d27ed60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d27edb0
Creating ConsElem Map for :	Node0x7fce5aed6680 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %13, i32 0, i32 0, !dbg !413
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %13, i32 0, i32 0, !dbg !413
StructType: allocation intermediate:   %13 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !412
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d27e980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d27eb70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d27ebc0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d27ed60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d27edb0
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !412
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !412
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !412
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !412
DSINKGEP INSTRUCTION   %top10 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 1, !dbg !420
[Sink:]   %top10 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 1, !dbg !420
StructType:::IS STRUCT TY:: allocation intermediate:   %17 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !419
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 8
	Node0x7fce5aee5920 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aee5920:s0 -> Node0x7fce5ad8c540;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top10 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 1, !dbg !420
[Sink:]   %top10 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 1, !dbg !420
StructType:::IS STRUCT TY:: allocation intermediate:   %17 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !419
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 8
	Node0x7fce5aee5920 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aee5920:s0 -> Node0x7fce5ad8c540;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %d13 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %20, i32 0, i32 0, !dbg !427
[Source:]   %d13 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %20, i32 0, i32 0, !dbg !427
StructType: allocation intermediate:   %20 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !426
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d27e980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d27eb70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d27ebc0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d27ed60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d27edb0
DSOURCEGEP INSTRUCTION   %arrayidx14 = getelementptr inbounds i64, i64* %21, i64 %idxprom12, !dbg !426
[Source:]   %arrayidx14 = getelementptr inbounds i64, i64* %21, i64 %idxprom12, !dbg !426
DSINKGEP INSTRUCTION   %arrayidx14 = getelementptr inbounds i64, i64* %21, i64 %idxprom12, !dbg !426
[Sink:]   %arrayidx14 = getelementptr inbounds i64, i64* %21, i64 %idxprom12, !dbg !426
DSINKGEP INSTRUCTION   %arrayidx14 = getelementptr inbounds i64, i64* %21, i64 %idxprom12, !dbg !426
[Sink:]   %arrayidx14 = getelementptr inbounds i64, i64* %21, i64 %idxprom12, !dbg !426
Running on BN_mod_mul_montgomery in context [BN_to_montgomery ]
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %0), !dbg !379
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !378
REACHABLE SOURCE:   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !378
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !378
Using taint reachable signature for:   %call = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %1), !dbg !381
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !380
REACHABLE SOURCE:   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !380
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !380
Using taint reachable signature for:   %call4 = call i32 @BN_sqr(%struct.bignum_st* %5, %struct.bignum_st* %6, %struct.bignum_ctx* %7), !dbg !398
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !397
RSINKGEP INSTRUCTION   %5 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !393
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !396
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !397
REACHABLE SOURCE:   %5 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !393
REACHABLE SOURCE:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !396
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !397
RSINKGEP INSTRUCTION   %5 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !393
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !396
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call7 = call i32 @BN_mul(%struct.bignum_st* %8, %struct.bignum_st* %9, %struct.bignum_st* %10, %struct.bignum_ctx* %11), !dbg !408
RSINKGEP INSTRUCTION   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !406
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !407
RSINKGEP INSTRUCTION   %8 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !402
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !405
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !406
REACHABLE SOURCE:   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !407
REACHABLE SOURCE:   %8 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !402
REACHABLE SOURCE:   %9 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !405
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
RSINKGEP INSTRUCTION   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !406
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !407
RSINKGEP INSTRUCTION   %8 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !402
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !405
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %15), !dbg !421
RSINKGEP INSTRUCTION   %15 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !420
REACHABLE SOURCE:   %15 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !420
	Node0x7fce5aef8790 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %15 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !420
Running on BN_from_montgomery_word in context [BN_mod_mul_montgomery ]
Unsupported intrinsic: llvm.objectsize
Using taint reachable signature for:   %call14 = call i8* @__memset_chk(i8* %23, i32 0, i64 %mul10, i64 %29) #5, !dbg !434
RSINKGEP INSTRUCTION   %23 = bitcast i64* %arrayidx to i8*, !dbg !434
REACHABLE SOURCE:   %23 = bitcast i64* %arrayidx to i8*, !dbg !434
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %23 = bitcast i64* %arrayidx to i8*, !dbg !434
Using taint reachable signature for:   %call23 = call i64 @bn_mul_add_words(i64* %36, i64* %37, i32 %38, i64 %mul22), !dbg !458
RSINKGEP INSTRUCTION   %37 = load i64*, i64** %np, align 8, !dbg !453
RSINKGEP INSTRUCTION   %36 = load i64*, i64** %rp, align 8, !dbg !451
REACHABLE SOURCE:   %37 = load i64*, i64** %np, align 8, !dbg !453
REACHABLE SOURCE:   %36 = load i64*, i64** %rp, align 8, !dbg !451
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %37 = load i64*, i64** %np, align 8, !dbg !453
RSINKGEP INSTRUCTION   %36 = load i64*, i64** %rp, align 8, !dbg !451
Using taint reachable signature for:   %call51 = call i64 @bn_sub_words(i64* %74, i64* %75, i64* %76, i32 %77), !dbg !519
RSINKGEP INSTRUCTION   %74 = load i64*, i64** %rp, align 8, !dbg !515
RSINKGEP INSTRUCTION   %76 = load i64*, i64** %np, align 8, !dbg !517
RSINKGEP INSTRUCTION   %75 = load i64*, i64** %ap, align 8, !dbg !516
REACHABLE SOURCE:   %74 = load i64*, i64** %rp, align 8, !dbg !515
REACHABLE SOURCE:   %76 = load i64*, i64** %np, align 8, !dbg !517
REACHABLE SOURCE:   %75 = load i64*, i64** %ap, align 8, !dbg !516
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %74 = load i64*, i64** %rp, align 8, !dbg !515
RSINKGEP INSTRUCTION   %76 = load i64*, i64** %np, align 8, !dbg !517
RSINKGEP INSTRUCTION   %75 = load i64*, i64** %ap, align 8, !dbg !516
Creating ConsElem Map for :	Node0x7fce5aec9850 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aec9850:s0 -> Node0x7fce5aecaff0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aecaff0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aecaff0:s0 -> Node0x7fce5acbdfd0;
Creating ConsElem Map for :	Node0x7fce5aec9990 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aec9990:s0 -> Node0x7fce5aec9730;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aec9730 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aec9730:s0 -> Node0x7fce5acbdfd0;
Creating ConsElem Map for :	Node0x7fce5aec9ad0 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aec9ad0:s0 -> Node0x7fce5aecaff0;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x7fce5aecaff0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aecaff0:s0 -> Node0x7fce5acbdfd0;
Creating ConsElem Map for :	Node0x7fce5aec9c10 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aec9c10:s0 -> Node0x7fce5aecaff0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aecaff0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aecaff0:s0 -> Node0x7fce5acbdfd0;
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 1, !dbg !394
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 1, !dbg !394
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %n, align 8, !dbg !393
=>  %n = alloca %struct.bignum_st*, align 8
FINAL:   %n = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d32c190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d32c1e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d32c380
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d32c3d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d32c730
Creating ConsElem Map for :	Node0x7fce5aeca410 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSINKGEP INSTRUCTION   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !402
[Sink:]   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !402
StructType:::IS STRUCT TY:: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %ret.addr, align 8, !dbg !400
=>  %ret.addr = alloca %struct.bignum_st*, align 8
FINAL:   %ret.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 8
	Node0x7fce5aecaff0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aecaff0:s0 -> Node0x7fce5acbdfd0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !402
[Sink:]   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !402
StructType:::IS STRUCT TY:: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %ret.addr, align 8, !dbg !400
=>  %ret.addr = alloca %struct.bignum_st*, align 8
FINAL:   %ret.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 8
	Node0x7fce5aecaff0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aecaff0:s0 -> Node0x7fce5acbdfd0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Creating ConsElem Map for :	Node0x7fce5aec97c0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aeca510 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 3, !dbg !416
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 3, !dbg !416
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %n, align 8, !dbg !415
=>  %n = alloca %struct.bignum_st*, align 8
FINAL:   %n = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d32c190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d32c1e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d32c380
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d32c3d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d32c730
DSOURCEGEP INSTRUCTION   %neg5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 3, !dbg !418
[Source:]   %neg5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 3, !dbg !418
StructType: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !417
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[16,20]0x7fce5d32cb10
DSINKGEP INSTRUCTION   %neg5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 3, !dbg !418
[Sink:]   %neg5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 3, !dbg !418
StructType:::IS STRUCT TY:: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !417
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 16
	Node0x7fce5aec9730 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aec9730:s0 -> Node0x7fce5acbdfd0;
Trying to find element at offset 16
DSINKGEP INSTRUCTION   %neg5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 3, !dbg !418
[Sink:]   %neg5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 3, !dbg !418
StructType:::IS STRUCT TY:: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !417
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 16
	Node0x7fce5aec9730 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aec9730:s0 -> Node0x7fce5acbdfd0;
Trying to find element at offset 16
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !421
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !421
StructType: allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %n, align 8, !dbg !420
=>  %n = alloca %struct.bignum_st*, align 8
FINAL:   %n = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d32c190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d32c1e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d32c380
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d32c3d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d32c730
Creating ConsElem Map for :	Node0x7fce5aec9e90 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aec9e90:s0 -> Node0x7fce5acbdfd0;
EDGE: [0: tymap-size 1]:i64
	Node0x7fce5acbdfd0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
DSOURCEGEP INSTRUCTION   %d6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %14, i32 0, i32 0, !dbg !424
[Source:]   %d6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %14, i32 0, i32 0, !dbg !424
StructType: allocation intermediate:   %14 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !423
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7fce5d32c930
Creating ConsElem Map for :	Node0x7fce5aec9fd0 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aec9fd0:s0 -> Node0x7fce5acbdfd0;
EDGE: [0: tymap-size 1]:i64
	Node0x7fce5acbdfd0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
DSOURCEGEP INSTRUCTION   %top7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 1, !dbg !428
[Source:]   %top7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 1, !dbg !428
StructType: allocation intermediate:   %17 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !427
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7fce5d32c9d0
Creating ConsElem Map for :	Node0x7fce5aeca610 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %top9 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %20, i32 0, i32 1, !dbg !434
[Source:]   %top9 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %20, i32 0, i32 1, !dbg !434
StructType: allocation intermediate:   %20 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !434
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7fce5d32c9d0
DSOURCEGEP INSTRUCTION   %top11 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %25, i32 0, i32 1, !dbg !434
[Source:]   %top11 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %25, i32 0, i32 1, !dbg !434
StructType: allocation intermediate:   %25 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !434
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7fce5d32c9d0
DSINKGEP INSTRUCTION   %top16 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %31, i32 0, i32 1, !dbg !437
[Sink:]   %top16 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %31, i32 0, i32 1, !dbg !437
StructType:::IS STRUCT TY:: allocation intermediate:   %31 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !436
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 8
	Node0x7fce5aec9730 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aec9730:s0 -> Node0x7fce5acbdfd0;
Trying to find element at offset 8
DSINKGEP INSTRUCTION   %top16 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %31, i32 0, i32 1, !dbg !437
[Sink:]   %top16 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %31, i32 0, i32 1, !dbg !437
StructType:::IS STRUCT TY:: allocation intermediate:   %31 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !436
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 8
	Node0x7fce5aec9730 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aec9730:s0 -> Node0x7fce5acbdfd0;
Trying to find element at offset 8
DSOURCEGEP INSTRUCTION   %arrayidx18 = getelementptr inbounds [2 x i64], [2 x i64]* %n017, i32 0, i64 0, !dbg !439
[Source:]   %arrayidx18 = getelementptr inbounds [2 x i64], [2 x i64]* %n017, i32 0, i64 0, !dbg !439
ArrayType: allocation intermediate:   %n017 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %32, i32 0, i32 4, !dbg !440
=>  %32 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !439
 allocation intermediate:   %32 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !439
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d32c190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d32c1e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d32c380
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d32c3d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d32c730
Creating ConsElem Map for :	Node0x7fce5aeca110 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aeca310 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx21 = getelementptr inbounds i64, i64* %39, i64 0, !dbg !455
[Source:]   %arrayidx21 = getelementptr inbounds i64, i64* %39, i64 0, !dbg !455
 allocation intermediate:   %39 = load i64*, i64** %rp, align 8, !dbg !455
=>  %rp = alloca i64*, align 8
FINAL:   %rp = alloca i64*, align 8
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
Creating ConsElem Map for :	Node0x7fce5aeca210 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx25 = getelementptr inbounds i64, i64* %45, i64 %idxprom24, !dbg !464
[Source:]   %arrayidx25 = getelementptr inbounds i64, i64* %45, i64 %idxprom24, !dbg !464
DSOURCEGEP INSTRUCTION   %arrayidx28 = getelementptr inbounds i64, i64* %49, i64 %idxprom27, !dbg !469
[Source:]   %arrayidx28 = getelementptr inbounds i64, i64* %49, i64 %idxprom27, !dbg !469
DSOURCEGEP INSTRUCTION   %arrayidx33 = getelementptr inbounds i64, i64* %54, i64 %idxprom32, !dbg !475
[Source:]   %arrayidx33 = getelementptr inbounds i64, i64* %54, i64 %idxprom32, !dbg !475
DSINKGEP INSTRUCTION   %arrayidx38 = getelementptr inbounds i64, i64* %59, i64 %idxprom37, !dbg !481
[Sink:]   %arrayidx38 = getelementptr inbounds i64, i64* %59, i64 %idxprom37, !dbg !481
DSINKGEP INSTRUCTION   %arrayidx38 = getelementptr inbounds i64, i64* %59, i64 %idxprom37, !dbg !481
[Sink:]   %arrayidx38 = getelementptr inbounds i64, i64* %59, i64 %idxprom37, !dbg !481
DSINKGEP INSTRUCTION   %top44 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %65, i32 0, i32 1, !dbg !496
[Sink:]   %top44 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %65, i32 0, i32 1, !dbg !496
StructType:::IS STRUCT TY:: allocation intermediate:   %65 = load %struct.bignum_st*, %struct.bignum_st** %ret.addr, align 8, !dbg !495
=>  %ret.addr = alloca %struct.bignum_st*, align 8
FINAL:   %ret.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 8
	Node0x7fce5aecaff0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aecaff0:s0 -> Node0x7fce5acbdfd0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top44 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %65, i32 0, i32 1, !dbg !496
[Sink:]   %top44 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %65, i32 0, i32 1, !dbg !496
StructType:::IS STRUCT TY:: allocation intermediate:   %65 = load %struct.bignum_st*, %struct.bignum_st** %ret.addr, align 8, !dbg !495
=>  %ret.addr = alloca %struct.bignum_st*, align 8
FINAL:   %ret.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 8
	Node0x7fce5aecaff0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aecaff0:s0 -> Node0x7fce5acbdfd0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %neg45 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %66, i32 0, i32 3, !dbg !499
[Source:]   %neg45 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %66, i32 0, i32 3, !dbg !499
StructType: allocation intermediate:   %66 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !498
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[16,20]0x7fce5d32cb10
DSINKGEP INSTRUCTION   %neg46 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %68, i32 0, i32 3, !dbg !501
[Sink:]   %neg46 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %68, i32 0, i32 3, !dbg !501
StructType:::IS STRUCT TY:: allocation intermediate:   %68 = load %struct.bignum_st*, %struct.bignum_st** %ret.addr, align 8, !dbg !500
=>  %ret.addr = alloca %struct.bignum_st*, align 8
FINAL:   %ret.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 16
	Node0x7fce5aecaff0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aecaff0:s0 -> Node0x7fce5acbdfd0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg46 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %68, i32 0, i32 3, !dbg !501
[Sink:]   %neg46 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %68, i32 0, i32 3, !dbg !501
StructType:::IS STRUCT TY:: allocation intermediate:   %68 = load %struct.bignum_st*, %struct.bignum_st** %ret.addr, align 8, !dbg !500
=>  %ret.addr = alloca %struct.bignum_st*, align 8
FINAL:   %ret.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 16
	Node0x7fce5aecaff0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aecaff0:s0 -> Node0x7fce5acbdfd0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %d47 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %69, i32 0, i32 0, !dbg !504
[Source:]   %d47 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %69, i32 0, i32 0, !dbg !504
StructType: allocation intermediate:   %69 = load %struct.bignum_st*, %struct.bignum_st** %ret.addr, align 8, !dbg !503
=>  %ret.addr = alloca %struct.bignum_st*, align 8
FINAL:   %ret.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d32c190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d32c1e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d32c380
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d32c3d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d32c730
DSOURCEGEP INSTRUCTION   %d49 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %72, i32 0, i32 0, !dbg !508
[Source:]   %d49 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %72, i32 0, i32 0, !dbg !508
StructType: allocation intermediate:   %72 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !507
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7fce5d32c930
Creating ConsElem Map for :	Node0x7fce5aec9d50 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aec9d50:s0 -> Node0x7fce5acbdfd0;
EDGE: [0: tymap-size 1]:i64
	Node0x7fce5acbdfd0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x7fce5aeca850 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aeca710 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aeca710:s0 -> Node0x7fce5aecb100;
EDGE: [0: tymap-size 1]:i64
	Node0x7fce5aecb100 [shape=record,shape=Mrecord,label="{0: i64,   array: R\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx65 = getelementptr inbounds i64, i64* %91, i64 %idxprom64, !dbg !558
[Source:]   %arrayidx65 = getelementptr inbounds i64, i64* %91, i64 %idxprom64, !dbg !558
Created 1 constraint variable(s) for node of size 8
Creating ConsElem Map for :	Node0x7fce5aeca950 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx68 = getelementptr inbounds i64, i64* %94, i64 %idxprom67, !dbg !562
[Source:]   %arrayidx68 = getelementptr inbounds i64, i64* %94, i64 %idxprom67, !dbg !562
Creating ConsElem Map for :	Node0x7fce5aecaa50 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx71 = getelementptr inbounds i64, i64* %97, i64 %idxprom70, !dbg !566
[Source:]   %arrayidx71 = getelementptr inbounds i64, i64* %97, i64 %idxprom70, !dbg !566
Creating ConsElem Map for :	Node0x7fce5aecab50 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSINKGEP INSTRUCTION   %arrayidx74 = getelementptr inbounds i64, i64* %100, i64 %idxprom73, !dbg !570
[Sink:]   %arrayidx74 = getelementptr inbounds i64, i64* %100, i64 %idxprom73, !dbg !570
DSINKGEP INSTRUCTION   %arrayidx74 = getelementptr inbounds i64, i64* %100, i64 %idxprom73, !dbg !570
[Sink:]   %arrayidx74 = getelementptr inbounds i64, i64* %100, i64 %idxprom73, !dbg !570
DSOURCEGEP INSTRUCTION   %arrayidx77 = getelementptr inbounds i64, i64* %102, i64 %idxprom76, !dbg !574
[Source:]   %arrayidx77 = getelementptr inbounds i64, i64* %102, i64 %idxprom76, !dbg !574
Creating ConsElem Map for :	Node0x7fce5aecac50 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSINKGEP INSTRUCTION   %arrayidx80 = getelementptr inbounds i64, i64* %105, i64 %idxprom79, !dbg !578
[Sink:]   %arrayidx80 = getelementptr inbounds i64, i64* %105, i64 %idxprom79, !dbg !578
DSINKGEP INSTRUCTION   %arrayidx80 = getelementptr inbounds i64, i64* %105, i64 %idxprom79, !dbg !578
[Sink:]   %arrayidx80 = getelementptr inbounds i64, i64* %105, i64 %idxprom79, !dbg !578
DSINKGEP INSTRUCTION   %arrayidx83 = getelementptr inbounds i64, i64* %108, i64 %idxprom82, !dbg !583
[Sink:]   %arrayidx83 = getelementptr inbounds i64, i64* %108, i64 %idxprom82, !dbg !583
DSINKGEP INSTRUCTION   %arrayidx83 = getelementptr inbounds i64, i64* %108, i64 %idxprom82, !dbg !583
[Sink:]   %arrayidx83 = getelementptr inbounds i64, i64* %108, i64 %idxprom82, !dbg !583
DSINKGEP INSTRUCTION   %arrayidx86 = getelementptr inbounds i64, i64* %110, i64 %idxprom85, !dbg !587
[Sink:]   %arrayidx86 = getelementptr inbounds i64, i64* %110, i64 %idxprom85, !dbg !587
DSINKGEP INSTRUCTION   %arrayidx86 = getelementptr inbounds i64, i64* %110, i64 %idxprom85, !dbg !587
[Sink:]   %arrayidx86 = getelementptr inbounds i64, i64* %110, i64 %idxprom85, !dbg !587
DSINKGEP INSTRUCTION   %arrayidx89 = getelementptr inbounds i64, i64* %113, i64 %idxprom88, !dbg !592
[Sink:]   %arrayidx89 = getelementptr inbounds i64, i64* %113, i64 %idxprom88, !dbg !592
DSINKGEP INSTRUCTION   %arrayidx89 = getelementptr inbounds i64, i64* %113, i64 %idxprom88, !dbg !592
[Sink:]   %arrayidx89 = getelementptr inbounds i64, i64* %113, i64 %idxprom88, !dbg !592
DSINKGEP INSTRUCTION   %arrayidx92 = getelementptr inbounds i64, i64* %115, i64 %idxprom91, !dbg !596
[Sink:]   %arrayidx92 = getelementptr inbounds i64, i64* %115, i64 %idxprom91, !dbg !596
DSINKGEP INSTRUCTION   %arrayidx92 = getelementptr inbounds i64, i64* %115, i64 %idxprom91, !dbg !596
[Sink:]   %arrayidx92 = getelementptr inbounds i64, i64* %115, i64 %idxprom91, !dbg !596
DSINKGEP INSTRUCTION   %arrayidx95 = getelementptr inbounds i64, i64* %118, i64 %idxprom94, !dbg !601
[Sink:]   %arrayidx95 = getelementptr inbounds i64, i64* %118, i64 %idxprom94, !dbg !601
DSINKGEP INSTRUCTION   %arrayidx95 = getelementptr inbounds i64, i64* %118, i64 %idxprom94, !dbg !601
[Sink:]   %arrayidx95 = getelementptr inbounds i64, i64* %118, i64 %idxprom94, !dbg !601
DSINKGEP INSTRUCTION   %arrayidx98 = getelementptr inbounds i64, i64* %121, i64 %idxprom97, !dbg !606
[Sink:]   %arrayidx98 = getelementptr inbounds i64, i64* %121, i64 %idxprom97, !dbg !606
DSINKGEP INSTRUCTION   %arrayidx98 = getelementptr inbounds i64, i64* %121, i64 %idxprom97, !dbg !606
[Sink:]   %arrayidx98 = getelementptr inbounds i64, i64* %121, i64 %idxprom97, !dbg !606
DSOURCEGEP INSTRUCTION   %arrayidx108 = getelementptr inbounds i64, i64* %127, i64 %idxprom107, !dbg !620
[Source:]   %arrayidx108 = getelementptr inbounds i64, i64* %127, i64 %idxprom107, !dbg !620
DSINKGEP INSTRUCTION   %arrayidx110 = getelementptr inbounds i64, i64* %130, i64 %idxprom109, !dbg !622
[Sink:]   %arrayidx110 = getelementptr inbounds i64, i64* %130, i64 %idxprom109, !dbg !622
DSINKGEP INSTRUCTION   %arrayidx110 = getelementptr inbounds i64, i64* %130, i64 %idxprom109, !dbg !622
[Sink:]   %arrayidx110 = getelementptr inbounds i64, i64* %130, i64 %idxprom109, !dbg !622
DSINKGEP INSTRUCTION   %arrayidx112 = getelementptr inbounds i64, i64* %132, i64 %idxprom111, !dbg !625
[Sink:]   %arrayidx112 = getelementptr inbounds i64, i64* %132, i64 %idxprom111, !dbg !625
DSINKGEP INSTRUCTION   %arrayidx112 = getelementptr inbounds i64, i64* %132, i64 %idxprom111, !dbg !625
[Sink:]   %arrayidx112 = getelementptr inbounds i64, i64* %132, i64 %idxprom111, !dbg !625
Running on bn_expand2 in context [bn_wexpand ]
Using taint reachable signature for:   call void @OPENSSL_cleanse(i8* %10, i64 %mul), !dbg !394
RSINKGEP INSTRUCTION   %10 = bitcast i64* %9 to i8*, !dbg !388
REACHABLE SOURCE:   %10 = bitcast i64* %9 to i8*, !dbg !388
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %10 = bitcast i64* %9 to i8*, !dbg !388
Creating ConsElem Map for :	Node0x7fce5aeb7320 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aeb7320:s0 -> Node0x7fce5adc42d0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5adc42d0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5adc42d0:s0 -> Node0x7fce5adc0a30;
Creating ConsElem Map for :	Node0x7fce5aeb7460 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !371
[Source:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !371
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !370
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d298190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d2985b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d298600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d298650
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d298670
Creating ConsElem Map for :	Node0x7fce5aeb7560 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aeb7560:s0 -> Node0x7fce5adc0a30;
EDGE: [0: tymap-size 1]:i64
	Node0x7fce5adc0a30 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x7fce5aeb71e0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aeb71e0:s0 -> Node0x7fce5adc42d0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5adc42d0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5adc42d0:s0 -> Node0x7fce5adc0a30;
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !386
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !386
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !384
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d298190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d2985b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d298600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d298650
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d298670
DSOURCEGEP INSTRUCTION   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !390
[Source:]   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !390
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !388
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d298190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d2985b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d298600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d298650
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d298670
DSOURCEGEP INSTRUCTION   %dmax5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %11, i32 0, i32 2, !dbg !392
[Source:]   %dmax5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %11, i32 0, i32 2, !dbg !392
StructType: allocation intermediate:   %11 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !391
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d298190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d2985b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d298600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d298650
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d298670
DSINKGEP INSTRUCTION   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !400
[Sink:]   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !400
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !399
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x7fce5adc42d0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5adc42d0:s0 -> Node0x7fce5adc0a30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !400
[Sink:]   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !400
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !399
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x7fce5adc42d0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5adc42d0:s0 -> Node0x7fce5adc0a30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !404
[Sink:]   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !404
StructType:::IS STRUCT TY:: allocation intermediate:   %17 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !403
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 12
	Node0x7fce5adc42d0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5adc42d0:s0 -> Node0x7fce5adc0a30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 12
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !404
[Sink:]   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !404
StructType:::IS STRUCT TY:: allocation intermediate:   %17 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !403
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 12
	Node0x7fce5adc42d0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5adc42d0:s0 -> Node0x7fce5adc0a30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 12
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Running on BN_copy in context [BN_from_montgomery ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !384
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !384
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !383
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d2691c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d2691e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d269260
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d2693a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d2693c0
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !390
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !390
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !389
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d2691c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d2691e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d269260
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d2693a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d2693c0
DSOURCEGEP INSTRUCTION   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !393
[Source:]   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !393
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !392
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d2691c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d2691e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d269260
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d2693a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d2693c0
DSOURCEGEP INSTRUCTION   %top5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !397
[Source:]   %top5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !397
StructType: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !395
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d2691c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d2691e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d269260
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d2693a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d2693c0
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !414
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !414
 allocation intermediate:   %13 = load i64*, i64** %B, align 8, !dbg !414
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fce5d1409c0
DSOURCEGEP INSTRUCTION   %arrayidx7 = getelementptr inbounds i64, i64* %15, i64 1, !dbg !416
[Source:]   %arrayidx7 = getelementptr inbounds i64, i64* %15, i64 1, !dbg !416
 allocation intermediate:   %15 = load i64*, i64** %B, align 8, !dbg !416
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fce5d1409c0
DSOURCEGEP INSTRUCTION   %arrayidx8 = getelementptr inbounds i64, i64* %17, i64 2, !dbg !418
[Source:]   %arrayidx8 = getelementptr inbounds i64, i64* %17, i64 2, !dbg !418
 allocation intermediate:   %17 = load i64*, i64** %B, align 8, !dbg !418
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 2
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fce5d1409c0
DSOURCEGEP INSTRUCTION   %arrayidx9 = getelementptr inbounds i64, i64* %19, i64 3, !dbg !420
[Source:]   %arrayidx9 = getelementptr inbounds i64, i64* %19, i64 3, !dbg !420
 allocation intermediate:   %19 = load i64*, i64** %B, align 8, !dbg !420
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 3
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 3
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fce5d1409c0
DSINKGEP INSTRUCTION   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !423
[Sink:]   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !423
 allocation intermediate:   %22 = load i64*, i64** %A, align 8, !dbg !423
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !423
[Sink:]   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !423
 allocation intermediate:   %22 = load i64*, i64** %A, align 8, !dbg !423
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !426
[Sink:]   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !426
 allocation intermediate:   %24 = load i64*, i64** %A, align 8, !dbg !426
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !426
[Sink:]   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !426
 allocation intermediate:   %24 = load i64*, i64** %A, align 8, !dbg !426
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !429
[Sink:]   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !429
 allocation intermediate:   %26 = load i64*, i64** %A, align 8, !dbg !429
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !429
[Sink:]   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !429
 allocation intermediate:   %26 = load i64*, i64** %A, align 8, !dbg !429
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !432
[Sink:]   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !432
 allocation intermediate:   %28 = load i64*, i64** %A, align 8, !dbg !432
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 3
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 3
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !432
[Sink:]   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !432
 allocation intermediate:   %28 = load i64*, i64** %A, align 8, !dbg !432
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 3
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 3
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top15 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %32, i32 0, i32 1, !dbg !440
[Source:]   %top15 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %32, i32 0, i32 1, !dbg !440
StructType: allocation intermediate:   %32 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !439
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d2691c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d2691e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d269260
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d2693a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d2693c0
DSOURCEGEP INSTRUCTION   %arrayidx16 = getelementptr inbounds i64, i64* %34, i64 2, !dbg !443
[Source:]   %arrayidx16 = getelementptr inbounds i64, i64* %34, i64 2, !dbg !443
 allocation intermediate:   %34 = load i64*, i64** %B, align 8, !dbg !443
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 2
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fce5d1409c0
DSINKGEP INSTRUCTION   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !445
[Sink:]   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !445
 allocation intermediate:   %36 = load i64*, i64** %A, align 8, !dbg !445
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !445
[Sink:]   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !445
 allocation intermediate:   %36 = load i64*, i64** %A, align 8, !dbg !445
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx19 = getelementptr inbounds i64, i64* %37, i64 1, !dbg !447
[Source:]   %arrayidx19 = getelementptr inbounds i64, i64* %37, i64 1, !dbg !447
 allocation intermediate:   %37 = load i64*, i64** %B, align 8, !dbg !447
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fce5d1409c0
DSINKGEP INSTRUCTION   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !448
[Sink:]   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !448
 allocation intermediate:   %39 = load i64*, i64** %A, align 8, !dbg !448
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !448
[Sink:]   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !448
 allocation intermediate:   %39 = load i64*, i64** %A, align 8, !dbg !448
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx22 = getelementptr inbounds i64, i64* %40, i64 0, !dbg !450
[Source:]   %arrayidx22 = getelementptr inbounds i64, i64* %40, i64 0, !dbg !450
 allocation intermediate:   %40 = load i64*, i64** %B, align 8, !dbg !450
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fce5d1409c0
DSINKGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !451
[Sink:]   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !451
 allocation intermediate:   %42 = load i64*, i64** %A, align 8, !dbg !451
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !451
[Sink:]   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !451
 allocation intermediate:   %42 = load i64*, i64** %A, align 8, !dbg !451
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x7fce5acbde00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top29 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %45, i32 0, i32 1, !dbg !462
[Source:]   %top29 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %45, i32 0, i32 1, !dbg !462
StructType: allocation intermediate:   %45 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !461
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d2691c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d2691e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d269260
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d2693a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d2693c0
DSINKGEP INSTRUCTION   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !464
[Sink:]   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !464
StructType:::IS STRUCT TY:: allocation intermediate:   %47 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !463
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5acbdd30 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdd30:s0 -> Node0x7fce5acbde00;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !464
[Sink:]   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !464
StructType:::IS STRUCT TY:: allocation intermediate:   %47 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !463
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5acbdd30 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdd30:s0 -> Node0x7fce5acbde00;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %48, i32 0, i32 3, !dbg !467
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %48, i32 0, i32 3, !dbg !467
StructType: allocation intermediate:   %48 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !466
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d2691c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d2691e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d269260
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d2693a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d2693c0
DSINKGEP INSTRUCTION   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !469
[Sink:]   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !469
StructType:::IS STRUCT TY:: allocation intermediate:   %50 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !468
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fce5acbdd30 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdd30:s0 -> Node0x7fce5acbde00;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !469
[Sink:]   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !469
StructType:::IS STRUCT TY:: allocation intermediate:   %50 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !468
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fce5acbdd30 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbdd30:s0 -> Node0x7fce5acbde00;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Running on BN_from_montgomery_word in context [BN_from_montgomery ]
Unsupported intrinsic: llvm.objectsize
Using taint reachable signature for:   %call14 = call i8* @__memset_chk(i8* %23, i32 0, i64 %mul10, i64 %29) #5, !dbg !434
RSINKGEP INSTRUCTION   %23 = bitcast i64* %arrayidx to i8*, !dbg !434
REACHABLE SOURCE:   %23 = bitcast i64* %arrayidx to i8*, !dbg !434
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %23 = bitcast i64* %arrayidx to i8*, !dbg !434
Using taint reachable signature for:   %call23 = call i64 @bn_mul_add_words(i64* %36, i64* %37, i32 %38, i64 %mul22), !dbg !458
RSINKGEP INSTRUCTION   %37 = load i64*, i64** %np, align 8, !dbg !453
RSINKGEP INSTRUCTION   %36 = load i64*, i64** %rp, align 8, !dbg !451
REACHABLE SOURCE:   %37 = load i64*, i64** %np, align 8, !dbg !453
REACHABLE SOURCE:   %36 = load i64*, i64** %rp, align 8, !dbg !451
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %37 = load i64*, i64** %np, align 8, !dbg !453
RSINKGEP INSTRUCTION   %36 = load i64*, i64** %rp, align 8, !dbg !451
Using taint reachable signature for:   %call51 = call i64 @bn_sub_words(i64* %74, i64* %75, i64* %76, i32 %77), !dbg !519
RSINKGEP INSTRUCTION   %74 = load i64*, i64** %rp, align 8, !dbg !515
RSINKGEP INSTRUCTION   %76 = load i64*, i64** %np, align 8, !dbg !517
RSINKGEP INSTRUCTION   %75 = load i64*, i64** %ap, align 8, !dbg !516
REACHABLE SOURCE:   %74 = load i64*, i64** %rp, align 8, !dbg !515
REACHABLE SOURCE:   %76 = load i64*, i64** %np, align 8, !dbg !517
REACHABLE SOURCE:   %75 = load i64*, i64** %ap, align 8, !dbg !516
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %74 = load i64*, i64** %rp, align 8, !dbg !515
RSINKGEP INSTRUCTION   %76 = load i64*, i64** %np, align 8, !dbg !517
RSINKGEP INSTRUCTION   %75 = load i64*, i64** %ap, align 8, !dbg !516
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 1, !dbg !394
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 1, !dbg !394
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %n, align 8, !dbg !393
=>  %n = alloca %struct.bignum_st*, align 8
FINAL:   %n = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d32c190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d32c1e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d32c380
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d32c3d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d32c730
DSINKGEP INSTRUCTION   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !402
[Sink:]   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !402
StructType:::IS STRUCT TY:: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %ret.addr, align 8, !dbg !400
=>  %ret.addr = alloca %struct.bignum_st*, align 8
FINAL:   %ret.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 8
	Node0x7fce5aecaff0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aecaff0:s0 -> Node0x7fce5acbdfd0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !402
[Sink:]   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !402
StructType:::IS STRUCT TY:: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %ret.addr, align 8, !dbg !400
=>  %ret.addr = alloca %struct.bignum_st*, align 8
FINAL:   %ret.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 8
	Node0x7fce5aecaff0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aecaff0:s0 -> Node0x7fce5acbdfd0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 3, !dbg !416
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 3, !dbg !416
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %n, align 8, !dbg !415
=>  %n = alloca %struct.bignum_st*, align 8
FINAL:   %n = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d32c190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d32c1e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d32c380
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d32c3d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d32c730
DSOURCEGEP INSTRUCTION   %neg5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 3, !dbg !418
[Source:]   %neg5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 3, !dbg !418
StructType: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !417
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[16,20]0x7fce5d32cb10
DSINKGEP INSTRUCTION   %neg5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 3, !dbg !418
[Sink:]   %neg5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 3, !dbg !418
StructType:::IS STRUCT TY:: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !417
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 16
	Node0x7fce5aec9730 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aec9730:s0 -> Node0x7fce5acbdfd0;
Trying to find element at offset 16
DSINKGEP INSTRUCTION   %neg5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 3, !dbg !418
[Sink:]   %neg5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 3, !dbg !418
StructType:::IS STRUCT TY:: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !417
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 16
	Node0x7fce5aec9730 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aec9730:s0 -> Node0x7fce5acbdfd0;
Trying to find element at offset 16
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !421
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !421
StructType: allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %n, align 8, !dbg !420
=>  %n = alloca %struct.bignum_st*, align 8
FINAL:   %n = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d32c190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d32c1e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d32c380
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d32c3d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d32c730
DSOURCEGEP INSTRUCTION   %d6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %14, i32 0, i32 0, !dbg !424
[Source:]   %d6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %14, i32 0, i32 0, !dbg !424
StructType: allocation intermediate:   %14 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !423
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7fce5d32c930
DSOURCEGEP INSTRUCTION   %top7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 1, !dbg !428
[Source:]   %top7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 1, !dbg !428
StructType: allocation intermediate:   %17 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !427
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7fce5d32c9d0
DSOURCEGEP INSTRUCTION   %top9 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %20, i32 0, i32 1, !dbg !434
[Source:]   %top9 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %20, i32 0, i32 1, !dbg !434
StructType: allocation intermediate:   %20 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !434
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7fce5d32c9d0
DSOURCEGEP INSTRUCTION   %top11 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %25, i32 0, i32 1, !dbg !434
[Source:]   %top11 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %25, i32 0, i32 1, !dbg !434
StructType: allocation intermediate:   %25 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !434
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7fce5d32c9d0
DSINKGEP INSTRUCTION   %top16 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %31, i32 0, i32 1, !dbg !437
[Sink:]   %top16 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %31, i32 0, i32 1, !dbg !437
StructType:::IS STRUCT TY:: allocation intermediate:   %31 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !436
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 8
	Node0x7fce5aec9730 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aec9730:s0 -> Node0x7fce5acbdfd0;
Trying to find element at offset 8
DSINKGEP INSTRUCTION   %top16 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %31, i32 0, i32 1, !dbg !437
[Sink:]   %top16 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %31, i32 0, i32 1, !dbg !437
StructType:::IS STRUCT TY:: allocation intermediate:   %31 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !436
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 8
	Node0x7fce5aec9730 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fce5aec9730:s0 -> Node0x7fce5acbdfd0;
Trying to find element at offset 8
DSOURCEGEP INSTRUCTION   %arrayidx18 = getelementptr inbounds [2 x i64], [2 x i64]* %n017, i32 0, i64 0, !dbg !439
[Source:]   %arrayidx18 = getelementptr inbounds [2 x i64], [2 x i64]* %n017, i32 0, i64 0, !dbg !439
ArrayType: allocation intermediate:   %n017 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %32, i32 0, i32 4, !dbg !440
=>  %32 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !439
 allocation intermediate:   %32 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !439
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d32c190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d32c1e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d32c380
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d32c3d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d32c730
DSOURCEGEP INSTRUCTION   %arrayidx21 = getelementptr inbounds i64, i64* %39, i64 0, !dbg !455
[Source:]   %arrayidx21 = getelementptr inbounds i64, i64* %39, i64 0, !dbg !455
 allocation intermediate:   %39 = load i64*, i64** %rp, align 8, !dbg !455
=>  %rp = alloca i64*, align 8
FINAL:   %rp = alloca i64*, align 8
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
DSOURCEGEP INSTRUCTION   %arrayidx25 = getelementptr inbounds i64, i64* %45, i64 %idxprom24, !dbg !464
[Source:]   %arrayidx25 = getelementptr inbounds i64, i64* %45, i64 %idxprom24, !dbg !464
DSOURCEGEP INSTRUCTION   %arrayidx28 = getelementptr inbounds i64, i64* %49, i64 %idxprom27, !dbg !469
[Source:]   %arrayidx28 = getelementptr inbounds i64, i64* %49, i64 %idxprom27, !dbg !469
DSOURCEGEP INSTRUCTION   %arrayidx33 = getelementptr inbounds i64, i64* %54, i64 %idxprom32, !dbg !475
[Source:]   %arrayidx33 = getelementptr inbounds i64, i64* %54, i64 %idxprom32, !dbg !475
DSINKGEP INSTRUCTION   %arrayidx38 = getelementptr inbounds i64, i64* %59, i64 %idxprom37, !dbg !481
[Sink:]   %arrayidx38 = getelementptr inbounds i64, i64* %59, i64 %idxprom37, !dbg !481
DSINKGEP INSTRUCTION   %arrayidx38 = getelementptr inbounds i64, i64* %59, i64 %idxprom37, !dbg !481
[Sink:]   %arrayidx38 = getelementptr inbounds i64, i64* %59, i64 %idxprom37, !dbg !481
DSINKGEP INSTRUCTION   %top44 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %65, i32 0, i32 1, !dbg !496
[Sink:]   %top44 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %65, i32 0, i32 1, !dbg !496
StructType:::IS STRUCT TY:: allocation intermediate:   %65 = load %struct.bignum_st*, %struct.bignum_st** %ret.addr, align 8, !dbg !495
=>  %ret.addr = alloca %struct.bignum_st*, align 8
FINAL:   %ret.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 8
	Node0x7fce5aecaff0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aecaff0:s0 -> Node0x7fce5acbdfd0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top44 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %65, i32 0, i32 1, !dbg !496
[Sink:]   %top44 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %65, i32 0, i32 1, !dbg !496
StructType:::IS STRUCT TY:: allocation intermediate:   %65 = load %struct.bignum_st*, %struct.bignum_st** %ret.addr, align 8, !dbg !495
=>  %ret.addr = alloca %struct.bignum_st*, align 8
FINAL:   %ret.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 8
	Node0x7fce5aecaff0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aecaff0:s0 -> Node0x7fce5acbdfd0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %neg45 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %66, i32 0, i32 3, !dbg !499
[Source:]   %neg45 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %66, i32 0, i32 3, !dbg !499
StructType: allocation intermediate:   %66 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !498
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[16,20]0x7fce5d32cb10
DSINKGEP INSTRUCTION   %neg46 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %68, i32 0, i32 3, !dbg !501
[Sink:]   %neg46 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %68, i32 0, i32 3, !dbg !501
StructType:::IS STRUCT TY:: allocation intermediate:   %68 = load %struct.bignum_st*, %struct.bignum_st** %ret.addr, align 8, !dbg !500
=>  %ret.addr = alloca %struct.bignum_st*, align 8
FINAL:   %ret.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 16
	Node0x7fce5aecaff0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aecaff0:s0 -> Node0x7fce5acbdfd0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg46 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %68, i32 0, i32 3, !dbg !501
[Sink:]   %neg46 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %68, i32 0, i32 3, !dbg !501
StructType:::IS STRUCT TY:: allocation intermediate:   %68 = load %struct.bignum_st*, %struct.bignum_st** %ret.addr, align 8, !dbg !500
=>  %ret.addr = alloca %struct.bignum_st*, align 8
FINAL:   %ret.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Tainting at offset: 16
	Node0x7fce5aecaff0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aecaff0:s0 -> Node0x7fce5acbdfd0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %d47 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %69, i32 0, i32 0, !dbg !504
[Source:]   %d47 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %69, i32 0, i32 0, !dbg !504
StructType: allocation intermediate:   %69 = load %struct.bignum_st*, %struct.bignum_st** %ret.addr, align 8, !dbg !503
=>  %ret.addr = alloca %struct.bignum_st*, align 8
FINAL:   %ret.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d32c190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d32c1e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d32c380
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d32c3d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d32c730
DSOURCEGEP INSTRUCTION   %d49 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %72, i32 0, i32 0, !dbg !508
[Source:]   %d49 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %72, i32 0, i32 0, !dbg !508
StructType: allocation intermediate:   %72 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !507
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7fce5d32c930
DSOURCEGEP INSTRUCTION   %arrayidx65 = getelementptr inbounds i64, i64* %91, i64 %idxprom64, !dbg !558
[Source:]   %arrayidx65 = getelementptr inbounds i64, i64* %91, i64 %idxprom64, !dbg !558
DSOURCEGEP INSTRUCTION   %arrayidx68 = getelementptr inbounds i64, i64* %94, i64 %idxprom67, !dbg !562
[Source:]   %arrayidx68 = getelementptr inbounds i64, i64* %94, i64 %idxprom67, !dbg !562
DSOURCEGEP INSTRUCTION   %arrayidx71 = getelementptr inbounds i64, i64* %97, i64 %idxprom70, !dbg !566
[Source:]   %arrayidx71 = getelementptr inbounds i64, i64* %97, i64 %idxprom70, !dbg !566
DSINKGEP INSTRUCTION   %arrayidx74 = getelementptr inbounds i64, i64* %100, i64 %idxprom73, !dbg !570
[Sink:]   %arrayidx74 = getelementptr inbounds i64, i64* %100, i64 %idxprom73, !dbg !570
DSINKGEP INSTRUCTION   %arrayidx74 = getelementptr inbounds i64, i64* %100, i64 %idxprom73, !dbg !570
[Sink:]   %arrayidx74 = getelementptr inbounds i64, i64* %100, i64 %idxprom73, !dbg !570
DSOURCEGEP INSTRUCTION   %arrayidx77 = getelementptr inbounds i64, i64* %102, i64 %idxprom76, !dbg !574
[Source:]   %arrayidx77 = getelementptr inbounds i64, i64* %102, i64 %idxprom76, !dbg !574
DSINKGEP INSTRUCTION   %arrayidx80 = getelementptr inbounds i64, i64* %105, i64 %idxprom79, !dbg !578
[Sink:]   %arrayidx80 = getelementptr inbounds i64, i64* %105, i64 %idxprom79, !dbg !578
DSINKGEP INSTRUCTION   %arrayidx80 = getelementptr inbounds i64, i64* %105, i64 %idxprom79, !dbg !578
[Sink:]   %arrayidx80 = getelementptr inbounds i64, i64* %105, i64 %idxprom79, !dbg !578
DSINKGEP INSTRUCTION   %arrayidx83 = getelementptr inbounds i64, i64* %108, i64 %idxprom82, !dbg !583
[Sink:]   %arrayidx83 = getelementptr inbounds i64, i64* %108, i64 %idxprom82, !dbg !583
DSINKGEP INSTRUCTION   %arrayidx83 = getelementptr inbounds i64, i64* %108, i64 %idxprom82, !dbg !583
[Sink:]   %arrayidx83 = getelementptr inbounds i64, i64* %108, i64 %idxprom82, !dbg !583
DSINKGEP INSTRUCTION   %arrayidx86 = getelementptr inbounds i64, i64* %110, i64 %idxprom85, !dbg !587
[Sink:]   %arrayidx86 = getelementptr inbounds i64, i64* %110, i64 %idxprom85, !dbg !587
DSINKGEP INSTRUCTION   %arrayidx86 = getelementptr inbounds i64, i64* %110, i64 %idxprom85, !dbg !587
[Sink:]   %arrayidx86 = getelementptr inbounds i64, i64* %110, i64 %idxprom85, !dbg !587
DSINKGEP INSTRUCTION   %arrayidx89 = getelementptr inbounds i64, i64* %113, i64 %idxprom88, !dbg !592
[Sink:]   %arrayidx89 = getelementptr inbounds i64, i64* %113, i64 %idxprom88, !dbg !592
DSINKGEP INSTRUCTION   %arrayidx89 = getelementptr inbounds i64, i64* %113, i64 %idxprom88, !dbg !592
[Sink:]   %arrayidx89 = getelementptr inbounds i64, i64* %113, i64 %idxprom88, !dbg !592
DSINKGEP INSTRUCTION   %arrayidx92 = getelementptr inbounds i64, i64* %115, i64 %idxprom91, !dbg !596
[Sink:]   %arrayidx92 = getelementptr inbounds i64, i64* %115, i64 %idxprom91, !dbg !596
DSINKGEP INSTRUCTION   %arrayidx92 = getelementptr inbounds i64, i64* %115, i64 %idxprom91, !dbg !596
[Sink:]   %arrayidx92 = getelementptr inbounds i64, i64* %115, i64 %idxprom91, !dbg !596
DSINKGEP INSTRUCTION   %arrayidx95 = getelementptr inbounds i64, i64* %118, i64 %idxprom94, !dbg !601
[Sink:]   %arrayidx95 = getelementptr inbounds i64, i64* %118, i64 %idxprom94, !dbg !601
DSINKGEP INSTRUCTION   %arrayidx95 = getelementptr inbounds i64, i64* %118, i64 %idxprom94, !dbg !601
[Sink:]   %arrayidx95 = getelementptr inbounds i64, i64* %118, i64 %idxprom94, !dbg !601
DSINKGEP INSTRUCTION   %arrayidx98 = getelementptr inbounds i64, i64* %121, i64 %idxprom97, !dbg !606
[Sink:]   %arrayidx98 = getelementptr inbounds i64, i64* %121, i64 %idxprom97, !dbg !606
DSINKGEP INSTRUCTION   %arrayidx98 = getelementptr inbounds i64, i64* %121, i64 %idxprom97, !dbg !606
[Sink:]   %arrayidx98 = getelementptr inbounds i64, i64* %121, i64 %idxprom97, !dbg !606
DSOURCEGEP INSTRUCTION   %arrayidx108 = getelementptr inbounds i64, i64* %127, i64 %idxprom107, !dbg !620
[Source:]   %arrayidx108 = getelementptr inbounds i64, i64* %127, i64 %idxprom107, !dbg !620
DSINKGEP INSTRUCTION   %arrayidx110 = getelementptr inbounds i64, i64* %130, i64 %idxprom109, !dbg !622
[Sink:]   %arrayidx110 = getelementptr inbounds i64, i64* %130, i64 %idxprom109, !dbg !622
DSINKGEP INSTRUCTION   %arrayidx110 = getelementptr inbounds i64, i64* %130, i64 %idxprom109, !dbg !622
[Sink:]   %arrayidx110 = getelementptr inbounds i64, i64* %130, i64 %idxprom109, !dbg !622
DSINKGEP INSTRUCTION   %arrayidx112 = getelementptr inbounds i64, i64* %132, i64 %idxprom111, !dbg !625
[Sink:]   %arrayidx112 = getelementptr inbounds i64, i64* %132, i64 %idxprom111, !dbg !625
DSINKGEP INSTRUCTION   %arrayidx112 = getelementptr inbounds i64, i64* %132, i64 %idxprom111, !dbg !625
[Sink:]   %arrayidx112 = getelementptr inbounds i64, i64* %132, i64 %idxprom111, !dbg !625
Running on BN_clear_free in context [BN_MONT_CTX_free ]
Using taint reachable signature for:   call void @OPENSSL_cleanse(i8* %5, i64 %mul), !dbg !384
RSINKGEP INSTRUCTION   %5 = bitcast i64* %4 to i8*, !dbg !378
REACHABLE SOURCE:   %5 = bitcast i64* %4 to i8*, !dbg !378
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %5 = bitcast i64* %4 to i8*, !dbg !378
Using taint reachable signature for:   call void @OPENSSL_cleanse(i8* %12, i64 24), !dbg !396
RSINKGEP INSTRUCTION   %12 = bitcast %struct.bignum_st* %11 to i8*, !dbg !395
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %12 = bitcast %struct.bignum_st* %11 to i8*, !dbg !395
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
RSINKGEP INSTRUCTION   %12 = bitcast %struct.bignum_st* %11 to i8*, !dbg !395
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   call void @CRYPTO_free(i8* %15, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 195), !dbg !400
RSINKGEP INSTRUCTION   %15 = bitcast %struct.bignum_st* %14 to i8*, !dbg !400
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Creating ConsElem Map for :	Node0x7fce5aeb9f50 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
REACHABLE SOURCE:   %15 = bitcast %struct.bignum_st* %14 to i8*, !dbg !400
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
	Node0x7fce5aeb9f50 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %15 = bitcast %struct.bignum_st* %14 to i8*, !dbg !400
Added child elem: 	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Creating ConsElem Map for :	Node0x7fce5aed2150 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aed2150:s0 -> Node0x7fce5aed17f0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aed17f0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aed17f0:s0 -> Node0x7fce5adce7e0;
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 0, !dbg !375
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 0, !dbg !375
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !373
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d2aba20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d2aba70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d2abed0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d2abf90
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d2abfe0
DSOURCEGEP INSTRUCTION   %d3 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !380
[Source:]   %d3 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !380
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d2aba20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d2aba70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d2abed0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d2abf90
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d2abfe0
DSOURCEGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 2, !dbg !382
[Source:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 2, !dbg !382
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !381
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d2aba20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d2aba70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d2abed0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d2abf90
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d2abfe0
Creating ConsElem Map for :	Node0x7fce5aed2260 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Running on bn_wexpand in context [MOD_EXP_CTIME_COPY_FROM_PREBUF ]
DSOURCEGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !370
[Source:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !370
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !369
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d20cb00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d20cb50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d20cba0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d20cce0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d20cd30
Running on constant_time_eq_int in context [MOD_EXP_CTIME_COPY_FROM_PREBUF ]
Creating ConsElem Map for :	Node0x7fce5aee81c0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aee82e0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Running on bn_correct_top in context [MOD_EXP_CTIME_COPY_FROM_PREBUF ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !371
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !371
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !370
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d038560
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d0389c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d038a10
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d038bb0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d038c00
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !380
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !380
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !379
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d038560
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d0389c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d038a10
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d038bb0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d038c00
DSINKGEP INSTRUCTION   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !400
[Sink:]   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !400
StructType:::IS STRUCT TY:: allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !399
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5acbded0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbded0:s0 -> Node0x7fce5acbc780;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !400
[Sink:]   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !400
StructType:::IS STRUCT TY:: allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !399
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5acbded0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbded0:s0 -> Node0x7fce5acbc780;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %13, i32 0, i32 1, !dbg !405
[Source:]   %top6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %13, i32 0, i32 1, !dbg !405
StructType: allocation intermediate:   %13 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !403
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d038560
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d0389c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d038a10
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d038bb0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d038c00
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !409
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !409
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !408
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fce5acbded0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbded0:s0 -> Node0x7fce5acbc780;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !409
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !409
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !408
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fce5acbded0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbded0:s0 -> Node0x7fce5acbc780;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Running on bn_expand2 in context [bn_expand ]
Using taint reachable signature for:   call void @OPENSSL_cleanse(i8* %10, i64 %mul), !dbg !394
RSINKGEP INSTRUCTION   %10 = bitcast i64* %9 to i8*, !dbg !388
REACHABLE SOURCE:   %10 = bitcast i64* %9 to i8*, !dbg !388
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %10 = bitcast i64* %9 to i8*, !dbg !388
DSOURCEGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !371
[Source:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !371
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !370
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d298190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d2985b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d298600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d298650
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d298670
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !386
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !386
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !384
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d298190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d2985b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d298600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d298650
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d298670
DSOURCEGEP INSTRUCTION   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !390
[Source:]   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !390
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !388
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d298190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d2985b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d298600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d298650
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d298670
DSOURCEGEP INSTRUCTION   %dmax5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %11, i32 0, i32 2, !dbg !392
[Source:]   %dmax5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %11, i32 0, i32 2, !dbg !392
StructType: allocation intermediate:   %11 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !391
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d298190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d2985b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d298600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d298650
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d298670
DSINKGEP INSTRUCTION   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !400
[Sink:]   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !400
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !399
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x7fce5adc42d0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5adc42d0:s0 -> Node0x7fce5adc0a30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !400
[Sink:]   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !400
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !399
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x7fce5adc42d0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5adc42d0:s0 -> Node0x7fce5adc0a30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !404
[Sink:]   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !404
StructType:::IS STRUCT TY:: allocation intermediate:   %17 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !403
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 12
	Node0x7fce5adc42d0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5adc42d0:s0 -> Node0x7fce5adc0a30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 12
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !404
[Sink:]   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !404
StructType:::IS STRUCT TY:: allocation intermediate:   %17 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !403
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 12
	Node0x7fce5adc42d0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5adc42d0:s0 -> Node0x7fce5adc0a30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 12
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Running on bn_init in context [BN_MONT_CTX_init ]
Running on bn_wexpand in context [BN_copy ]
DSOURCEGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !370
[Source:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !370
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !369
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d20cb00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d20cb50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d20cba0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d20cce0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d20cd30
Running on BN_get_flags in context [BN_copy ]
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !369
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !369
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !368
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d1165b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d116690
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d116770
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d116850
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d11ef30
Running on BN_set_flags in context [BN_copy ]
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !370
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !370
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !369
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d27a840
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d27a860
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d27a8e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d27aa20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d27aa40
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !370
[Sink:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !370
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !369
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 20
	Node0x7fce5acbd8a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbd8a0:s0 -> Node0x7fce5acbe660;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 20
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !370
[Sink:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !370
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !369
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 20
	Node0x7fce5acbd8a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbd8a0:s0 -> Node0x7fce5acbe660;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 20
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Running on bn_wexpand in context [BN_set_bit ]
DSOURCEGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !370
[Source:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !370
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !369
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d20cb00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d20cb50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d20cba0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d20cce0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d20cd30
Running on bn_wexpand in context [BN_from_montgomery_word ]
DSOURCEGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !370
[Source:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !370
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !369
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d20cb00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d20cb50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d20cba0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d20cce0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d20cd30
Running on bn_correct_top in context [BN_from_montgomery_word ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !371
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !371
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !370
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d038560
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d0389c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d038a10
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d038bb0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d038c00
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !380
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !380
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !379
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d038560
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d0389c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d038a10
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d038bb0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d038c00
DSINKGEP INSTRUCTION   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !400
[Sink:]   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !400
StructType:::IS STRUCT TY:: allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !399
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5acbded0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbded0:s0 -> Node0x7fce5acbc780;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !400
[Sink:]   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !400
StructType:::IS STRUCT TY:: allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !399
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fce5acbded0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbded0:s0 -> Node0x7fce5acbc780;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %13, i32 0, i32 1, !dbg !405
[Source:]   %top6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %13, i32 0, i32 1, !dbg !405
StructType: allocation intermediate:   %13 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !403
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d038560
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d0389c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d038a10
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d038bb0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d038c00
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !409
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !409
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !408
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fce5acbded0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbded0:s0 -> Node0x7fce5acbc780;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !409
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !409
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !408
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fce5acbded0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5acbded0:s0 -> Node0x7fce5acbc780;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Adding 1 elements
Running on bn_expand_internal in context [bn_expand2 ]
Using taint reachable signature for:   call void @ERR_put_error(i32 3, i32 120, i32 114, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 255), !dbg !380
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
	Node0x7fce5aeb9f50 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Using taint reachable signature for:   call void @ERR_put_error(i32 3, i32 120, i32 105, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 259), !dbg !387
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
	Node0x7fce5aeb9f50 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Using taint reachable signature for:   %call6 = call i8* @CRYPTO_secure_zalloc(i64 %mul, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 263), !dbg !394
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
	Node0x7fce5aeb9f50 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Using taint reachable signature for:   %call9 = call i8* @CRYPTO_zalloc(i64 %mul8, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 265), !dbg !398
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
	Node0x7fce5aeb9f50 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Using taint reachable signature for:   call void @ERR_put_error(i32 3, i32 120, i32 65, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 267), !dbg !405
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
	Node0x7fce5aeb9f50 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Creating ConsElem Map for :	Node0x7fce5aeb9450 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aeb9450:s0 -> Node0x7fce5aeb6620;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aeb6620 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb6620:s0 -> Node0x7fce5aeb5e00;
Creating ConsElem Map for :	Node0x7fce5aeb9590 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aeb97d0 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aeb97d0:s0 -> Node0x7fce5aeb5e00;
EDGE: [0: tymap-size 1]:i64
	Node0x7fce5aeb5e00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x7fce5aeb9310 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aeb9310:s0 -> Node0x7fce5aeb5e00;
EDGE: [0: tymap-size 1]:i64
	Node0x7fce5aeb5e00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x7fce5aeb9690 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aeb9690:s0 -> Node0x7fce5aeb5e00;
EDGE: [0: tymap-size 1]:i64
	Node0x7fce5aeb5e00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !409
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !409
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !408
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d2b8410
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d2b85b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d2b8600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d2b87a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d2b87f0
Creating ConsElem Map for :	Node0x7fce5aeb9910 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aeb9910:s0 -> Node0x7fce5aeb5e00;
EDGE: [0: tymap-size 1]:i64
	Node0x7fce5aeb5e00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %11, i32 0, i32 1, !dbg !418
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %11, i32 0, i32 1, !dbg !418
StructType: allocation intermediate:   %11 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !415
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d2b8410
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d2b85b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d2b8600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d2b87a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d2b87f0
Creating ConsElem Map for :	Node0x7fce5aeb9a50 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %14, i64 0, !dbg !435
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %14, i64 0, !dbg !435
 allocation intermediate:   %14 = load i64*, i64** %B, align 8, !dbg !435
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
Creating ConsElem Map for :	Node0x7fce5aeb9b50 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx20 = getelementptr inbounds i64, i64* %16, i64 1, !dbg !437
[Source:]   %arrayidx20 = getelementptr inbounds i64, i64* %16, i64 1, !dbg !437
 allocation intermediate:   %16 = load i64*, i64** %B, align 8, !dbg !437
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
Creating ConsElem Map for :	Node0x7fce5aeb9c50 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx21 = getelementptr inbounds i64, i64* %18, i64 2, !dbg !439
[Source:]   %arrayidx21 = getelementptr inbounds i64, i64* %18, i64 2, !dbg !439
 allocation intermediate:   %18 = load i64*, i64** %B, align 8, !dbg !439
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
Creating ConsElem Map for :	Node0x7fce5aeb9d50 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx22 = getelementptr inbounds i64, i64* %20, i64 3, !dbg !441
[Source:]   %arrayidx22 = getelementptr inbounds i64, i64* %20, i64 3, !dbg !441
 allocation intermediate:   %20 = load i64*, i64** %B, align 8, !dbg !441
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 3
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
Creating ConsElem Map for :	Node0x7fce5aeb9e50 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSINKGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds i64, i64* %23, i64 0, !dbg !444
[Sink:]   %arrayidx23 = getelementptr inbounds i64, i64* %23, i64 0, !dbg !444
 allocation intermediate:   %23 = load i64*, i64** %A, align 8, !dbg !444
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
Created 1 constraint variable(s) for node of size 1
	Node0x7fce5aeb5e00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds i64, i64* %23, i64 0, !dbg !444
[Sink:]   %arrayidx23 = getelementptr inbounds i64, i64* %23, i64 0, !dbg !444
 allocation intermediate:   %23 = load i64*, i64** %A, align 8, !dbg !444
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fce5aeb5e00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx24 = getelementptr inbounds i64, i64* %25, i64 1, !dbg !447
[Sink:]   %arrayidx24 = getelementptr inbounds i64, i64* %25, i64 1, !dbg !447
 allocation intermediate:   %25 = load i64*, i64** %A, align 8, !dbg !447
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5aeb5e00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx24 = getelementptr inbounds i64, i64* %25, i64 1, !dbg !447
[Sink:]   %arrayidx24 = getelementptr inbounds i64, i64* %25, i64 1, !dbg !447
 allocation intermediate:   %25 = load i64*, i64** %A, align 8, !dbg !447
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5aeb5e00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx25 = getelementptr inbounds i64, i64* %27, i64 2, !dbg !450
[Sink:]   %arrayidx25 = getelementptr inbounds i64, i64* %27, i64 2, !dbg !450
 allocation intermediate:   %27 = load i64*, i64** %A, align 8, !dbg !450
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fce5aeb5e00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx25 = getelementptr inbounds i64, i64* %27, i64 2, !dbg !450
[Sink:]   %arrayidx25 = getelementptr inbounds i64, i64* %27, i64 2, !dbg !450
 allocation intermediate:   %27 = load i64*, i64** %A, align 8, !dbg !450
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fce5aeb5e00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx26 = getelementptr inbounds i64, i64* %29, i64 3, !dbg !453
[Sink:]   %arrayidx26 = getelementptr inbounds i64, i64* %29, i64 3, !dbg !453
 allocation intermediate:   %29 = load i64*, i64** %A, align 8, !dbg !453
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 3
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 3
	Node0x7fce5aeb5e00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx26 = getelementptr inbounds i64, i64* %29, i64 3, !dbg !453
[Sink:]   %arrayidx26 = getelementptr inbounds i64, i64* %29, i64 3, !dbg !453
 allocation intermediate:   %29 = load i64*, i64** %A, align 8, !dbg !453
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 3
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 3
	Node0x7fce5aeb5e00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top28 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %33, i32 0, i32 1, !dbg !461
[Source:]   %top28 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %33, i32 0, i32 1, !dbg !461
StructType: allocation intermediate:   %33 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !460
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d2b8410
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d2b85b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d2b8600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d2b87a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d2b87f0
DSOURCEGEP INSTRUCTION   %arrayidx29 = getelementptr inbounds i64, i64* %35, i64 2, !dbg !464
[Source:]   %arrayidx29 = getelementptr inbounds i64, i64* %35, i64 2, !dbg !464
 allocation intermediate:   %35 = load i64*, i64** %B, align 8, !dbg !464
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 2
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fce5d2bb710
DSINKGEP INSTRUCTION   %arrayidx30 = getelementptr inbounds i64, i64* %37, i64 2, !dbg !466
[Sink:]   %arrayidx30 = getelementptr inbounds i64, i64* %37, i64 2, !dbg !466
 allocation intermediate:   %37 = load i64*, i64** %A, align 8, !dbg !466
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fce5aeb5e00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx30 = getelementptr inbounds i64, i64* %37, i64 2, !dbg !466
[Sink:]   %arrayidx30 = getelementptr inbounds i64, i64* %37, i64 2, !dbg !466
 allocation intermediate:   %37 = load i64*, i64** %A, align 8, !dbg !466
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fce5aeb5e00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx32 = getelementptr inbounds i64, i64* %38, i64 1, !dbg !468
[Source:]   %arrayidx32 = getelementptr inbounds i64, i64* %38, i64 1, !dbg !468
 allocation intermediate:   %38 = load i64*, i64** %B, align 8, !dbg !468
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fce5d2bb710
DSINKGEP INSTRUCTION   %arrayidx33 = getelementptr inbounds i64, i64* %40, i64 1, !dbg !469
[Sink:]   %arrayidx33 = getelementptr inbounds i64, i64* %40, i64 1, !dbg !469
 allocation intermediate:   %40 = load i64*, i64** %A, align 8, !dbg !469
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5aeb5e00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx33 = getelementptr inbounds i64, i64* %40, i64 1, !dbg !469
[Sink:]   %arrayidx33 = getelementptr inbounds i64, i64* %40, i64 1, !dbg !469
 allocation intermediate:   %40 = load i64*, i64** %A, align 8, !dbg !469
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fce5aeb5e00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx35 = getelementptr inbounds i64, i64* %41, i64 0, !dbg !471
[Source:]   %arrayidx35 = getelementptr inbounds i64, i64* %41, i64 0, !dbg !471
 allocation intermediate:   %41 = load i64*, i64** %B, align 8, !dbg !471
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fce5aeb2b40
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fce5d2bb710
DSINKGEP INSTRUCTION   %arrayidx36 = getelementptr inbounds i64, i64* %43, i64 0, !dbg !472
[Sink:]   %arrayidx36 = getelementptr inbounds i64, i64* %43, i64 0, !dbg !472
 allocation intermediate:   %43 = load i64*, i64** %A, align 8, !dbg !472
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fce5aeb5e00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx36 = getelementptr inbounds i64, i64* %43, i64 0, !dbg !472
[Sink:]   %arrayidx36 = getelementptr inbounds i64, i64* %43, i64 0, !dbg !472
 allocation intermediate:   %43 = load i64*, i64** %A, align 8, !dbg !472
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fce5aeb5e00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Running on bn_free_d in context [bn_expand2 ]
Using taint reachable signature for:   call void @CRYPTO_secure_free(i8* %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 174), !dbg !370
RSINKGEP INSTRUCTION   %3 = bitcast i64* %2 to i8*, !dbg !370
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE:   %3 = bitcast i64* %2 to i8*, !dbg !370
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb9f50 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %3 = bitcast i64* %2 to i8*, !dbg !370
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Using taint reachable signature for:   call void @CRYPTO_free(i8* %6, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 176), !dbg !371
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
RSINKGEP INSTRUCTION   %6 = bitcast i64* %5 to i8*, !dbg !371
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE:   %6 = bitcast i64* %5 to i8*, !dbg !371
	Node0x7fce5aeb9f50 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
RSINKGEP INSTRUCTION   %6 = bitcast i64* %5 to i8*, !dbg !371
Creating ConsElem Map for :	Node0x7fce5aeb8280 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fce5aeb8280:s0 -> Node0x7fce5aeb9170;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fce5aeb9170 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb9170:s0 -> Node0x7fce5aeb7080;
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 0, !dbg !370
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 0, !dbg !370
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !370
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d356080
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d3560d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d356120
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d356140
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d356290
DSOURCEGEP INSTRUCTION   %d1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !371
[Source:]   %d1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !371
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !371
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d356080
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d3560d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d356120
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d356140
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d356290
Running on BN_get_flags in context [BN_clear_free ]
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !369
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !369
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !368
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d1165b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d116690
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d116770
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d116850
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d11ef30
Running on bn_free_d in context [BN_clear_free ]
Using taint reachable signature for:   call void @CRYPTO_secure_free(i8* %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 174), !dbg !370
RSINKGEP INSTRUCTION   %3 = bitcast i64* %2 to i8*, !dbg !370
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE:   %3 = bitcast i64* %2 to i8*, !dbg !370
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fce5aeb9f50 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %3 = bitcast i64* %2 to i8*, !dbg !370
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Using taint reachable signature for:   call void @CRYPTO_free(i8* %6, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 176), !dbg !371
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
RSINKGEP INSTRUCTION   %6 = bitcast i64* %5 to i8*, !dbg !371
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE:   %6 = bitcast i64* %5 to i8*, !dbg !371
	Node0x7fce5aeb9f50 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
	Node0x7fce5adc50a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
RSINKGEP INSTRUCTION   %6 = bitcast i64* %5 to i8*, !dbg !371
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 0, !dbg !370
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 0, !dbg !370
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !370
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d356080
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d3560d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d356120
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d356140
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d356290
DSOURCEGEP INSTRUCTION   %d1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !371
[Source:]   %d1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !371
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !371
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d356080
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d3560d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d356120
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d356140
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d356290
Running on constant_time_eq in context [constant_time_eq_int ]
Creating ConsElem Map for :	Node0x7fce5aee84b0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fce5aee85d0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Running on BN_get_flags in context [bn_expand_internal ]
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !369
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !369
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !368
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d1165b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d116690
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d116770
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d116850
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d11ef30
Running on BN_get_flags in context [bn_free_d ]
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !369
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !369
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !368
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fce5d01d600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fce5d1165b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fce5d116690
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fce5d116770
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fce5d116850
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fce5d11ef30
Running on constant_time_is_zero in context [constant_time_eq ]
Creating ConsElem Map for :	Node0x7fce5aee87a0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Running on constant_time_msb in context [constant_time_is_zero ]
Creating ConsElem Map for :	Node0x7fce5aee8a00 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Running on bn2binpad in context []
Trying to constrain p at 0 for value : p
%struct.bignum_st* %p
%struct.bignum_st* %p
 has 5 elements.
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
FOUND 2 elements from the locsForValue
Number of elements to constrain: 2
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default: : addr 0x7fce5aeb2b40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default: : addr 0x7fce5d01d600
Trying to constrain p at 0 for value : p
%struct.bignum_st* %p
%struct.bignum_st* %p
 has 5 elements.
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
FOUND 2 elements from the locsForValue
Number of elements to constrain: 2
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default: : addr 0x7fce5aeb2b40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default: : addr 0x7fce5d01d600
DONE
Trying to constrain m at 0 for value : m
  %m = alloca i64, align 8
  %m = alloca i64, align 8
 has 1 elements.
	Node0x7fce5aeca850 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Trying to find element at offset 0
FOUND 1 elements from the locsForValue
Number of elements to constrain: 1
0: i64,  : SCMR: elem 0:default: : addr 0x7fce5d334210
Trying to constrain m at 0 for value : m
%struct.bignum_st* %m
%struct.bignum_st* %m
 has 5 elements.
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
FOUND 2 elements from the locsForValue
Number of elements to constrain: 2
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default: : addr 0x7fce5aeb2b40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default: : addr 0x7fce5d01d600
Trying to constrain m at 0 for value : m
%struct.bignum_st* %m
%struct.bignum_st* %m
 has 5 elements.
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
FOUND 2 elements from the locsForValue
Number of elements to constrain: 2
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default: : addr 0x7fce5aeb2b40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default: : addr 0x7fce5d01d600
DONE
Trying to constrain p at 0 for value : p
%struct.bignum_st* %p
%struct.bignum_st* %p
 has 5 elements.
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
FOUND 2 elements from the locsForValue
Number of elements to constrain: 2
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default: : addr 0x7fce5aeb2b40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default: : addr 0x7fce5d01d600
Trying to constrain p at 0 for value : p
%struct.bignum_st* %p
%struct.bignum_st* %p
 has 5 elements.
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
FOUND 2 elements from the locsForValue
Number of elements to constrain: 2
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default: : addr 0x7fce5aeb2b40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default: : addr 0x7fce5d01d600
DONE
Trying to constrain m at 0 for value : m
  %m = alloca i64, align 8
  %m = alloca i64, align 8
 has 1 elements.
	Node0x7fce5aeca850 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Trying to find element at offset 0
FOUND 1 elements from the locsForValue
Number of elements to constrain: 1
0: i64,  : SCMR: elem 0:default: : addr 0x7fce5d334210
Trying to constrain m at 0 for value : m
%struct.bignum_st* %m
%struct.bignum_st* %m
 has 5 elements.
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
FOUND 2 elements from the locsForValue
Number of elements to constrain: 2
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default: : addr 0x7fce5aeb2b40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default: : addr 0x7fce5d01d600
Trying to constrain m at 0 for value : m
%struct.bignum_st* %m
%struct.bignum_st* %m
 has 5 elements.
	Node0x7fce5aeb5c00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fce5aeb5c00:s0 -> Node0x7fce5adc50a0;
FOUND 2 elements from the locsForValue
Number of elements to constrain: 2
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default: : addr 0x7fce5aeb2b40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default: : addr 0x7fce5d01d600
DONE
Removing values tied to bits
Size of vector 19082
Constraint to find 0: i32,  : SCMR: elem 0:default:
Constraint erased: 0: i32,  : SCMR: elem 0:default:
Constraint erased: 0: i32,  : SCMR: elem 0:default:
Constraint erased: 0: i32,  : SCMR: elem 0:default:
Constraint erased: 0: i32,  : SCMR: elem 0:default:
Size of vector 19078
Constraint to find 0: i32,  : SCMR: elem 0:default:
Constraint erased: 0: i32,  : SCMR: elem 0:default:
Removing values tied to bits
Size of vector 19077
Constraint to find 0: i32,  : SCMR: elem 0:default:
Size of vector 19077
Constraint to find 0: i32,  : SCMR: elem 0:default:
#--------------Results------------------
bn_exp.c line 318
bn_exp.c line 319
bn_exp.c line 317
bn_exp.c line 327
bn_exp.c line 334
bn_exp.c line 347
bn_exp.c line 347
bn_exp.c line 347
bn_exp.c line 357
bn_exp.c line 363
bn_exp.c line 363
bn_exp.c line 364
bn_exp.c line 369
bn_exp.c line 382
bn_exp.c line 383
bn_exp.c line 398
bn_exp.c line 399
bn_exp.c line 403
bn_exp.c line 416
bn_exp.c line 437
bn_exp.c line 448
bn_exp.c line 621
bn_exp.c line 631
bn_exp.c line 649
bn_exp.c line 709
bn_exp.c line 712
bn_exp.c line 717
bn_exp.c line 726
bn_exp.c line 740
bn_exp.c line 743
bn_exp.c line 752
bn_exp.c line 752
bn_exp.c line 753
bn_exp.c line 1089
bn_exp.c line 522
bn_exp.c line 525
bn_exp.c line 540
bn_exp.c line 544
bn_exp.c line 566
bn_lib.c line 111
bn_lib.c line 112
bn_lib.c line 113
bn_lib.c line 118
bn_lib.c line 143
bn_lib.c line 144
bn_lib.c line 152
bn_lib.c line 166
bn_lib.c line 184
bn_lib.c line 187
bn_lib.c line 189
bn_lib.c line 194
bn_lib.c line 330
bn_lib.c line 332
bn_lib.c line 334
bn_lib.c line 373
bn_lib.c line 375
bn_lib.c line 381
bn_lib.c line 409
bn_lib.c line 1027
bn_lib.c line 475
bn_lib.c line 1035
bn_lib.c line 1036
bn_lib.c line 1038
bn_lib.c line 1043
bn_lib.c line 641
bn_lib.c line 645
bn_lib.c line 648
bn_lib.c line 705
bn_lib.c line 710
bn_lib.c line 711
bn_lib.c line 713
bn_lib.c line 750
bn_lib.c line 926
bn_lib.c line 926
bn_lib.c line 936
bn_lib.c line 946
bn_lib.c line 173
bn_lib.c line 254
bn_lib.c line 258
bn_lib.c line 262
bn_lib.c line 266
bn_lib.c line 274
bn_lib.c line 275
include/bn_lcl.h line 679
bn_mont.c line 48
bn_mont.c line 52
bn_mont.c line 53
bn_mont.c line 56
bn_mont.c line 174
bn_mont.c line 174
bn_mont.c line 217
bn_mont.c line 237
bn_mont.c line 243
bn_mont.c line 252
bn_mont.c line 256
bn_mont.c line 259
bn_mont.c line 273
bn_mont.c line 329
bn_mont.c line 331
bn_mont.c line 333
bn_mont.c line 334
bn_mont.c line 341
bn_mont.c line 346
bn_mont.c line 375
bn_mont.c line 83
bn_mont.c line 89
bn_mont.c line 98
bn_mont.c line 104
bn_mont.c line 112
bn_mont.c line 135
bn_mont.c line 151
#--------------Statistics----------------
:: Tainted Branches: 111
:: Branch Instructions: 1056
:: Conditional Branches: 429
:: Vulnerable Branches: 10.51% [111/1056]
