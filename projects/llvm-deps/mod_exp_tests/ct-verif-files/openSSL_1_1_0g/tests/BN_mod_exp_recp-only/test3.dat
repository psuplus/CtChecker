Args: ../../../..//Debug+Asserts/bin/opt -load ../../../..//projects/poolalloc/Debug+Asserts/lib/LLVMDataStructure.dylib -load ../../../..//projects/llvm-deps/Debug+Asserts/lib/Constraints.dylib -load ../../../..//projects/llvm-deps/Debug+Asserts/lib/sourcesinkanalysis.dylib -load ../../../..//projects/llvm-deps/Debug+Asserts/lib/pointstointerface.dylib -load ../../../..//projects/llvm-deps/Debug+Asserts/lib/Deps.dylib -load ../../../..//projects/llvm-deps/Debug+Asserts/lib/Security.dylib -vulnerablebranch -debug 

Features:+64bit,+sse2
CPU:generic

Subtarget features: SSELevel 3, 3DNowLevel 0, 64bit 1
Merged 13 call nodes.
Merged 5 call nodes.
Merged 6 call nodes.
Merged 4 call nodes.
Merged 6 call nodes.
Merged 5 call nodes.
Merged 1 call nodes.
Attempting to merge two chunks of the same node together!
Merged 3 call nodes.
Merged 2 call nodes.
Merged 2 call nodes.
Merged 2 call nodes.
Merged 2 call nodes.
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_RECP_CTX_set
Removing llvm.dbg.declare from BN_RECP_CTX_set
Removing llvm.dbg.declare from BN_RECP_CTX_set
Removing llvm.dbg.declare from BN_RECP_CTX_free
Removing llvm.dbg.declare from BN_RECP_CTX_new
Removing llvm.dbg.declare from BN_RECP_CTX_init
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_copy
Removing llvm.dbg.declare from BN_MONT_CTX_copy
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_free
Removing llvm.dbg.declare from BN_MONT_CTX_init
Removing llvm.dbg.declare from BN_MONT_CTX_new
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from bn_free_d
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand
Removing llvm.dbg.declare from bn_expand
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from BN_GENCB_get_arg
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_free
Removing llvm.dbg.declare from BN_GENCB_new
Removing llvm.dbg.declare from BN_with_flags
Removing llvm.dbg.declare from BN_with_flags
Removing llvm.dbg.declare from BN_with_flags
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_is_negative
Removing llvm.dbg.declare from BN_is_odd
Removing llvm.dbg.declare from BN_is_word
Removing llvm.dbg.declare from BN_is_word
Removing llvm.dbg.declare from BN_is_one
Removing llvm.dbg.declare from BN_abs_is_word
Removing llvm.dbg.declare from BN_abs_is_word
Removing llvm.dbg.declare from BN_zero_ex
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from BN_set_negative
Removing llvm.dbg.declare from BN_set_negative
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_bn2bin
Removing llvm.dbg.declare from BN_bn2bin
Removing llvm.dbg.declare from BN_bn2binpad
Removing llvm.dbg.declare from BN_bn2binpad
Removing llvm.dbg.declare from BN_bn2binpad
Removing llvm.dbg.declare from bn_correct_top
Removing llvm.dbg.declare from bn_correct_top
Removing llvm.dbg.declare from bn_correct_top
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_set_word
Removing llvm.dbg.declare from BN_set_word
Removing llvm.dbg.declare from BN_get_word
Removing llvm.dbg.declare from BN_clear
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_set_flags
Removing llvm.dbg.declare from BN_set_flags
Removing llvm.dbg.declare from bn_wexpand
Removing llvm.dbg.declare from bn_wexpand
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_dup
Removing llvm.dbg.declare from BN_dup
Removing llvm.dbg.declare from bn_expand2
Removing llvm.dbg.declare from bn_expand2
Removing llvm.dbg.declare from bn_expand2
Removing llvm.dbg.declare from BN_secure_new
Removing llvm.dbg.declare from BN_new
Removing llvm.dbg.declare from bn_init
Removing llvm.dbg.declare from BN_free
Removing llvm.dbg.declare from BN_get_flags
Removing llvm.dbg.declare from BN_get_flags
Removing llvm.dbg.declare from BN_clear_free
Removing llvm.dbg.declare from BN_clear_free
Removing llvm.dbg.declare from BN_is_zero
Removing llvm.dbg.declare from BN_num_bits
Removing llvm.dbg.declare from BN_num_bits
Removing llvm.dbg.declare from BN_num_bits_word
Removing llvm.dbg.declare from BN_get_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from constant_time_eq_int
Removing llvm.dbg.declare from constant_time_eq_int
Removing llvm.dbg.declare from constant_time_eq
Removing llvm.dbg.declare from constant_time_eq
Removing llvm.dbg.declare from constant_time_is_zero
Removing llvm.dbg.declare from constant_time_msb
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.objectsize.i64.p0i8 from BN_RECP_CTX_init
Removing llvm.objectsize.i64.p0i8 from BN_from_montgomery_word
Removing llvm.objectsize.i64.p0i8 from bn2binpad
Removing llvm.objectsize.i64.p0i8 from BN_bn2lebinpad
Removing llvm.objectsize.i64.p0i8 from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_RECP_CTX_set
Removing llvm.dbg.declare from BN_RECP_CTX_set
Removing llvm.dbg.declare from BN_RECP_CTX_set
Removing llvm.dbg.declare from BN_RECP_CTX_free
Removing llvm.dbg.declare from BN_RECP_CTX_new
Removing llvm.dbg.declare from BN_RECP_CTX_init
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_copy
Removing llvm.dbg.declare from BN_MONT_CTX_copy
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_free
Removing llvm.dbg.declare from BN_MONT_CTX_init
Removing llvm.dbg.declare from BN_MONT_CTX_new
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from bn_free_d
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand
Removing llvm.dbg.declare from bn_expand
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from BN_GENCB_get_arg
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_free
Removing llvm.dbg.declare from BN_GENCB_new
Removing llvm.dbg.declare from BN_with_flags
Removing llvm.dbg.declare from BN_with_flags
Removing llvm.dbg.declare from BN_with_flags
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_is_negative
Removing llvm.dbg.declare from BN_is_odd
Removing llvm.dbg.declare from BN_is_word
Removing llvm.dbg.declare from BN_is_word
Removing llvm.dbg.declare from BN_is_one
Removing llvm.dbg.declare from BN_abs_is_word
Removing llvm.dbg.declare from BN_abs_is_word
Removing llvm.dbg.declare from BN_zero_ex
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from BN_set_negative
Removing llvm.dbg.declare from BN_set_negative
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_bn2bin
Removing llvm.dbg.declare from BN_bn2bin
Removing llvm.dbg.declare from BN_bn2binpad
Removing llvm.dbg.declare from BN_bn2binpad
Removing llvm.dbg.declare from BN_bn2binpad
Removing llvm.dbg.declare from bn_correct_top
Removing llvm.dbg.declare from bn_correct_top
Removing llvm.dbg.declare from bn_correct_top
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_set_word
Removing llvm.dbg.declare from BN_set_word
Removing llvm.dbg.declare from BN_get_word
Removing llvm.dbg.declare from BN_clear
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_set_flags
Removing llvm.dbg.declare from BN_set_flags
Removing llvm.dbg.declare from bn_wexpand
Removing llvm.dbg.declare from bn_wexpand
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_dup
Removing llvm.dbg.declare from BN_dup
Removing llvm.dbg.declare from bn_expand2
Removing llvm.dbg.declare from bn_expand2
Removing llvm.dbg.declare from bn_expand2
Removing llvm.dbg.declare from BN_secure_new
Removing llvm.dbg.declare from BN_new
Removing llvm.dbg.declare from bn_init
Removing llvm.dbg.declare from BN_free
Removing llvm.dbg.declare from BN_get_flags
Removing llvm.dbg.declare from BN_get_flags
Removing llvm.dbg.declare from BN_clear_free
Removing llvm.dbg.declare from BN_clear_free
Removing llvm.dbg.declare from BN_is_zero
Removing llvm.dbg.declare from BN_num_bits
Removing llvm.dbg.declare from BN_num_bits
Removing llvm.dbg.declare from BN_num_bits_word
Removing llvm.dbg.declare from BN_get_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from constant_time_eq_int
Removing llvm.dbg.declare from constant_time_eq_int
Removing llvm.dbg.declare from constant_time_eq
Removing llvm.dbg.declare from constant_time_eq
Removing llvm.dbg.declare from constant_time_is_zero
Removing llvm.dbg.declare from constant_time_msb
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Visiting single node SCC #: 6 fn: BN_get_flags
  [BU] Calculating graph for: BN_get_flags
  [BU] Done inlining: BN_get_flags [3+0]
Visiting single node SCC #: 5 fn: bn_expand_internal
  [BU] Calculating graph for: bn_expand_internal
    Inlining graph for BN_get_flags[3+0] into 'bn_expand_internal' [15+0]
  [BU] Done inlining: bn_expand_internal [15+0]
Visiting single node SCC #: 7 fn: bn_free_d
  [BU] Calculating graph for: bn_free_d
    Inlining graph for BN_get_flags[3+0] into 'bn_free_d' [4+0]
  [BU] Done inlining: bn_free_d [4+0]
Visiting single node SCC #: 4 fn: bn_expand2
  [BU] Calculating graph for: bn_expand2
    Inlining graph for bn_expand_internal[15+0] into 'bn_expand2' [6+0]
    Inlining graph for bn_free_d[4+0] into 'bn_expand2' [6+0]
  [BU] Done inlining: bn_expand2 [6+0]
Visiting single node SCC #: 3 fn: bn_expand
  [BU] Calculating graph for: bn_expand
    Inlining graph for bn_expand2[6+0] into 'bn_expand' [4+0]
  [BU] Done inlining: bn_expand [5+0]
Visiting single node SCC #: 2 fn: BN_set_word
  [BU] Calculating graph for: BN_set_word
    Inlining graph for bn_expand[5+0] into 'BN_set_word' [6+0]
  [BU] Done inlining: BN_set_word [5+0]
Visiting single node SCC #: 9 fn: BN_num_bits_word
  [BU] Calculating graph for: BN_num_bits_word
  [BU] Done inlining: BN_num_bits_word [3+0]
Visiting single node SCC #: 10 fn: BN_is_zero
  [BU] Calculating graph for: BN_is_zero
  [BU] Done inlining: BN_is_zero [2+0]
Visiting single node SCC #: 8 fn: BN_num_bits
  [BU] Calculating graph for: BN_num_bits
    Inlining graph for BN_is_zero[2+0] into 'BN_num_bits' [5+0]
  [BU] Done inlining: BN_num_bits [5+0]
Visiting single node SCC #: 12 fn: bn_wexpand
  [BU] Calculating graph for: bn_wexpand
    Inlining graph for bn_expand2[6+0] into 'bn_wexpand' [3+0]
  [BU] Done inlining: bn_wexpand [4+0]
Visiting single node SCC #: 13 fn: BN_set_flags
  [BU] Calculating graph for: BN_set_flags
  [BU] Done inlining: BN_set_flags [3+0]
Visiting single node SCC #: 11 fn: BN_copy
  [BU] Calculating graph for: BN_copy
    Inlining graph for BN_get_flags[3+0] into 'BN_copy' [15+0]
    Inlining graph for bn_wexpand[4+0] into 'BN_copy' [15+0]
    Inlining graph for BN_set_flags[3+0] into 'BN_copy' [14+0]
  [BU] Done inlining: BN_copy [14+0]
Visiting single node SCC #: 14 fn: BN_is_bit_set
  [BU] Calculating graph for: BN_is_bit_set
  [BU] Done inlining: BN_is_bit_set [7+0]
Visiting single node SCC #: 15 fn: BN_is_odd
  [BU] Calculating graph for: BN_is_odd
  [BU] Done inlining: BN_is_odd [3+0]
Visiting single node SCC #: 1 fn: BN_exp
  [BU] Calculating graph for: BN_exp
    Inlining graph for BN_set_word[5+0] into 'BN_exp' [18+0]
    Inlining graph for BN_num_bits[5+0] into 'BN_exp' [19+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_exp' [20+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_exp' [20+0]
    Inlining graph for BN_copy[14+0] into 'BN_exp' [20+0]
    Inlining graph for BN_copy[14+0] into 'BN_exp' [21+0]
    Inlining graph for BN_copy[14+0] into 'BN_exp' [20+0]
    Inlining graph for BN_is_bit_set[7+0] into 'BN_exp' [19+0]
    Inlining graph for BN_is_odd[3+0] into 'BN_exp' [19+0]
  [BU] Done inlining: BN_exp [19+0]
Visiting single node SCC #: 19 fn: BN_abs_is_word
  [BU] Calculating graph for: BN_abs_is_word
  [BU] Done inlining: BN_abs_is_word [4+0]
Visiting single node SCC #: 18 fn: BN_is_one
  [BU] Calculating graph for: BN_is_one
    Inlining graph for BN_abs_is_word[4+0] into 'BN_is_one' [2+0]
  [BU] Done inlining: BN_is_one [3+0]
Visiting single node SCC #: 23 fn: bn_correct_top
  [BU] Calculating graph for: bn_correct_top
  [BU] Done inlining: bn_correct_top [5+0]
Visiting single node SCC #: 22 fn: BN_from_montgomery_word
  [BU] Calculating graph for: BN_from_montgomery_word
    Inlining graph for bn_wexpand[4+0] into 'BN_from_montgomery_word' [29+0]
    Inlining graph for bn_wexpand[4+0] into 'BN_from_montgomery_word' [28+0]
    Inlining graph for bn_correct_top[5+0] into 'BN_from_montgomery_word' [27+0]
    Inlining graph for bn_correct_top[5+0] into 'BN_from_montgomery_word' [27+0]
  [BU] Done inlining: BN_from_montgomery_word [27+0]
Visiting single node SCC #: 21 fn: BN_mod_mul_montgomery
  [BU] Calculating graph for: BN_mod_mul_montgomery
    Inlining graph for BN_from_montgomery_word[27+0] into 'BN_mod_mul_montgomery' [13+0]
  [BU] Done inlining: BN_mod_mul_montgomery [15+0]
Visiting single node SCC #: 20 fn: BN_to_montgomery
  [BU] Calculating graph for: BN_to_montgomery
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_to_montgomery' [8+0]
  [BU] Done inlining: BN_to_montgomery [10+0]
Visiting single node SCC #: 24 fn: BN_from_montgomery
  [BU] Calculating graph for: BN_from_montgomery
    Inlining graph for BN_copy[14+0] into 'BN_from_montgomery' [12+0]
    Inlining graph for BN_from_montgomery_word[27+0] into 'BN_from_montgomery' [13+0]
  [BU] Done inlining: BN_from_montgomery [14+0]
Visiting single node SCC #: 27 fn: bn_init
  [BU] Calculating graph for: bn_init
  [BU] Done inlining: bn_init [2+0]
Visiting single node SCC #: 26 fn: BN_MONT_CTX_init
  [BU] Calculating graph for: BN_MONT_CTX_init
    Inlining graph for bn_init[2+0] into 'BN_MONT_CTX_init' [2+0]
  [BU] Done inlining: BN_MONT_CTX_init [2+0]
Visiting single node SCC #: 25 fn: BN_MONT_CTX_new
  [BU] Calculating graph for: BN_MONT_CTX_new
    Inlining graph for BN_MONT_CTX_init[2+0] into 'BN_MONT_CTX_new' [4+0]
  [BU] Done inlining: BN_MONT_CTX_new [4+0]
Visiting single node SCC #: 29 fn: BN_clear_free
  [BU] Calculating graph for: BN_clear_free
    Inlining graph for BN_get_flags[3+0] into 'BN_clear_free' [5+0]
    Inlining graph for bn_free_d[4+0] into 'BN_clear_free' [5+0]
  [BU] Done inlining: BN_clear_free [5+0]
Visiting single node SCC #: 28 fn: BN_MONT_CTX_free
  [BU] Calculating graph for: BN_MONT_CTX_free
    Inlining graph for BN_clear_free[5+0] into 'BN_MONT_CTX_free' [3+0]
    Inlining graph for BN_clear_free[5+0] into 'BN_MONT_CTX_free' [4+0]
    Inlining graph for BN_clear_free[5+0] into 'BN_MONT_CTX_free' [5+0]
  [BU] Done inlining: BN_MONT_CTX_free [6+0]
Visiting single node SCC #: 31 fn: BN_set_bit
  [BU] Calculating graph for: BN_set_bit
    Inlining graph for bn_wexpand[4+0] into 'BN_set_bit' [9+0]
  [BU] Done inlining: BN_set_bit [8+0]
Visiting single node SCC #: 30 fn: BN_MONT_CTX_set
  [BU] Calculating graph for: BN_MONT_CTX_set
    Inlining graph for BN_set_word[5+0] into 'BN_MONT_CTX_set' [17+0]
    Inlining graph for BN_set_word[5+0] into 'BN_MONT_CTX_set' [17+0]
    Inlining graph for BN_num_bits[5+0] into 'BN_MONT_CTX_set' [18+0]
    Inlining graph for BN_is_zero[2+0] into 'BN_MONT_CTX_set' [18+0]
    Inlining graph for BN_is_zero[2+0] into 'BN_MONT_CTX_set' [18+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_MONT_CTX_set' [18+0]
    Inlining graph for bn_init[2+0] into 'BN_MONT_CTX_set' [18+0]
    Inlining graph for BN_copy[14+0] into 'BN_MONT_CTX_set' [18+0]
    Inlining graph for BN_set_flags[3+0] into 'BN_MONT_CTX_set' [17+0]
    Inlining graph for BN_set_bit[8+0] into 'BN_MONT_CTX_set' [17+0]
  [BU] Done inlining: BN_MONT_CTX_set [17+0]
Visiting single node SCC #: 17 fn: BN_mod_exp_mont_word
  [BU] Calculating graph for: BN_mod_exp_mont_word
    Inlining graph for BN_set_word[5+0] into 'BN_mod_exp_mont_word' [27+0]
    Inlining graph for BN_set_word[5+0] into 'BN_mod_exp_mont_word' [28+0]
    Inlining graph for BN_num_bits[5+0] into 'BN_mod_exp_mont_word' [29+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_mont_word' [30+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_mont_word' [30+0]
    Inlining graph for BN_is_bit_set[7+0] into 'BN_mod_exp_mont_word' [30+0]
    Inlining graph for BN_is_one[3+0] into 'BN_mod_exp_mont_word' [30+0]
    Inlining graph for BN_is_odd[3+0] into 'BN_mod_exp_mont_word' [30+0]
    Inlining graph for BN_to_montgomery[10+0] into 'BN_mod_exp_mont_word' [30+0]
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_mod_exp_mont_word' [31+0]
    Inlining graph for BN_from_montgomery[14+0] into 'BN_mod_exp_mont_word' [31+0]
    Inlining graph for BN_MONT_CTX_new[4+0] into 'BN_mod_exp_mont_word' [31+0]
    Inlining graph for BN_MONT_CTX_free[6+0] into 'BN_mod_exp_mont_word' [31+0]
    Inlining graph for BN_MONT_CTX_set[17+0] into 'BN_mod_exp_mont_word' [31+0]
  [BU] Done inlining: BN_mod_exp_mont_word [31+0]
Visiting single node SCC #: 34 fn: MOD_EXP_CTIME_COPY_TO_PREBUF
  [BU] Calculating graph for: MOD_EXP_CTIME_COPY_TO_PREBUF
  [BU] Done inlining: MOD_EXP_CTIME_COPY_TO_PREBUF [12+0]
Visiting single node SCC #: 39 fn: constant_time_msb
  [BU] Calculating graph for: constant_time_msb
  [BU] Done inlining: constant_time_msb [1+0]
Visiting single node SCC #: 38 fn: constant_time_is_zero
  [BU] Calculating graph for: constant_time_is_zero
  [BU] Done inlining: constant_time_is_zero [1+0]
Visiting single node SCC #: 37 fn: constant_time_eq
  [BU] Calculating graph for: constant_time_eq
  [BU] Done inlining: constant_time_eq [2+0]
Visiting single node SCC #: 36 fn: constant_time_eq_int
  [BU] Calculating graph for: constant_time_eq_int
  [BU] Done inlining: constant_time_eq_int [2+0]
Visiting single node SCC #: 35 fn: MOD_EXP_CTIME_COPY_FROM_PREBUF
  [BU] Calculating graph for: MOD_EXP_CTIME_COPY_FROM_PREBUF
    Inlining graph for bn_wexpand[4+0] into 'MOD_EXP_CTIME_COPY_FROM_PREBUF' [21+0]
    Inlining graph for bn_correct_top[5+0] into 'MOD_EXP_CTIME_COPY_FROM_PREBUF' [20+0]
  [BU] Done inlining: MOD_EXP_CTIME_COPY_FROM_PREBUF [20+0]
Visiting single node SCC #: 40 fn: BN_value_one
  [BU] Calculating graph for: BN_value_one
  [BU] Done inlining: BN_value_one [2+0]
Visiting single node SCC #: 41 fn: BN_ucmp
  [BU] Calculating graph for: BN_ucmp
  [BU] Done inlining: BN_ucmp [12+0]
Visiting single node SCC #: 33 fn: BN_mod_exp_mont_consttime
  [BU] Calculating graph for: BN_mod_exp_mont_consttime
    Inlining graph for MOD_EXP_CTIME_COPY_TO_PREBUF[12+0] into 'BN_mod_exp_mont_consttime' [31+0]
    Inlining graph for MOD_EXP_CTIME_COPY_TO_PREBUF[12+0] into 'BN_mod_exp_mont_consttime' [31+0]
    Inlining graph for MOD_EXP_CTIME_COPY_FROM_PREBUF[20+0] into 'BN_mod_exp_mont_consttime' [31+0]
    Inlining graph for MOD_EXP_CTIME_COPY_FROM_PREBUF[20+0] into 'BN_mod_exp_mont_consttime' [31+0]
    Inlining graph for BN_value_one[2+0] into 'BN_mod_exp_mont_consttime' [31+0]
    Inlining graph for BN_set_word[5+0] into 'BN_mod_exp_mont_consttime' [32+0]
    Inlining graph for BN_num_bits[5+0] into 'BN_mod_exp_mont_consttime' [33+0]
    Inlining graph for BN_ucmp[12+0] into 'BN_mod_exp_mont_consttime' [34+0]
    Inlining graph for BN_is_bit_set[7+0] into 'BN_mod_exp_mont_consttime' [35+0]
    Inlining graph for BN_is_one[3+0] into 'BN_mod_exp_mont_consttime' [35+0]
    Inlining graph for BN_is_odd[3+0] into 'BN_mod_exp_mont_consttime' [35+0]
    Inlining graph for BN_to_montgomery[10+0] into 'BN_mod_exp_mont_consttime' [35+0]
    Inlining graph for BN_to_montgomery[10+0] into 'BN_mod_exp_mont_consttime' [36+0]
    Inlining graph for BN_to_montgomery[10+0] into 'BN_mod_exp_mont_consttime' [36+0]
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_mod_exp_mont_consttime' [36+0]
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_mod_exp_mont_consttime' [36+0]
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_mod_exp_mont_consttime' [36+0]
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_mod_exp_mont_consttime' [36+0]
    Inlining graph for BN_from_montgomery[14+0] into 'BN_mod_exp_mont_consttime' [36+0]
    Inlining graph for BN_MONT_CTX_new[4+0] into 'BN_mod_exp_mont_consttime' [36+0]
    Inlining graph for BN_MONT_CTX_free[6+0] into 'BN_mod_exp_mont_consttime' [36+0]
    Inlining graph for BN_MONT_CTX_set[17+0] into 'BN_mod_exp_mont_consttime' [36+0]
  [BU] Done inlining: BN_mod_exp_mont_consttime [36+0]
Visiting single node SCC #: 32 fn: BN_mod_exp_mont
  [BU] Calculating graph for: BN_mod_exp_mont
    Inlining graph for BN_mod_exp_mont_consttime[36+0] into 'BN_mod_exp_mont' [34+0]
    Inlining graph for BN_value_one[2+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_set_word[5+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_num_bits[5+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_is_zero[2+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for bn_wexpand[4+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for bn_correct_top[5+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_ucmp[12+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_is_bit_set[7+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_is_one[3+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_is_odd[3+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_to_montgomery[10+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_to_montgomery[10+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_from_montgomery[14+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_MONT_CTX_new[4+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_MONT_CTX_free[6+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_MONT_CTX_set[17+0] into 'BN_mod_exp_mont' [39+0]
  [BU] Done inlining: BN_mod_exp_mont [39+0]
Visiting single node SCC #: 43 fn: BN_RECP_CTX_init
  [BU] Calculating graph for: BN_RECP_CTX_init
    Inlining graph for bn_init[2+0] into 'BN_RECP_CTX_init' [3+0]
    Inlining graph for bn_init[2+0] into 'BN_RECP_CTX_init' [3+0]
Attempting to merge two chunks of the same node together!
Merged 1 call nodes.
  [BU] Done inlining: BN_RECP_CTX_init [3+0]
Visiting single node SCC #: 45 fn: BN_free
  [BU] Calculating graph for: BN_free
    Inlining graph for BN_get_flags[3+0] into 'BN_free' [3+0]
    Inlining graph for bn_free_d[4+0] into 'BN_free' [3+0]
  [BU] Done inlining: BN_free [4+0]
Visiting single node SCC #: 44 fn: BN_RECP_CTX_free
  [BU] Calculating graph for: BN_RECP_CTX_free
    Inlining graph for BN_free[4+0] into 'BN_RECP_CTX_free' [3+0]
    Inlining graph for BN_free[4+0] into 'BN_RECP_CTX_free' [4+0]
  [BU] Done inlining: BN_RECP_CTX_free [5+0]
Visiting single node SCC #: 46 fn: BN_RECP_CTX_set
  [BU] Calculating graph for: BN_RECP_CTX_set
    Inlining graph for BN_set_word[5+0] into 'BN_RECP_CTX_set' [8+0]
    Inlining graph for BN_num_bits[5+0] into 'BN_RECP_CTX_set' [9+0]
    Inlining graph for BN_copy[14+0] into 'BN_RECP_CTX_set' [10+0]
  [BU] Done inlining: BN_RECP_CTX_set [10+0]
Visiting single node SCC #: 49 fn: BN_reciprocal
  [BU] Calculating graph for: BN_reciprocal
    Inlining graph for BN_set_bit[8+0] into 'BN_reciprocal' [10+0]
  [BU] Done inlining: BN_reciprocal [11+0]
Visiting single node SCC #: 48 fn: BN_div_recp
  [BU] Calculating graph for: BN_div_recp
    Inlining graph for BN_set_word[5+0] into 'BN_div_recp' [22+0]
    Inlining graph for BN_num_bits[5+0] into 'BN_div_recp' [23+0]
    Inlining graph for BN_is_zero[2+0] into 'BN_div_recp' [24+0]
    Inlining graph for BN_copy[14+0] into 'BN_div_recp' [24+0]
    Inlining graph for BN_ucmp[12+0] into 'BN_div_recp' [24+0]
    Inlining graph for BN_ucmp[12+0] into 'BN_div_recp' [25+0]
    Inlining graph for BN_reciprocal[11+0] into 'BN_div_recp' [25+0]
  [BU] Done inlining: BN_div_recp [25+0]
Visiting single node SCC #: 47 fn: BN_mod_mul_reciprocal
  [BU] Calculating graph for: BN_mod_mul_reciprocal
    Inlining graph for BN_div_recp[25+0] into 'BN_mod_mul_reciprocal' [13+0]
  [BU] Done inlining: BN_mod_mul_reciprocal [16+0]
Visiting single node SCC #: 42 fn: BN_mod_exp_recp
  [BU] Calculating graph for: BN_mod_exp_recp
    Inlining graph for BN_set_word[5+0] into 'BN_mod_exp_recp' [27+0]
    Inlining graph for BN_num_bits[5+0] into 'BN_mod_exp_recp' [28+0]
    Inlining graph for BN_is_zero[2+0] into 'BN_mod_exp_recp' [29+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_recp' [29+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_recp' [29+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_recp' [29+0]
    Inlining graph for BN_copy[14+0] into 'BN_mod_exp_recp' [29+0]
    Inlining graph for BN_is_bit_set[7+0] into 'BN_mod_exp_recp' [30+0]
    Inlining graph for BN_is_one[3+0] into 'BN_mod_exp_recp' [30+0]
    Inlining graph for BN_RECP_CTX_init[3+0] into 'BN_mod_exp_recp' [30+0]
    Inlining graph for BN_RECP_CTX_free[5+0] into 'BN_mod_exp_recp' [30+0]
    Inlining graph for BN_RECP_CTX_set[10+0] into 'BN_mod_exp_recp' [31+0]
    Inlining graph for BN_RECP_CTX_set[10+0] into 'BN_mod_exp_recp' [31+0]
    Inlining graph for BN_mod_mul_reciprocal[16+0] into 'BN_mod_exp_recp' [31+0]
    Inlining graph for BN_mod_mul_reciprocal[16+0] into 'BN_mod_exp_recp' [31+0]
    Inlining graph for BN_mod_mul_reciprocal[16+0] into 'BN_mod_exp_recp' [31+0]
    Inlining graph for BN_mod_mul_reciprocal[16+0] into 'BN_mod_exp_recp' [32+0]
  [BU] Done inlining: BN_mod_exp_recp [32+0]
Visiting single node SCC #: 16 fn: BN_mod_exp
  [BU] Calculating graph for: BN_mod_exp
    Inlining graph for BN_mod_exp_mont_word[31+0] into 'BN_mod_exp' [13+0]
    Inlining graph for BN_mod_exp_mont[39+0] into 'BN_mod_exp' [18+0]
    Inlining graph for BN_mod_exp_recp[32+0] into 'BN_mod_exp' [18+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp' [18+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp' [18+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp' [18+0]
    Inlining graph for BN_is_odd[3+0] into 'BN_mod_exp' [18+0]
  [BU] Done inlining: BN_mod_exp [16+0]
Visiting single node SCC #: 50 fn: BN_mod_exp_simple
  [BU] Calculating graph for: BN_mod_exp_simple
    Inlining graph for BN_set_word[5+0] into 'BN_mod_exp_simple' [25+0]
    Inlining graph for BN_num_bits[5+0] into 'BN_mod_exp_simple' [26+0]
    Inlining graph for BN_is_zero[2+0] into 'BN_mod_exp_simple' [27+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_simple' [27+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_simple' [27+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_simple' [27+0]
    Inlining graph for BN_is_bit_set[7+0] into 'BN_mod_exp_simple' [27+0]
    Inlining graph for BN_is_one[3+0] into 'BN_mod_exp_simple' [27+0]
  [BU] Done inlining: BN_mod_exp_simple [28+0]
Visiting single node SCC #: 51 fn: BN_set_params
  [BU] Calculating graph for: BN_set_params
  [BU] Done inlining: BN_set_params [4+0]
Visiting single node SCC #: 52 fn: BN_get_params
  [BU] Calculating graph for: BN_get_params
  [BU] Done inlining: BN_get_params [2+0]
Visiting single node SCC #: 53 fn: BN_new
  [BU] Calculating graph for: BN_new
  [BU] Done inlining: BN_new [4+0]
Visiting single node SCC #: 54 fn: BN_secure_new
  [BU] Calculating graph for: BN_secure_new
    Inlining graph for BN_new[4+0] into 'BN_secure_new' [2+0]
  [BU] Done inlining: BN_secure_new [2+0]
Visiting single node SCC #: 55 fn: BN_dup
  [BU] Calculating graph for: BN_dup
    Inlining graph for BN_get_flags[3+0] into 'BN_dup' [6+0]
    Inlining graph for BN_free[4+0] into 'BN_dup' [6+0]
    Inlining graph for BN_new[4+0] into 'BN_dup' [7+0]
    Inlining graph for BN_secure_new[2+0] into 'BN_dup' [7+0]
    Inlining graph for BN_copy[14+0] into 'BN_dup' [7+0]
  [BU] Done inlining: BN_dup [7+0]
Visiting single node SCC #: 56 fn: BN_swap
  [BU] Calculating graph for: BN_swap
  [BU] Done inlining: BN_swap [11+0]
Visiting single node SCC #: 57 fn: BN_clear
  [BU] Calculating graph for: BN_clear
  [BU] Done inlining: BN_clear [3+0]
Visiting single node SCC #: 58 fn: BN_get_word
  [BU] Calculating graph for: BN_get_word
  [BU] Done inlining: BN_get_word [4+0]
Visiting single node SCC #: 59 fn: BN_bin2bn
  [BU] Calculating graph for: BN_bin2bn
    Inlining graph for BN_free[4+0] into 'BN_bin2bn' [13+0]
    Inlining graph for BN_new[4+0] into 'BN_bin2bn' [13+0]
    Inlining graph for bn_wexpand[4+0] into 'BN_bin2bn' [13+0]
    Inlining graph for bn_correct_top[5+0] into 'BN_bin2bn' [12+0]
  [BU] Done inlining: BN_bin2bn [12+0]
Visiting single node SCC #: 61 fn: bn2binpad
  [BU] Calculating graph for: bn2binpad
    Inlining graph for BN_num_bits[5+0] into 'bn2binpad' [10+0]
  [BU] Done inlining: bn2binpad [10+0]
Visiting single node SCC #: 60 fn: BN_bn2binpad
  [BU] Calculating graph for: BN_bn2binpad
    Inlining graph for bn2binpad[10+0] into 'BN_bn2binpad' [6+0]
  [BU] Done inlining: BN_bn2binpad [7+0]
Visiting single node SCC #: 62 fn: BN_bn2bin
  [BU] Calculating graph for: BN_bn2bin
    Inlining graph for bn2binpad[10+0] into 'BN_bn2bin' [4+0]
  [BU] Done inlining: BN_bn2bin [5+0]
Visiting single node SCC #: 63 fn: BN_lebin2bn
  [BU] Calculating graph for: BN_lebin2bn
    Inlining graph for BN_free[4+0] into 'BN_lebin2bn' [13+0]
    Inlining graph for BN_new[4+0] into 'BN_lebin2bn' [13+0]
    Inlining graph for bn_wexpand[4+0] into 'BN_lebin2bn' [13+0]
    Inlining graph for bn_correct_top[5+0] into 'BN_lebin2bn' [12+0]
  [BU] Done inlining: BN_lebin2bn [12+0]
Visiting single node SCC #: 64 fn: BN_bn2lebinpad
  [BU] Calculating graph for: BN_bn2lebinpad
    Inlining graph for BN_num_bits[5+0] into 'BN_bn2lebinpad' [10+0]
  [BU] Done inlining: BN_bn2lebinpad [10+0]
Visiting single node SCC #: 65 fn: BN_cmp
  [BU] Calculating graph for: BN_cmp
  [BU] Done inlining: BN_cmp [12+0]
Visiting single node SCC #: 66 fn: BN_clear_bit
  [BU] Calculating graph for: BN_clear_bit
    Inlining graph for bn_correct_top[5+0] into 'BN_clear_bit' [7+0]
  [BU] Done inlining: BN_clear_bit [7+0]
Visiting single node SCC #: 67 fn: BN_mask_bits
  [BU] Calculating graph for: BN_mask_bits
    Inlining graph for bn_correct_top[5+0] into 'BN_mask_bits' [7+0]
  [BU] Done inlining: BN_mask_bits [7+0]
Visiting single node SCC #: 68 fn: BN_set_negative
  [BU] Calculating graph for: BN_set_negative
    Inlining graph for BN_is_zero[2+0] into 'BN_set_negative' [3+0]
  [BU] Done inlining: BN_set_negative [3+0]
Visiting single node SCC #: 69 fn: bn_cmp_words
  [BU] Calculating graph for: bn_cmp_words
  [BU] Done inlining: bn_cmp_words [9+0]
Visiting single node SCC #: 70 fn: bn_cmp_part_words
  [BU] Calculating graph for: bn_cmp_part_words
    Inlining graph for bn_cmp_words[9+0] into 'bn_cmp_part_words' [9+0]
  [BU] Done inlining: bn_cmp_part_words [9+0]
Visiting single node SCC #: 71 fn: BN_consttime_swap
  [BU] Calculating graph for: BN_consttime_swap
  [BU] Done inlining: BN_consttime_swap [14+0]
Visiting single node SCC #: 72 fn: BN_security_bits
  [BU] Calculating graph for: BN_security_bits
  [BU] Done inlining: BN_security_bits [5+0]
Visiting single node SCC #: 73 fn: BN_zero_ex
  [BU] Calculating graph for: BN_zero_ex
  [BU] Done inlining: BN_zero_ex [2+0]
Visiting single node SCC #: 74 fn: BN_is_word
  [BU] Calculating graph for: BN_is_word
    Inlining graph for BN_abs_is_word[4+0] into 'BN_is_word' [3+0]
  [BU] Done inlining: BN_is_word [4+0]
Visiting single node SCC #: 75 fn: BN_is_negative
  [BU] Calculating graph for: BN_is_negative
  [BU] Done inlining: BN_is_negative [2+0]
Visiting single node SCC #: 76 fn: BN_with_flags
  [BU] Calculating graph for: BN_with_flags
  [BU] Done inlining: BN_with_flags [6+0]
Visiting single node SCC #: 77 fn: BN_GENCB_new
  [BU] Calculating graph for: BN_GENCB_new
  [BU] Done inlining: BN_GENCB_new [4+0]
Visiting single node SCC #: 78 fn: BN_GENCB_free
  [BU] Calculating graph for: BN_GENCB_free
  [BU] Done inlining: BN_GENCB_free [3+0]
Visiting single node SCC #: 79 fn: BN_GENCB_set_old
  [BU] Calculating graph for: BN_GENCB_set_old
  [BU] Done inlining: BN_GENCB_set_old [7+0]
Visiting single node SCC #: 80 fn: BN_GENCB_set
  [BU] Calculating graph for: BN_GENCB_set
  [BU] Done inlining: BN_GENCB_set [7+0]
Visiting single node SCC #: 81 fn: BN_GENCB_get_arg
  [BU] Calculating graph for: BN_GENCB_get_arg
  [BU] Done inlining: BN_GENCB_get_arg [3+0]
Visiting single node SCC #: 82 fn: BN_MONT_CTX_copy
  [BU] Calculating graph for: BN_MONT_CTX_copy
    Inlining graph for BN_copy[14+0] into 'BN_MONT_CTX_copy' [8+0]
    Inlining graph for BN_copy[14+0] into 'BN_MONT_CTX_copy' [9+0]
    Inlining graph for BN_copy[14+0] into 'BN_MONT_CTX_copy' [8+0]
Merged 2 call nodes.
  [BU] Done inlining: BN_MONT_CTX_copy [7+0]
Visiting single node SCC #: 83 fn: BN_MONT_CTX_set_locked
  [BU] Calculating graph for: BN_MONT_CTX_set_locked
    Inlining graph for BN_MONT_CTX_new[4+0] into 'BN_MONT_CTX_set_locked' [11+0]
    Inlining graph for BN_MONT_CTX_free[6+0] into 'BN_MONT_CTX_set_locked' [11+0]
    Inlining graph for BN_MONT_CTX_set[17+0] into 'BN_MONT_CTX_set_locked' [12+0]
  [BU] Done inlining: BN_MONT_CTX_set_locked [13+0]
Visiting single node SCC #: 84 fn: BN_RECP_CTX_new
  [BU] Calculating graph for: BN_RECP_CTX_new
    Inlining graph for bn_init[2+0] into 'BN_RECP_CTX_new' [4+0]
    Inlining graph for bn_init[2+0] into 'BN_RECP_CTX_new' [4+0]
Attempting to merge two chunks of the same node together!
Merged 1 call nodes.
  [BU] Done inlining: BN_RECP_CTX_new [4+0]
[TD] Inlining callers into 'BN_RECP_CTX_new'
[TD] Inlining callers into 'BN_MONT_CTX_set_locked'
[TD] Inlining callers into 'BN_MONT_CTX_copy'
[TD] Inlining callers into 'BN_GENCB_get_arg'
[TD] Inlining callers into 'BN_GENCB_set'
[TD] Inlining callers into 'BN_GENCB_set_old'
[TD] Inlining callers into 'BN_GENCB_free'
[TD] Inlining callers into 'BN_GENCB_new'
[TD] Inlining callers into 'BN_with_flags'
[TD] Inlining callers into 'BN_is_negative'
[TD] Inlining callers into 'BN_is_word'
[TD] Inlining callers into 'BN_zero_ex'
[TD] Inlining callers into 'BN_security_bits'
[TD] Inlining callers into 'BN_consttime_swap'
[TD] Inlining callers into 'bn_cmp_part_words'
[TD] Inlining callers into 'bn_cmp_words'
   [TD] Inlining graph into Fn 'bn_cmp_words' from Fn 'bn_cmp_part_words': 3 args
[TD] Inlining callers into 'BN_set_negative'
[TD] Inlining callers into 'BN_mask_bits'
[TD] Inlining callers into 'BN_clear_bit'
[TD] Inlining callers into 'BN_cmp'
[TD] Inlining callers into 'BN_bn2lebinpad'
[TD] Inlining callers into 'BN_lebin2bn'
[TD] Inlining callers into 'BN_bn2bin'
[TD] Inlining callers into 'BN_bn2binpad'
[TD] Inlining callers into 'bn2binpad'
   [TD] Inlining graph into Fn 'bn2binpad' from Fn 'BN_bn2bin': 3 args
   [TD] Inlining graph into Fn 'bn2binpad' from Fn 'BN_bn2binpad': 3 args
[TD] Inlining callers into 'BN_bin2bn'
[TD] Inlining callers into 'BN_get_word'
[TD] Inlining callers into 'BN_clear'
[TD] Inlining callers into 'BN_swap'
[TD] Inlining callers into 'BN_dup'
[TD] Inlining callers into 'BN_secure_new'
   [TD] Inlining graph into Fn 'BN_secure_new' from Fn 'BN_dup': 0 args
[TD] Inlining callers into 'BN_new'
   [TD] Inlining graph into Fn 'BN_new' from Fn 'BN_lebin2bn': 0 args
   [TD] Inlining graph into Fn 'BN_new' from Fn 'BN_bin2bn': 0 args
   [TD] Inlining graph into Fn 'BN_new' from Fn 'BN_dup': 0 args
   [TD] Inlining graph into Fn 'BN_new' from Fn 'BN_secure_new': 0 args
[TD] Inlining callers into 'BN_get_params'
[TD] Inlining callers into 'BN_set_params'
[TD] Inlining callers into 'BN_mod_exp_simple'
[TD] Inlining callers into 'BN_mod_exp'
[TD] Inlining callers into 'BN_mod_exp_recp'
   [TD] Inlining graph into Fn 'BN_mod_exp_recp' from Fn 'BN_mod_exp': 5 args
[TD] Inlining callers into 'BN_mod_mul_reciprocal'
   [TD] Inlining graph into Fn 'BN_mod_mul_reciprocal' from Fn 'BN_mod_exp_recp': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_reciprocal' from Fn 'BN_mod_exp_recp': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_reciprocal' from Fn 'BN_mod_exp_recp': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_reciprocal' from Fn 'BN_mod_exp_recp': 5 args
[TD] Inlining callers into 'BN_div_recp'
   [TD] Inlining graph into Fn 'BN_div_recp' from Fn 'BN_mod_mul_reciprocal': 5 args
Merged 1 call nodes.
[TD] Inlining callers into 'BN_reciprocal'
   [TD] Inlining graph into Fn 'BN_reciprocal' from Fn 'BN_div_recp': 4 args
[TD] Inlining callers into 'BN_RECP_CTX_set'
   [TD] Inlining graph into Fn 'BN_RECP_CTX_set' from Fn 'BN_mod_exp_recp': 3 args
   [TD] Inlining graph into Fn 'BN_RECP_CTX_set' from Fn 'BN_mod_exp_recp': 3 args
[TD] Inlining callers into 'BN_RECP_CTX_free'
   [TD] Inlining graph into Fn 'BN_RECP_CTX_free' from Fn 'BN_mod_exp_recp': 1 args
Merged 1 call nodes.
[TD] Inlining callers into 'BN_free'
   [TD] Inlining graph into Fn 'BN_free' from Fn 'BN_lebin2bn': 1 args
   [TD] Inlining graph into Fn 'BN_free' from Fn 'BN_bin2bn': 1 args
   [TD] Inlining graph into Fn 'BN_free' from Fn 'BN_dup': 1 args
   [TD] Inlining graph into Fn 'BN_free' from Fn 'BN_RECP_CTX_free': 1 args
[TD] Inlining callers into 'BN_RECP_CTX_init'
   [TD] Inlining graph into Fn 'BN_RECP_CTX_init' from Fn 'BN_mod_exp_recp': 1 args
[TD] Inlining callers into 'BN_mod_exp_mont'
   [TD] Inlining graph into Fn 'BN_mod_exp_mont' from Fn 'BN_mod_exp': 6 args
[TD] Inlining callers into 'BN_mod_exp_mont_consttime'
   [TD] Inlining graph into Fn 'BN_mod_exp_mont_consttime' from Fn 'BN_mod_exp_mont': 6 args
[TD] Inlining callers into 'BN_ucmp'
   [TD] Inlining graph into Fn 'BN_ucmp' from Fn 'BN_div_recp': 2 args
   [TD] Inlining graph into Fn 'BN_ucmp' from Fn 'BN_mod_exp_mont_consttime': 2 args
   [TD] Inlining graph into Fn 'BN_ucmp' from Fn 'BN_mod_exp_mont': 2 args
[TD] Inlining callers into 'BN_value_one'
   [TD] Inlining graph into Fn 'BN_value_one' from Fn 'BN_mod_exp_mont_consttime': 0 args
   [TD] Inlining graph into Fn 'BN_value_one' from Fn 'BN_mod_exp_mont': 0 args
[TD] Inlining callers into 'MOD_EXP_CTIME_COPY_FROM_PREBUF'
   [TD] Inlining graph into Fn 'MOD_EXP_CTIME_COPY_FROM_PREBUF' from Fn 'BN_mod_exp_mont_consttime': 5 args
   [TD] Inlining graph into Fn 'MOD_EXP_CTIME_COPY_FROM_PREBUF' from Fn 'BN_mod_exp_mont_consttime': 5 args
[TD] Inlining callers into 'constant_time_eq_int'
   [TD] Inlining graph into Fn 'constant_time_eq_int' from Fn 'MOD_EXP_CTIME_COPY_FROM_PREBUF': 2 args
[TD] Inlining callers into 'constant_time_eq'
   [TD] Inlining graph into Fn 'constant_time_eq' from Fn 'constant_time_eq_int': 2 args
[TD] Inlining callers into 'constant_time_is_zero'
   [TD] Inlining graph into Fn 'constant_time_is_zero' from Fn 'constant_time_eq': 1 args
[TD] Inlining callers into 'constant_time_msb'
   [TD] Inlining graph into Fn 'constant_time_msb' from Fn 'constant_time_is_zero': 1 args
[TD] Inlining callers into 'MOD_EXP_CTIME_COPY_TO_PREBUF'
   [TD] Inlining graph into Fn 'MOD_EXP_CTIME_COPY_TO_PREBUF' from Fn 'BN_mod_exp_mont_consttime': 5 args
   [TD] Inlining graph into Fn 'MOD_EXP_CTIME_COPY_TO_PREBUF' from Fn 'BN_mod_exp_mont_consttime': 5 args
[TD] Inlining callers into 'BN_mod_exp_mont_word'
   [TD] Inlining graph into Fn 'BN_mod_exp_mont_word' from Fn 'BN_mod_exp': 6 args
[TD] Inlining callers into 'BN_MONT_CTX_set'
   [TD] Inlining graph into Fn 'BN_MONT_CTX_set' from Fn 'BN_MONT_CTX_set_locked': 3 args
   [TD] Inlining graph into Fn 'BN_MONT_CTX_set' from Fn 'BN_mod_exp_mont_consttime': 3 args
   [TD] Inlining graph into Fn 'BN_MONT_CTX_set' from Fn 'BN_mod_exp_mont': 3 args
   [TD] Inlining graph into Fn 'BN_MONT_CTX_set' from Fn 'BN_mod_exp_mont_word': 3 args
[TD] Inlining callers into 'BN_set_bit'
   [TD] Inlining graph into Fn 'BN_set_bit' from Fn 'BN_reciprocal': 2 args
   [TD] Inlining graph into Fn 'BN_set_bit' from Fn 'BN_MONT_CTX_set': 2 args
[TD] Inlining callers into 'BN_MONT_CTX_free'
   [TD] Inlining graph into Fn 'BN_MONT_CTX_free' from Fn 'BN_MONT_CTX_set_locked': 1 args
   [TD] Inlining graph into Fn 'BN_MONT_CTX_free' from Fn 'BN_mod_exp_mont_consttime': 1 args
   [TD] Inlining graph into Fn 'BN_MONT_CTX_free' from Fn 'BN_mod_exp_mont': 1 args
   [TD] Inlining graph into Fn 'BN_MONT_CTX_free' from Fn 'BN_mod_exp_mont_word': 1 args
Merged 2 call nodes.
[TD] Inlining callers into 'BN_clear_free'
   [TD] Inlining graph into Fn 'BN_clear_free' from Fn 'BN_MONT_CTX_free': 1 args
[TD] Inlining callers into 'BN_MONT_CTX_new'
   [TD] Inlining graph into Fn 'BN_MONT_CTX_new' from Fn 'BN_MONT_CTX_set_locked': 0 args
   [TD] Inlining graph into Fn 'BN_MONT_CTX_new' from Fn 'BN_mod_exp_mont_consttime': 0 args
   [TD] Inlining graph into Fn 'BN_MONT_CTX_new' from Fn 'BN_mod_exp_mont': 0 args
   [TD] Inlining graph into Fn 'BN_MONT_CTX_new' from Fn 'BN_mod_exp_mont_word': 0 args
[TD] Inlining callers into 'BN_MONT_CTX_init'
   [TD] Inlining graph into Fn 'BN_MONT_CTX_init' from Fn 'BN_MONT_CTX_new': 1 args
[TD] Inlining callers into 'bn_init'
   [TD] Inlining graph into Fn 'bn_init' from Fn 'BN_RECP_CTX_new': 1 args
   [TD] Inlining graph into Fn 'bn_init' from Fn 'BN_RECP_CTX_init': 1 args
   [TD] Inlining graph into Fn 'bn_init' from Fn 'BN_MONT_CTX_set': 1 args
   [TD] Inlining graph into Fn 'bn_init' from Fn 'BN_MONT_CTX_init': 1 args
[TD] Inlining callers into 'BN_from_montgomery'
   [TD] Inlining graph into Fn 'BN_from_montgomery' from Fn 'BN_mod_exp_mont_consttime': 4 args
   [TD] Inlining graph into Fn 'BN_from_montgomery' from Fn 'BN_mod_exp_mont': 4 args
   [TD] Inlining graph into Fn 'BN_from_montgomery' from Fn 'BN_mod_exp_mont_word': 4 args
[TD] Inlining callers into 'BN_to_montgomery'
   [TD] Inlining graph into Fn 'BN_to_montgomery' from Fn 'BN_mod_exp_mont_consttime': 4 args
   [TD] Inlining graph into Fn 'BN_to_montgomery' from Fn 'BN_mod_exp_mont_consttime': 4 args
   [TD] Inlining graph into Fn 'BN_to_montgomery' from Fn 'BN_mod_exp_mont_consttime': 4 args
   [TD] Inlining graph into Fn 'BN_to_montgomery' from Fn 'BN_mod_exp_mont': 4 args
   [TD] Inlining graph into Fn 'BN_to_montgomery' from Fn 'BN_mod_exp_mont': 4 args
   [TD] Inlining graph into Fn 'BN_to_montgomery' from Fn 'BN_mod_exp_mont_word': 4 args
[TD] Inlining callers into 'BN_mod_mul_montgomery'
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_mod_exp_mont_consttime': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_mod_exp_mont_consttime': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_mod_exp_mont_consttime': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_mod_exp_mont_consttime': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_mod_exp_mont': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_mod_exp_mont': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_mod_exp_mont': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_mod_exp_mont': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_to_montgomery': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_mod_exp_mont_word': 5 args
[TD] Inlining callers into 'BN_from_montgomery_word'
   [TD] Inlining graph into Fn 'BN_from_montgomery_word' from Fn 'BN_from_montgomery': 3 args
   [TD] Inlining graph into Fn 'BN_from_montgomery_word' from Fn 'BN_mod_mul_montgomery': 3 args
[TD] Inlining callers into 'bn_correct_top'
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'BN_mask_bits': 1 args
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'BN_clear_bit': 1 args
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'BN_lebin2bn': 1 args
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'BN_bin2bn': 1 args
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'MOD_EXP_CTIME_COPY_FROM_PREBUF': 1 args
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'BN_mod_exp_mont': 1 args
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'BN_from_montgomery_word': 1 args
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'BN_from_montgomery_word': 1 args
[TD] Inlining callers into 'BN_is_one'
   [TD] Inlining graph into Fn 'BN_is_one' from Fn 'BN_mod_exp_simple': 1 args
   [TD] Inlining graph into Fn 'BN_is_one' from Fn 'BN_mod_exp_recp': 1 args
   [TD] Inlining graph into Fn 'BN_is_one' from Fn 'BN_mod_exp_mont_consttime': 1 args
   [TD] Inlining graph into Fn 'BN_is_one' from Fn 'BN_mod_exp_mont': 1 args
   [TD] Inlining graph into Fn 'BN_is_one' from Fn 'BN_mod_exp_mont_word': 1 args
[TD] Inlining callers into 'BN_abs_is_word'
   [TD] Inlining graph into Fn 'BN_abs_is_word' from Fn 'BN_is_word': 2 args
   [TD] Inlining graph into Fn 'BN_abs_is_word' from Fn 'BN_is_one': 2 args
[TD] Inlining callers into 'BN_exp'
[TD] Inlining callers into 'BN_is_odd'
   [TD] Inlining graph into Fn 'BN_is_odd' from Fn 'BN_mod_exp_mont_consttime': 1 args
   [TD] Inlining graph into Fn 'BN_is_odd' from Fn 'BN_mod_exp_mont': 1 args
   [TD] Inlining graph into Fn 'BN_is_odd' from Fn 'BN_mod_exp_mont_word': 1 args
   [TD] Inlining graph into Fn 'BN_is_odd' from Fn 'BN_mod_exp': 1 args
   [TD] Inlining graph into Fn 'BN_is_odd' from Fn 'BN_exp': 1 args
[TD] Inlining callers into 'BN_is_bit_set'
   [TD] Inlining graph into Fn 'BN_is_bit_set' from Fn 'BN_mod_exp_simple': 2 args
   [TD] Inlining graph into Fn 'BN_is_bit_set' from Fn 'BN_mod_exp_recp': 2 args
   [TD] Inlining graph into Fn 'BN_is_bit_set' from Fn 'BN_mod_exp_mont_consttime': 2 args
   [TD] Inlining graph into Fn 'BN_is_bit_set' from Fn 'BN_mod_exp_mont': 2 args
   [TD] Inlining graph into Fn 'BN_is_bit_set' from Fn 'BN_mod_exp_mont_word': 2 args
   [TD] Inlining graph into Fn 'BN_is_bit_set' from Fn 'BN_exp': 2 args
[TD] Inlining callers into 'BN_copy'
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_MONT_CTX_copy': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_dup': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_div_recp': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_RECP_CTX_set': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_mod_exp_recp': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_MONT_CTX_set': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_from_montgomery': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_exp': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_exp': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_exp': 2 args
[TD] Inlining callers into 'BN_set_flags'
   [TD] Inlining graph into Fn 'BN_set_flags' from Fn 'BN_MONT_CTX_set': 2 args
   [TD] Inlining graph into Fn 'BN_set_flags' from Fn 'BN_copy': 2 args
[TD] Inlining callers into 'bn_wexpand'
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'BN_lebin2bn': 2 args
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'BN_bin2bn': 2 args
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'MOD_EXP_CTIME_COPY_FROM_PREBUF': 2 args
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'BN_mod_exp_mont': 2 args
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'BN_set_bit': 2 args
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'BN_from_montgomery_word': 2 args
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'BN_from_montgomery_word': 2 args
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'BN_copy': 2 args
[TD] Inlining callers into 'BN_num_bits'
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_bn2lebinpad': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'bn2binpad': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_mod_exp_simple': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_div_recp': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_RECP_CTX_set': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_mod_exp_recp': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_mod_exp_mont_consttime': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_mod_exp_mont': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_MONT_CTX_set': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_mod_exp_mont_word': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_exp': 1 args
[TD] Inlining callers into 'BN_is_zero'
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_set_negative': 1 args
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_mod_exp_simple': 1 args
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_div_recp': 1 args
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_mod_exp_recp': 1 args
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_mod_exp_mont': 1 args
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_MONT_CTX_set': 1 args
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_MONT_CTX_set': 1 args
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_num_bits': 1 args
[TD] Inlining callers into 'BN_num_bits_word'
   [TD] Inlining graph into Fn 'BN_num_bits_word' from Fn 'BN_num_bits': 1 args
[TD] Inlining callers into 'BN_set_word'
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_mod_exp_simple': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_div_recp': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_RECP_CTX_set': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_mod_exp_recp': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_mod_exp_mont_consttime': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_mod_exp_mont': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_MONT_CTX_set': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_MONT_CTX_set': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_mod_exp_mont_word': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_mod_exp_mont_word': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_exp': 2 args
[TD] Inlining callers into 'bn_expand'
   [TD] Inlining graph into Fn 'bn_expand' from Fn 'BN_set_word': 2 args
[TD] Inlining callers into 'bn_expand2'
   [TD] Inlining graph into Fn 'bn_expand2' from Fn 'bn_wexpand': 2 args
   [TD] Inlining graph into Fn 'bn_expand2' from Fn 'bn_expand': 2 args
[TD] Inlining callers into 'bn_free_d'
   [TD] Inlining graph into Fn 'bn_free_d' from Fn 'BN_free': 1 args
   [TD] Inlining graph into Fn 'bn_free_d' from Fn 'BN_clear_free': 1 args
   [TD] Inlining graph into Fn 'bn_free_d' from Fn 'bn_expand2': 1 args
[TD] Inlining callers into 'bn_expand_internal'
   [TD] Inlining graph into Fn 'bn_expand_internal' from Fn 'bn_expand2': 2 args
[TD] Inlining callers into 'BN_get_flags'
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_dup': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_simple': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_simple': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_simple': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_free': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_recp': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_recp': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_recp': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_mont': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_mont': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_mont': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_MONT_CTX_set': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_clear_free': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_mont_word': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_mont_word': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_copy': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'bn_free_d': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'bn_expand_internal': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_exp': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_exp': 2 args
Eliminating 1 EC Globals!
Running on BN_exp in context []
Running on llvm.dbg.declare in context []
Running on CRYPTO_malloc in context []
Running on __memset_chk in context []
Running on llvm.objectsize.i64.p0i8 in context []
Running on ERR_put_error in context []
Running on BN_CTX_start in context []
Running on BN_CTX_get in context []
Running on BN_sqr in context []
Running on BN_mul in context []
Running on BN_CTX_end in context []
Running on BN_mod_exp in context []
Running on BN_mod_exp_mont_word in context []
Running on BN_mod_exp_mont in context []
Running on BN_mod_exp_recp in context []
Using taint reachable signature for:   call void @ERR_put_error(i32 3, i32 125, i32 66, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 185), !dbg !422
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
Creating ConsElem Map for :	Node0x7fc9d46e91e0 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str = private unnamed_addr constant [9 x i8] c\"bn_exp.c\\00\", align 1\n|{<s0>0}}"];
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
	Node0x7fc9d46e91e0 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str = private unnamed_addr constant [9 x i8] c\"bn_exp.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %9), !dbg !447
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !446
Creating ConsElem Map for :	Node0x7fc9d46e6b60 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
REACHABLE SOURCE:   %9 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !446
	Node0x7fc9d46e6b60 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !446
Using taint reachable signature for:   %call15 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %10), !dbg !449
RSINKGEP INSTRUCTION   %10 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !448
REACHABLE SOURCE:   %10 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !448
	Node0x7fc9d46e6b60 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %10 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !448
Using taint reachable signature for:   %call16 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %11), !dbg !452
RSINKGEP INSTRUCTION   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !451
REACHABLE SOURCE:   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !451
	Node0x7fc9d46e6b60 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !451
Using taint reachable signature for:   %call41 = call i32 @BN_nnmod(%struct.bignum_st* %23, %struct.bignum_st* %24, %struct.bignum_st* %25, %struct.bignum_ctx* %26), !dbg !497
RSINKGEP INSTRUCTION   %23 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx40, align 8, !dbg !492
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %26 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !496
RSINKGEP INSTRUCTION   %25 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !495
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %24 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !494
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
REACHABLE SOURCE:   %23 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx40, align 8, !dbg !492
REACHABLE SOURCE:   %26 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !496
REACHABLE SOURCE:   %25 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !495
REACHABLE SOURCE:   %24 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !494
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
	Node0x7fc9d46e6b60 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
RSINKGEP INSTRUCTION   %23 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx40, align 8, !dbg !492
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %26 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !496
RSINKGEP INSTRUCTION   %25 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !495
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %24 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !494
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call73 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %41), !dbg !538
RSINKGEP INSTRUCTION   %41 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !535
REACHABLE SOURCE:   %41 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !535
	Node0x7fc9d46e6b60 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %41 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !535
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %92), !dbg !688
RSINKGEP INSTRUCTION   %92 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !687
REACHABLE SOURCE:   %92 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !687
	Node0x7fc9d46e6b60 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %92 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !687
Creating ConsElem Map for :	Node0x7fc9d44c2d00 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d44c2d00:s0 -> Node0x7fc9d44c26a0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d44c26a0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fc9d44c26a0:s0 -> Node0x7fc9d44c44a0;
Creating ConsElem Map for :	Node0x7fc9d44c2e40 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d44c2e40:s0 -> Node0x7fc9d44c27c0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d44c27c0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fc9d44c27c0:s0 -> Node0x7fc9d680e620;
Creating ConsElem Map for :	Node0x7fc9d44c2f80 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d44c2f80:s0 -> Node0x7fc9d44c2850;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d44c2850 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fc9d44c2850:s0 -> Node0x7fc9d44c45a0;
Creating ConsElem Map for :	Node0x7fc9d44c30c0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d44c30c0:s0 -> Node0x7fc9d44c2960;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d44c2960 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fc9d44c2960:s0 -> Node0x7fc9d44c47a0;
Creating ConsElem Map for :	Node0x7fc9d44c3200 [shape=record,shape=Mrecord,label="{0: %struct.bignum_ctx*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d44c3200:s0 -> Node0x7fc9d44c2b30;
EDGE: [0: tymap-size 1]:%struct.bignum_ctx = type opaque
	Node0x7fc9d44c2b30 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x7fc9d44c3640 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fc9d44c3b40 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fc9d44c2c00 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fc9d44c3540 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fc9d44c3c40 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d44c3c40:s0 -> Node0x7fc9d44c40a0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d44c40a0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x7fc9d44c40a0:s0 -> Node0x7fc9d44c46a0;
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !453
[Sink:]   %arrayidx = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !453
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Tainting at offset: 0
Created 32 constraint variable(s) for node of size 8
	Node0x7fc9d44c3d80 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x7fc9d44c3d80:s0 -> Node0x7fc9d44c42a0;
Trying to find element at offset 0
Tainting at offset: 0
Created 32 constraint variable(s) for node of size 24
	Node0x7fc9d44c42a0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x7fc9d44c42a0:s0 -> Node0x7fc9d44c49a0;
Trying to find element at offset 0
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !453
[Sink:]   %arrayidx = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !453
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Tainting at offset: 0
	Node0x7fc9d44c3d80 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x7fc9d44c3d80:s0 -> Node0x7fc9d44c42a0;
Trying to find element at offset 0
Tainting at offset: 0
	Node0x7fc9d44c42a0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x7fc9d44c42a0:s0 -> Node0x7fc9d44c49a0;
Trying to find element at offset 0
DSOURCEGEP INSTRUCTION   %arrayidx19 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !458
[Source:]   %arrayidx19 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !458
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Trying to find element at offset 0
	Node0x7fc9d44c3d80 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x7fc9d44c3d80:s0 -> Node0x7fc9d44c42a0;
Trying to find element at offset 0
CONSTRAINING: 0: %struct.bignum_st*,   array: SCMR: elem 0::0x7fc9d45e0b80
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE: elem 0::0x7fc9d45e1b80
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %14, i32 0, i32 3, !dbg !464
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %14, i32 0, i32 3, !dbg !464
StructType: allocation intermediate:   %14 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !462
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[16,20]0x7fc9d45df610
DSINKGEP INSTRUCTION   %neg29 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %18, i32 0, i32 3, !dbg !474
[Sink:]   %neg29 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %18, i32 0, i32 3, !dbg !474
StructType:::IS STRUCT TY:: allocation intermediate:   %18 = load %struct.bignum_st*, %struct.bignum_st** %aa, align 8, !dbg !473
=>  %aa = alloca %struct.bignum_st*, align 8
FINAL:   %aa = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fc9d44c40a0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x7fc9d44c40a0:s0 -> Node0x7fc9d44c46a0;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg29 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %18, i32 0, i32 3, !dbg !474
[Sink:]   %neg29 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %18, i32 0, i32 3, !dbg !474
StructType:::IS STRUCT TY:: allocation intermediate:   %18 = load %struct.bignum_st*, %struct.bignum_st** %aa, align 8, !dbg !473
=>  %aa = alloca %struct.bignum_st*, align 8
FINAL:   %aa = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fc9d44c40a0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x7fc9d44c40a0:s0 -> Node0x7fc9d44c46a0;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx40 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !492
[Source:]   %arrayidx40 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !492
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Trying to find element at offset 0
	Node0x7fc9d44c3d80 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x7fc9d44c3d80:s0 -> Node0x7fc9d44c42a0;
Trying to find element at offset 0
CONSTRAINING: 0: %struct.bignum_st*,   array: SCMR: elem 0::0x7fc9d45e0b80
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE: elem 0::0x7fc9d45e1b80
DSOURCEGEP INSTRUCTION   %arrayidx45 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !500
[Source:]   %arrayidx45 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !500
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Trying to find element at offset 0
	Node0x7fc9d44c3d80 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x7fc9d44c3d80:s0 -> Node0x7fc9d44c42a0;
Trying to find element at offset 0
CONSTRAINING: 0: %struct.bignum_st*,   array: SCMR: elem 0::0x7fc9d45e0b80
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE: elem 0::0x7fc9d45e1b80
Creating ConsElem Map for :	Node0x7fc9d44c3940 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx66 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !517
[Source:]   %arrayidx66 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !517
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Trying to find element at offset 0
	Node0x7fc9d44c3d80 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x7fc9d44c3d80:s0 -> Node0x7fc9d44c42a0;
Trying to find element at offset 0
CONSTRAINING: 0: %struct.bignum_st*,   array: SCMR: elem 0::0x7fc9d45e0b80
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE: elem 0::0x7fc9d45e1b80
DSOURCEGEP INSTRUCTION   %arrayidx67 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !518
[Source:]   %arrayidx67 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !518
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Trying to find element at offset 0
	Node0x7fc9d44c3d80 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x7fc9d44c3d80:s0 -> Node0x7fc9d44c42a0;
Trying to find element at offset 0
CONSTRAINING: 0: %struct.bignum_st*,   array: SCMR: elem 0::0x7fc9d45e0b80
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE: elem 0::0x7fc9d45e1b80
Creating ConsElem Map for :	Node0x7fc9d44c3440 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fc9d44c3340 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSINKGEP INSTRUCTION   %arrayidx74 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom, !dbg !540
[Sink:]   %arrayidx74 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom, !dbg !540
DSINKGEP INSTRUCTION   %arrayidx74 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom, !dbg !540
[Sink:]   %arrayidx74 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom, !dbg !540
DSOURCEGEP INSTRUCTION   %arrayidx78 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom77, !dbg !545
[Source:]   %arrayidx78 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom77, !dbg !545
DSOURCEGEP INSTRUCTION   %arrayidx81 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom80, !dbg !548
[Source:]   %arrayidx81 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom80, !dbg !548
Creating ConsElem Map for :	Node0x7fc9d44c3a40 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fc9d44c3740 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fc9d44c3840 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx138 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom137, !dbg !669
[Source:]   %arrayidx138 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom137, !dbg !669
Running on BN_nnmod in context []
Running on BN_mod_exp_mont_consttime in context []
Running on BN_div in context []
Running on OPENSSL_cleanse in context []
Running on CRYPTO_free in context []
Running on BN_mul_word in context []
Running on BN_mod_exp_simple in context []
Running on BN_mod_mul in context []
Running on BN_set_params in context []
Running on BN_get_params in context []
Running on BN_value_one in context []
Running on BN_num_bits_word in context []
Running on BN_set_word in context []
Running on BN_num_bits in context []
Running on BN_is_zero in context []
Running on BN_clear_free in context []
Running on BN_get_flags in context []
Running on BN_free in context []
Running on bn_init in context []
Running on llvm.memcpy.p0i8.p0i8.i64 in context []
Running on BN_new in context []
Running on CRYPTO_zalloc in context []
Running on BN_secure_new in context []
Running on bn_expand2 in context []
Running on BN_dup in context []
Running on BN_copy in context []
Running on bn_wexpand in context []
Running on BN_set_flags in context []
Running on BN_swap in context []
Running on BN_clear in context []
Running on BN_get_word in context []
Running on BN_bin2bn in context []
Running on bn_correct_top in context []
Running on BN_bn2binpad in context []
Running on BN_bn2bin in context []
Running on BN_lebin2bn in context []
Running on BN_bn2lebinpad in context []
Running on BN_ucmp in context []
Running on BN_cmp in context []
Running on BN_set_bit in context []
Running on BN_clear_bit in context []
Running on BN_is_bit_set in context []
Running on BN_mask_bits in context []
Running on BN_set_negative in context []
Running on bn_cmp_words in context []
Running on bn_cmp_part_words in context []
Running on BN_consttime_swap in context []
Running on __assert_rtn in context []
Running on BN_security_bits in context []
Running on BN_zero_ex in context []
Running on BN_abs_is_word in context []
Running on BN_is_one in context []
Running on BN_is_word in context []
Running on BN_is_odd in context []
Running on BN_is_negative in context []
Running on BN_to_montgomery in context []
Running on BN_with_flags in context []
Running on BN_GENCB_new in context []
Running on BN_GENCB_free in context []
Running on BN_GENCB_set_old in context []
Running on BN_GENCB_set in context []
Running on BN_GENCB_get_arg in context []
Running on CRYPTO_secure_free in context []
Running on CRYPTO_secure_zalloc in context []
Running on BN_mod_mul_montgomery in context []
Running on BN_from_montgomery in context []
Running on BN_MONT_CTX_new in context []
Running on BN_MONT_CTX_init in context []
Running on BN_MONT_CTX_free in context []
Running on BN_MONT_CTX_set in context []
Running on BN_mod_inverse in context []
Running on BN_lshift in context []
Running on BN_sub_word in context []
Running on BN_MONT_CTX_copy in context []
Running on BN_MONT_CTX_set_locked in context []
Running on CRYPTO_THREAD_read_lock in context []
Running on CRYPTO_THREAD_unlock in context []
Running on CRYPTO_THREAD_write_lock in context []
Running on bn_mul_add_words in context []
Running on bn_sub_words in context []
Running on BN_RECP_CTX_init in context []
Running on BN_RECP_CTX_new in context []
Running on BN_RECP_CTX_free in context []
Running on BN_RECP_CTX_set in context []
Running on BN_mod_mul_reciprocal in context []
Running on BN_div_recp in context []
Running on BN_reciprocal in context []
Running on BN_rshift in context []
Running on BN_usub in context []
Running on BN_add_word in context []
Running on BN_get_flags in context [BN_mod_exp_recp ]
Creating ConsElem Map for :	Node0x7fc9d4492330 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d4492330:s0 -> Node0x7fc9d4492510;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d4492510 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d4492510:s0 -> Node0x7fc9d4490da0;
Creating ConsElem Map for :	Node0x7fc9d44923c0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !369
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !369
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !368
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d45ee5b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d45ee600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d45ee7a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d45ee7f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d45eeb50
Running on BN_num_bits in context [BN_mod_exp_recp ]
Creating ConsElem Map for :	Node0x7fc9d4493260 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d4493260:s0 -> Node0x7fc9d4493000;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d4493000 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fc9d4493000:s0 -> Node0x7fc9d44934a0;
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !369
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !369
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !368
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7fc9d45efab0
Creating ConsElem Map for :	Node0x7fc9d44933a0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fc9d4493160 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !380
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !380
StructType: allocation intermediate:   %5 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !379
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7fc9d45ef920
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !379
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !379
Running on BN_is_one in context [BN_mod_exp_recp ]
Creating ConsElem Map for :	Node0x7fc9d449fc70 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d449fc70:s0 -> Node0x7fc9d449fb50;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d449fb50 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fc9d449fb50:s0 -> Node0x7fc9d449fd00;
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !370
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !370
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !369
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[16,20]0x7fc9d45f1fb0
Running on BN_set_word in context [BN_mod_exp_recp ]
Creating ConsElem Map for :	Node0x7fc9d448dcf0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d448dcf0:s0 -> Node0x7fc9d44bdd10;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d44bdd10 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44bdd10:s0 -> Node0x7fc9d45c7140;
Creating ConsElem Map for :	Node0x7fc9d448dd80 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fc9d448dc60 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !375
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !375
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !374
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fc9d44bdd10 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44bdd10:s0 -> Node0x7fc9d45c7140;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !375
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !375
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !374
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fc9d44bdd10 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44bdd10:s0 -> Node0x7fc9d45c7140;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d44f7980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d44f7b20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d44f7c20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d44f7d40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d44f7de0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !378
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !378
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !379
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x7fc9d44bdd10 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44bdd10:s0 -> Node0x7fc9d45c7140;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !378
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !378
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !379
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x7fc9d44bdd10 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44bdd10:s0 -> Node0x7fc9d45c7140;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !383
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !383
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !382
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fc9d44bdd10 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44bdd10:s0 -> Node0x7fc9d45c7140;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !383
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !383
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !382
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fc9d44bdd10 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44bdd10:s0 -> Node0x7fc9d45c7140;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
Running on BN_RECP_CTX_init in context [BN_mod_exp_recp ]
Unsupported intrinsic: llvm.objectsize
Using taint reachable signature for:   %call = call i8* @__memset_chk(i8* %1, i32 0, i64 64, i64 %4) #5, !dbg !366
RSINKGEP INSTRUCTION   %1 = bitcast %struct.bn_recp_ctx_st* %0 to i8*, !dbg !366
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %1 = bitcast %struct.bn_recp_ctx_st* %0 to i8*, !dbg !366
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
RSINKGEP INSTRUCTION   %1 = bitcast %struct.bn_recp_ctx_st* %0 to i8*, !dbg !366
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x7fc9d44c7170 [shape=record,shape=Mrecord,label="{0: %struct.bn_recp_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d44c7170:s0 -> Node0x7fc9d44c7320;
EDGE: [0: tymap-size 1]:%struct.bn_recp_ctx_st = type { %struct.bignum_st, %struct.bignum_st, i32, i32, i32 }
	Node0x7fc9d44c7320 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44c7320:s0 -> Node0x7fc9d45c7b60;
Running on BN_copy in context [BN_mod_exp_recp ]
Creating ConsElem Map for :	Node0x7fc9d4494c00 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d4494c00:s0 -> Node0x7fc9d44a7680;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d44a7680 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44a7680:s0 -> Node0x7fc9d44a73b0;
Creating ConsElem Map for :	Node0x7fc9d4494d40 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d4494d40:s0 -> Node0x7fc9d44a7680;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d44a7680 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44a7680:s0 -> Node0x7fc9d44a73b0;
Creating ConsElem Map for :	Node0x7fc9d4494ac0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d4494ac0:s0 -> Node0x7fc9d44a7680;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d44a7680 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44a7680:s0 -> Node0x7fc9d44a73b0;
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !384
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !384
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !383
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d45f6a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d45f6ab0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d45f6c50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d45f6ca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d45f7000
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !390
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !390
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !389
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d45f6a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d45f6ab0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d45f6c50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d45f6ca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d45f7000
Creating ConsElem Map for :	Node0x7fc9d4494f80 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d4494f80:s0 -> Node0x7fc9d44a73b0;
EDGE: [0: tymap-size 1]:i64
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
DSOURCEGEP INSTRUCTION   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !393
[Source:]   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !393
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !392
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d45f6a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d45f6ab0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d45f6c50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d45f6ca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d45f7000
Creating ConsElem Map for :	Node0x7fc9d44950c0 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d44950c0:s0 -> Node0x7fc9d44a73b0;
EDGE: [0: tymap-size 1]:i64
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
DSOURCEGEP INSTRUCTION   %top5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !397
[Source:]   %top5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !397
StructType: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !395
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d45f6a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d45f6ab0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d45f6c50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d45f6ca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d45f7000
Creating ConsElem Map for :	Node0x7fc9d4494e80 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !414
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !414
 allocation intermediate:   %13 = load i64*, i64** %B, align 8, !dbg !414
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
Creating ConsElem Map for :	Node0x7fc9d4495200 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx7 = getelementptr inbounds i64, i64* %15, i64 1, !dbg !416
[Source:]   %arrayidx7 = getelementptr inbounds i64, i64* %15, i64 1, !dbg !416
 allocation intermediate:   %15 = load i64*, i64** %B, align 8, !dbg !416
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
Creating ConsElem Map for :	Node0x7fc9d4495300 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx8 = getelementptr inbounds i64, i64* %17, i64 2, !dbg !418
[Source:]   %arrayidx8 = getelementptr inbounds i64, i64* %17, i64 2, !dbg !418
 allocation intermediate:   %17 = load i64*, i64** %B, align 8, !dbg !418
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
Creating ConsElem Map for :	Node0x7fc9d4495400 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx9 = getelementptr inbounds i64, i64* %19, i64 3, !dbg !420
[Source:]   %arrayidx9 = getelementptr inbounds i64, i64* %19, i64 3, !dbg !420
 allocation intermediate:   %19 = load i64*, i64** %B, align 8, !dbg !420
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 3
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
Creating ConsElem Map for :	Node0x7fc9d4495500 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSINKGEP INSTRUCTION   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !423
[Sink:]   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !423
 allocation intermediate:   %22 = load i64*, i64** %A, align 8, !dbg !423
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
Created 1 constraint variable(s) for node of size 1
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !423
[Sink:]   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !423
 allocation intermediate:   %22 = load i64*, i64** %A, align 8, !dbg !423
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !426
[Sink:]   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !426
 allocation intermediate:   %24 = load i64*, i64** %A, align 8, !dbg !426
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !426
[Sink:]   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !426
 allocation intermediate:   %24 = load i64*, i64** %A, align 8, !dbg !426
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !429
[Sink:]   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !429
 allocation intermediate:   %26 = load i64*, i64** %A, align 8, !dbg !429
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !429
[Sink:]   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !429
 allocation intermediate:   %26 = load i64*, i64** %A, align 8, !dbg !429
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !432
[Sink:]   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !432
 allocation intermediate:   %28 = load i64*, i64** %A, align 8, !dbg !432
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 3
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 3
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !432
[Sink:]   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !432
 allocation intermediate:   %28 = load i64*, i64** %A, align 8, !dbg !432
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 3
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 3
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top15 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %32, i32 0, i32 1, !dbg !440
[Source:]   %top15 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %32, i32 0, i32 1, !dbg !440
StructType: allocation intermediate:   %32 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !439
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d45f6a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d45f6ab0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d45f6c50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d45f6ca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d45f7000
DSOURCEGEP INSTRUCTION   %arrayidx16 = getelementptr inbounds i64, i64* %34, i64 2, !dbg !443
[Source:]   %arrayidx16 = getelementptr inbounds i64, i64* %34, i64 2, !dbg !443
 allocation intermediate:   %34 = load i64*, i64** %B, align 8, !dbg !443
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 2
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fc9d47f3f90
DSINKGEP INSTRUCTION   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !445
[Sink:]   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !445
 allocation intermediate:   %36 = load i64*, i64** %A, align 8, !dbg !445
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !445
[Sink:]   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !445
 allocation intermediate:   %36 = load i64*, i64** %A, align 8, !dbg !445
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx19 = getelementptr inbounds i64, i64* %37, i64 1, !dbg !447
[Source:]   %arrayidx19 = getelementptr inbounds i64, i64* %37, i64 1, !dbg !447
 allocation intermediate:   %37 = load i64*, i64** %B, align 8, !dbg !447
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 1
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fc9d47f3f90
DSINKGEP INSTRUCTION   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !448
[Sink:]   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !448
 allocation intermediate:   %39 = load i64*, i64** %A, align 8, !dbg !448
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !448
[Sink:]   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !448
 allocation intermediate:   %39 = load i64*, i64** %A, align 8, !dbg !448
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx22 = getelementptr inbounds i64, i64* %40, i64 0, !dbg !450
[Source:]   %arrayidx22 = getelementptr inbounds i64, i64* %40, i64 0, !dbg !450
 allocation intermediate:   %40 = load i64*, i64** %B, align 8, !dbg !450
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fc9d47f3f90
DSINKGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !451
[Sink:]   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !451
 allocation intermediate:   %42 = load i64*, i64** %A, align 8, !dbg !451
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !451
[Sink:]   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !451
 allocation intermediate:   %42 = load i64*, i64** %A, align 8, !dbg !451
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top29 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %45, i32 0, i32 1, !dbg !462
[Source:]   %top29 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %45, i32 0, i32 1, !dbg !462
StructType: allocation intermediate:   %45 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !461
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d45f6a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d45f6ab0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d45f6c50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d45f6ca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d45f7000
DSINKGEP INSTRUCTION   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !464
[Sink:]   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !464
StructType:::IS STRUCT TY:: allocation intermediate:   %47 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !463
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fc9d44a7680 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44a7680:s0 -> Node0x7fc9d44a73b0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSINKGEP INSTRUCTION   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !464
[Sink:]   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !464
StructType:::IS STRUCT TY:: allocation intermediate:   %47 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !463
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fc9d44a7680 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44a7680:s0 -> Node0x7fc9d44a73b0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %48, i32 0, i32 3, !dbg !467
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %48, i32 0, i32 3, !dbg !467
StructType: allocation intermediate:   %48 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !466
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d45f6a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d45f6ab0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d45f6c50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d45f6ca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d45f7000
DSINKGEP INSTRUCTION   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !469
[Sink:]   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !469
StructType:::IS STRUCT TY:: allocation intermediate:   %50 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !468
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fc9d44a7680 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44a7680:s0 -> Node0x7fc9d44a73b0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !469
[Sink:]   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !469
StructType:::IS STRUCT TY:: allocation intermediate:   %50 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !468
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fc9d44a7680 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44a7680:s0 -> Node0x7fc9d44a73b0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
Running on BN_RECP_CTX_set in context [BN_mod_exp_recp ]
Creating ConsElem Map for :	Node0x7fc9d46df6c0 [shape=record,shape=Mrecord,label="{0: %struct.bn_recp_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d46df6c0:s0 -> Node0x7fc9d46e6ad0;
EDGE: [0: tymap-size 1]:%struct.bn_recp_ctx_st = type { %struct.bignum_st, %struct.bignum_st, i32, i32, i32 }
	Node0x7fc9d46e6ad0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e6ad0:s0 -> Node0x7fc9d45c7ef0;
Creating ConsElem Map for :	Node0x7fc9d46df800 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d46df800:s0 -> Node0x7fc9d46df320;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d46df320 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fc9d46df320:s0 -> Node0x7fc9d46dfb80;
Creating ConsElem Map for :	Node0x7fc9d46df940 [shape=record,shape=Mrecord,label="{0: %struct.bignum_ctx*,  : SM\n|{<s0>0}}"];
	Node0x7fc9d46df940:s0 -> Node0x7fc9d46df4f0;
EDGE: [0: tymap-size 1]:%struct.bignum_ctx = type opaque
	Node0x7fc9d46df4f0 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x7fc9d46df5c0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSINKGEP INSTRUCTION   %num_bits = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %4, i32 0, i32 2, !dbg !381
[Sink:]   %num_bits = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %4, i32 0, i32 2, !dbg !381
StructType:::IS STRUCT TY:: allocation intermediate:   %4 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !380
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Tainting at offset: 48
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
Tainting at offset: 48
	Node0x7fc9d46e6ad0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e6ad0:s0 -> Node0x7fc9d45c7ef0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %num_bits = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %4, i32 0, i32 2, !dbg !381
[Sink:]   %num_bits = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %4, i32 0, i32 2, !dbg !381
StructType:::IS STRUCT TY:: allocation intermediate:   %4 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !380
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Tainting at offset: 48
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
Tainting at offset: 48
	Node0x7fc9d46e6ad0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e6ad0:s0 -> Node0x7fc9d45c7ef0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %shift = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %5, i32 0, i32 3, !dbg !384
[Sink:]   %shift = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %5, i32 0, i32 3, !dbg !384
StructType:::IS STRUCT TY:: allocation intermediate:   %5 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !383
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Tainting at offset: 52
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
Tainting at offset: 52
	Node0x7fc9d46e6ad0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e6ad0:s0 -> Node0x7fc9d45c7ef0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %shift = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %5, i32 0, i32 3, !dbg !384
[Sink:]   %shift = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %5, i32 0, i32 3, !dbg !384
StructType:::IS STRUCT TY:: allocation intermediate:   %5 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !383
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Tainting at offset: 52
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
Tainting at offset: 52
	Node0x7fc9d46e6ad0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e6ad0:s0 -> Node0x7fc9d45c7ef0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on BN_is_zero in context [BN_mod_exp_recp ]
Creating ConsElem Map for :	Node0x7fc9d44942f0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d44942f0:s0 -> Node0x7fc9d44941d0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d44941d0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fc9d44941d0:s0 -> Node0x7fc9d44a2570;
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !367
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !367
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !366
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7fc9d6a01cc0
Running on BN_mod_mul_reciprocal in context [BN_mod_exp_recp ]
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %0), !dbg !381
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !380
REACHABLE SOURCE:   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !380
	Node0x7fc9d46e6b60 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !380
Using taint reachable signature for:   %call = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %1), !dbg !384
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !382
REACHABLE SOURCE:   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !382
	Node0x7fc9d46e6b60 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !382
Using taint reachable signature for:   %call5 = call i32 @BN_sqr(%struct.bignum_st* %5, %struct.bignum_st* %6, %struct.bignum_ctx* %7), !dbg !404
RSINKGEP INSTRUCTION   %6 = load %struct.bignum_st*, %struct.bignum_st** %x.addr, align 8, !dbg !402
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %5 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !399
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !403
REACHABLE SOURCE:   %6 = load %struct.bignum_st*, %struct.bignum_st** %x.addr, align 8, !dbg !402
REACHABLE SOURCE:   %5 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !399
REACHABLE SOURCE:   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !403
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
	Node0x7fc9d46e6b60 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %6 = load %struct.bignum_st*, %struct.bignum_st** %x.addr, align 8, !dbg !402
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %5 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !399
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !403
Using taint reachable signature for:   %call8 = call i32 @BN_mul(%struct.bignum_st* %8, %struct.bignum_st* %9, %struct.bignum_st* %10, %struct.bignum_ctx* %11), !dbg !414
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_st*, %struct.bignum_st** %x.addr, align 8, !dbg !411
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %8 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !408
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !413
RSINKGEP INSTRUCTION   %10 = load %struct.bignum_st*, %struct.bignum_st** %y.addr, align 8, !dbg !412
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %9 = load %struct.bignum_st*, %struct.bignum_st** %x.addr, align 8, !dbg !411
REACHABLE SOURCE:   %8 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !408
REACHABLE SOURCE:   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !413
REACHABLE SOURCE:   %10 = load %struct.bignum_st*, %struct.bignum_st** %y.addr, align 8, !dbg !412
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
	Node0x7fc9d46e6b60 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_st*, %struct.bignum_st** %x.addr, align 8, !dbg !411
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %8 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !408
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !413
RSINKGEP INSTRUCTION   %10 = load %struct.bignum_st*, %struct.bignum_st** %y.addr, align 8, !dbg !412
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %18), !dbg !430
RSINKGEP INSTRUCTION   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !429
REACHABLE SOURCE:   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !429
	Node0x7fc9d46e6b60 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !429
Creating ConsElem Map for :	Node0x7fc9d46e0960 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d46e0960:s0 -> Node0x7fc9d46e1320;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d46e1320 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fc9d46e1320:s0 -> Node0x7fc9d46e15f0;
Creating ConsElem Map for :	Node0x7fc9d46e0aa0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d46e0aa0:s0 -> Node0x7fc9d46e1320;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d46e1320 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fc9d46e1320:s0 -> Node0x7fc9d46e15f0;
Creating ConsElem Map for :	Node0x7fc9d46e0be0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d46e0be0:s0 -> Node0x7fc9d46e1320;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d46e1320 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fc9d46e1320:s0 -> Node0x7fc9d46e15f0;
Creating ConsElem Map for :	Node0x7fc9d46e0d20 [shape=record,shape=Mrecord,label="{0: %struct.bn_recp_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d46e0d20:s0 -> Node0x7fc9d46e0780;
EDGE: [0: tymap-size 1]:%struct.bn_recp_ctx_st = type { %struct.bignum_st, %struct.bignum_st, i32, i32, i32 }
	Node0x7fc9d46e0780 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e0780:s0 -> Node0x7fc9d45c7f80;
Creating ConsElem Map for :	Node0x7fc9d46e0e60 [shape=record,shape=Mrecord,label="{0: %struct.bignum_ctx*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d46e0e60:s0 -> Node0x7fc9d46e0890;
EDGE: [0: tymap-size 1]:%struct.bignum_ctx = type opaque
	Node0x7fc9d46e0890 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x7fc9d46e0fa0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fc9d46e10a0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d46e10a0:s0 -> Node0x7fc9d46e1320;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d46e1320 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fc9d46e1320:s0 -> Node0x7fc9d46e15f0;
Creating ConsElem Map for :	Node0x7fc9d46e11e0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d46e11e0:s0 -> Node0x7fc9d46e1320;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d46e1320 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fc9d46e1320:s0 -> Node0x7fc9d46e15f0;
Running on BN_is_bit_set in context [BN_mod_exp_recp ]
Creating ConsElem Map for :	Node0x7fc9d4497c20 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d4497c20:s0 -> Node0x7fc9d44979c0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d44979c0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fc9d44979c0:s0 -> Node0x7fc9d4498060;
Creating ConsElem Map for :	Node0x7fc9d4497d60 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fc9d4497b20 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fc9d4497e60 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fc9d4497f60 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 1, !dbg !385
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 1, !dbg !385
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !383
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: 0: i64*,  8: i32,  20: i32,  : CRE[8,12]0x7fc9d47f84b0
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 0, !dbg !392
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 0, !dbg !392
StructType: allocation intermediate:   %7 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !391
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: 0: i64*,  8: i32,  20: i32,  : CRE[0,8]0x7fc9d47f8430
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %8, i64 %idxprom, !dbg !391
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %8, i64 %idxprom, !dbg !391
Running on BN_RECP_CTX_free in context [BN_mod_exp_recp ]
Using taint reachable signature for:   call void @CRYPTO_free(i8* %6, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str47, i32 0, i32 0), i32 41), !dbg !382
RSINKGEP INSTRUCTION   %6 = bitcast %struct.bn_recp_ctx_st* %5 to i8*, !dbg !382
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str47, i32 0, i32 0)
Creating ConsElem Map for :	Node0x7fc9d46e3c60 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str47 = private unnamed_addr constant [10 x i8] c\"bn_recp.c\\00\", align 1\n|{<s0>0}}"];
REACHABLE SOURCE:   %6 = bitcast %struct.bn_recp_ctx_st* %5 to i8*, !dbg !382
REACHABLE SOURCE: i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str47, i32 0, i32 0)
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
	Node0x7fc9d46e3c60 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str47 = private unnamed_addr constant [10 x i8] c\"bn_recp.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %6 = bitcast %struct.bn_recp_ctx_st* %5 to i8*, !dbg !382
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str47, i32 0, i32 0)
Creating ConsElem Map for :	Node0x7fc9d44c7720 [shape=record,shape=Mrecord,label="{0: %struct.bn_recp_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d44c7720:s0 -> Node0x7fc9d46e14f0;
EDGE: [0: tymap-size 1]:%struct.bn_recp_ctx_st = type { %struct.bignum_st, %struct.bignum_st, i32, i32, i32 }
	Node0x7fc9d46e14f0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e14f0:s0 -> Node0x7fc9d45c7de0;
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %3, i32 0, i32 4, !dbg !379
[Source:]   %flags = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %3, i32 0, i32 4, !dbg !379
StructType: allocation intermediate:   %3 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !377
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Trying to find element at offset 56
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 56
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,24]0x7fc9d6a09190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[24,48]0x7fc9d6a092b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[48,52]0x7fc9d6a09300
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[52,56]0x7fc9d6a094a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[56,60]0x7fc9d6a094f0
Running on BN_is_zero in context [BN_num_bits ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !367
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !367
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !366
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7fc9d6a01cc0
Running on BN_num_bits_word in context [BN_num_bits ]
Creating ConsElem Map for :	Node0x7fc9d4493c00 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom, !dbg !384
[Source:]   %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom, !dbg !384
Created 256 constraint variable(s) for node of size 1
Creating ConsElem Map for :	Node0x7fc9d4493ae0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx11 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom10, !dbg !390
[Source:]   %arrayidx11 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom10, !dbg !390
DSOURCEGEP INSTRUCTION   %arrayidx21 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom20, !dbg !402
[Source:]   %arrayidx21 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom20, !dbg !402
DSOURCEGEP INSTRUCTION   %arrayidx28 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom27, !dbg !408
[Source:]   %arrayidx28 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom27, !dbg !408
DSOURCEGEP INSTRUCTION   %arrayidx41 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom40, !dbg !424
[Source:]   %arrayidx41 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom40, !dbg !424
DSOURCEGEP INSTRUCTION   %arrayidx48 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom47, !dbg !430
[Source:]   %arrayidx48 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom47, !dbg !430
DSOURCEGEP INSTRUCTION   %arrayidx58 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom57, !dbg !441
[Source:]   %arrayidx58 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom57, !dbg !441
DSOURCEGEP INSTRUCTION   %arrayidx64 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom63, !dbg !446
[Source:]   %arrayidx64 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom63, !dbg !446
Running on BN_abs_is_word in context [BN_is_one ]
Creating ConsElem Map for :	Node0x7fc9d449fff0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d449fff0:s0 -> Node0x7fc9d449fed0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d449fed0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fc9d449fed0:s0 -> Node0x7fc9d44a0110;
Creating ConsElem Map for :	Node0x7fc9d44a0080 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !369
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !369
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !368
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[8,12]0x7fc9d690c1f0
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !373
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !373
StructType: allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !372
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x7fc9d690c1d0
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %3, i64 0, !dbg !372
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %3, i64 0, !dbg !372
 allocation intermediate:   %3 = load i64*, i64** %d, align 8, !dbg !373
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !373
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !373
=>  %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !372
 allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !372
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x7fc9d690c1d0
DSOURCEGEP INSTRUCTION   %top3 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 1, !dbg !381
[Source:]   %top3 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 1, !dbg !381
StructType: allocation intermediate:   %7 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !380
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[8,12]0x7fc9d690c1f0
Running on bn_expand in context [BN_set_word ]
Creating ConsElem Map for :	Node0x7fc9d448e600 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d448e600:s0 -> Node0x7fc9d448db40;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d448db40 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d448db40:s0 -> Node0x7fc9d45c7440;
Creating ConsElem Map for :	Node0x7fc9d448e740 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fc9d448e4c0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d448e4c0:s0 -> Node0x7fc9d448db40;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d448db40 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d448db40:s0 -> Node0x7fc9d45c7440;
DSOURCEGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 2, !dbg !379
[Source:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 2, !dbg !379
StructType: allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d69082f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d6908860
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d69088b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d6908900
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d6908a70
Running on bn_init in context [BN_RECP_CTX_init ]
Creating ConsElem Map for :	Node0x7fc9d44aa6c0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d44aa6c0:s0 -> Node0x7fc9d44aa7e0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d44aa7e0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44aa7e0:s0 -> Node0x7fc9d45c7040;
Running on bn_wexpand in context [BN_copy ]
Creating ConsElem Map for :	Node0x7fc9d4496e60 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d4496e60:s0 -> Node0x7fc9d4496f80;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d4496f80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d4496f80:s0 -> Node0x7fc9d4497410;
Creating ConsElem Map for :	Node0x7fc9d4496ef0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !370
[Source:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !370
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !369
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d6a0c290
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d6a18a10
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d6a18a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d6a18c00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d6a18c50
Running on BN_get_flags in context [BN_copy ]
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !369
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !369
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !368
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d45ee5b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d45ee600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d45ee7a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d45ee7f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d45eeb50
Running on BN_set_flags in context [BN_copy ]
Creating ConsElem Map for :	Node0x7fc9d4497530 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d4497530:s0 -> Node0x7fc9d44a1650;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d44a1650 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44a1650:s0 -> Node0x7fc9d44bd080;
Creating ConsElem Map for :	Node0x7fc9d4497600 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !370
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !370
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !369
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d6b48580
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d6b485a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d6b48620
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d6b48760
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d6b48780
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !370
[Sink:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !370
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !369
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 20
	Node0x7fc9d44a1650 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44a1650:s0 -> Node0x7fc9d44bd080;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 20
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !370
[Sink:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !370
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !369
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 20
	Node0x7fc9d44a1650 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44a1650:s0 -> Node0x7fc9d44bd080;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 20
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
Running on BN_copy in context [BN_RECP_CTX_set ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !384
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !384
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !383
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d45f6a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d45f6ab0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d45f6c50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d45f6ca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d45f7000
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !390
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !390
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !389
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d45f6a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d45f6ab0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d45f6c50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d45f6ca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d45f7000
DSOURCEGEP INSTRUCTION   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !393
[Source:]   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !393
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !392
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d45f6a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d45f6ab0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d45f6c50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d45f6ca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d45f7000
DSOURCEGEP INSTRUCTION   %top5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !397
[Source:]   %top5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !397
StructType: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !395
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d45f6a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d45f6ab0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d45f6c50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d45f6ca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d45f7000
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !414
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !414
 allocation intermediate:   %13 = load i64*, i64** %B, align 8, !dbg !414
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fc9d47f3f90
DSOURCEGEP INSTRUCTION   %arrayidx7 = getelementptr inbounds i64, i64* %15, i64 1, !dbg !416
[Source:]   %arrayidx7 = getelementptr inbounds i64, i64* %15, i64 1, !dbg !416
 allocation intermediate:   %15 = load i64*, i64** %B, align 8, !dbg !416
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 1
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fc9d47f3f90
DSOURCEGEP INSTRUCTION   %arrayidx8 = getelementptr inbounds i64, i64* %17, i64 2, !dbg !418
[Source:]   %arrayidx8 = getelementptr inbounds i64, i64* %17, i64 2, !dbg !418
 allocation intermediate:   %17 = load i64*, i64** %B, align 8, !dbg !418
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 2
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fc9d47f3f90
DSOURCEGEP INSTRUCTION   %arrayidx9 = getelementptr inbounds i64, i64* %19, i64 3, !dbg !420
[Source:]   %arrayidx9 = getelementptr inbounds i64, i64* %19, i64 3, !dbg !420
 allocation intermediate:   %19 = load i64*, i64** %B, align 8, !dbg !420
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 3
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 3
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fc9d47f3f90
DSINKGEP INSTRUCTION   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !423
[Sink:]   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !423
 allocation intermediate:   %22 = load i64*, i64** %A, align 8, !dbg !423
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !423
[Sink:]   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !423
 allocation intermediate:   %22 = load i64*, i64** %A, align 8, !dbg !423
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !426
[Sink:]   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !426
 allocation intermediate:   %24 = load i64*, i64** %A, align 8, !dbg !426
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !426
[Sink:]   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !426
 allocation intermediate:   %24 = load i64*, i64** %A, align 8, !dbg !426
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !429
[Sink:]   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !429
 allocation intermediate:   %26 = load i64*, i64** %A, align 8, !dbg !429
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !429
[Sink:]   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !429
 allocation intermediate:   %26 = load i64*, i64** %A, align 8, !dbg !429
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !432
[Sink:]   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !432
 allocation intermediate:   %28 = load i64*, i64** %A, align 8, !dbg !432
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 3
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 3
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !432
[Sink:]   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !432
 allocation intermediate:   %28 = load i64*, i64** %A, align 8, !dbg !432
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 3
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 3
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top15 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %32, i32 0, i32 1, !dbg !440
[Source:]   %top15 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %32, i32 0, i32 1, !dbg !440
StructType: allocation intermediate:   %32 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !439
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d45f6a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d45f6ab0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d45f6c50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d45f6ca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d45f7000
DSOURCEGEP INSTRUCTION   %arrayidx16 = getelementptr inbounds i64, i64* %34, i64 2, !dbg !443
[Source:]   %arrayidx16 = getelementptr inbounds i64, i64* %34, i64 2, !dbg !443
 allocation intermediate:   %34 = load i64*, i64** %B, align 8, !dbg !443
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 2
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fc9d47f3f90
DSINKGEP INSTRUCTION   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !445
[Sink:]   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !445
 allocation intermediate:   %36 = load i64*, i64** %A, align 8, !dbg !445
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !445
[Sink:]   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !445
 allocation intermediate:   %36 = load i64*, i64** %A, align 8, !dbg !445
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx19 = getelementptr inbounds i64, i64* %37, i64 1, !dbg !447
[Source:]   %arrayidx19 = getelementptr inbounds i64, i64* %37, i64 1, !dbg !447
 allocation intermediate:   %37 = load i64*, i64** %B, align 8, !dbg !447
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 1
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fc9d47f3f90
DSINKGEP INSTRUCTION   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !448
[Sink:]   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !448
 allocation intermediate:   %39 = load i64*, i64** %A, align 8, !dbg !448
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !448
[Sink:]   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !448
 allocation intermediate:   %39 = load i64*, i64** %A, align 8, !dbg !448
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx22 = getelementptr inbounds i64, i64* %40, i64 0, !dbg !450
[Source:]   %arrayidx22 = getelementptr inbounds i64, i64* %40, i64 0, !dbg !450
 allocation intermediate:   %40 = load i64*, i64** %B, align 8, !dbg !450
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fc9d47f3f90
DSINKGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !451
[Sink:]   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !451
 allocation intermediate:   %42 = load i64*, i64** %A, align 8, !dbg !451
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !451
[Sink:]   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !451
 allocation intermediate:   %42 = load i64*, i64** %A, align 8, !dbg !451
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top29 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %45, i32 0, i32 1, !dbg !462
[Source:]   %top29 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %45, i32 0, i32 1, !dbg !462
StructType: allocation intermediate:   %45 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !461
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d45f6a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d45f6ab0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d45f6c50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d45f6ca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d45f7000
DSINKGEP INSTRUCTION   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !464
[Sink:]   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !464
StructType:::IS STRUCT TY:: allocation intermediate:   %47 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !463
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fc9d44a7680 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44a7680:s0 -> Node0x7fc9d44a73b0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSINKGEP INSTRUCTION   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !464
[Sink:]   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !464
StructType:::IS STRUCT TY:: allocation intermediate:   %47 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !463
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fc9d44a7680 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44a7680:s0 -> Node0x7fc9d44a73b0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %48, i32 0, i32 3, !dbg !467
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %48, i32 0, i32 3, !dbg !467
StructType: allocation intermediate:   %48 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !466
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d45f6a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d45f6ab0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d45f6c50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d45f6ca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d45f7000
DSINKGEP INSTRUCTION   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !469
[Sink:]   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !469
StructType:::IS STRUCT TY:: allocation intermediate:   %50 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !468
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fc9d44a7680 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44a7680:s0 -> Node0x7fc9d44a73b0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !469
[Sink:]   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !469
StructType:::IS STRUCT TY:: allocation intermediate:   %50 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !468
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fc9d44a7680 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44a7680:s0 -> Node0x7fc9d44a73b0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
Running on BN_set_word in context [BN_RECP_CTX_set ]
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !375
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !375
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !374
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fc9d44bdd10 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44bdd10:s0 -> Node0x7fc9d45c7140;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !375
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !375
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !374
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fc9d44bdd10 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44bdd10:s0 -> Node0x7fc9d45c7140;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d44f7980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d44f7b20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d44f7c20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d44f7d40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d44f7de0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !378
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !378
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !379
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x7fc9d44bdd10 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44bdd10:s0 -> Node0x7fc9d45c7140;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !378
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !378
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !379
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x7fc9d44bdd10 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44bdd10:s0 -> Node0x7fc9d45c7140;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !383
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !383
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !382
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fc9d44bdd10 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44bdd10:s0 -> Node0x7fc9d45c7140;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !383
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !383
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !382
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fc9d44bdd10 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44bdd10:s0 -> Node0x7fc9d45c7140;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
Running on BN_num_bits in context [BN_RECP_CTX_set ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !369
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !369
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !368
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7fc9d45efab0
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !380
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !380
StructType: allocation intermediate:   %5 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !379
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7fc9d45ef920
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !379
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !379
Running on BN_div_recp in context [BN_mod_mul_reciprocal ]
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %0), !dbg !389
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !388
REACHABLE SOURCE:   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !388
	Node0x7fc9d46e6b60 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !388
Using taint reachable signature for:   %call = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %1), !dbg !391
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !390
REACHABLE SOURCE:   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !390
	Node0x7fc9d46e6b60 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !390
Using taint reachable signature for:   %call1 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %2), !dbg !394
RSINKGEP INSTRUCTION   %2 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !393
REACHABLE SOURCE:   %2 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !393
	Node0x7fc9d46e6b60 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %2 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !393
Using taint reachable signature for:   %call2 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %5), !dbg !404
RSINKGEP INSTRUCTION   %5 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !403
REACHABLE SOURCE:   %5 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !403
	Node0x7fc9d46e6b60 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %5 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !403
Using taint reachable signature for:   %call6 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %8), !dbg !414
RSINKGEP INSTRUCTION   %8 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !413
REACHABLE SOURCE:   %8 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !413
	Node0x7fc9d46e6b60 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %8 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !413
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %18), !dbg !446
RSINKGEP INSTRUCTION   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !444
REACHABLE SOURCE:   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !444
	Node0x7fc9d46e6b60 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !444
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %19), !dbg !449
RSINKGEP INSTRUCTION   %19 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !448
REACHABLE SOURCE:   %19 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !448
	Node0x7fc9d46e6b60 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %19 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !448
Using taint reachable signature for:   %call39 = call i32 @BN_rshift(%struct.bignum_st* %36, %struct.bignum_st* %37, i32 %39), !dbg !493
RSINKGEP INSTRUCTION   %36 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !488
RSINKGEP INSTRUCTION   %37 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !490
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x7fc9d46e3ac0 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
REACHABLE SOURCE:   %36 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !488
REACHABLE SOURCE:   %37 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !490
	Node0x7fc9d46e3ac0 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
RSINKGEP INSTRUCTION   %36 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !488
RSINKGEP INSTRUCTION   %37 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !490
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call44 = call i32 @BN_mul(%struct.bignum_st* %40, %struct.bignum_st* %41, %struct.bignum_st* %Nr43, %struct.bignum_ctx* %43), !dbg !502
RSINKGEP INSTRUCTION   %40 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !496
RSINKGEP INSTRUCTION   %41 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !498
RSINKGEP INSTRUCTION   %Nr43 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %42, i32 0, i32 1, !dbg !500
[Sink:]   %Nr43 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %42, i32 0, i32 1, !dbg !500
StructType:::IS STRUCT TY:: allocation intermediate:   %42 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !499
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Tainting at offset: 1
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
Created 1 constraint variable(s) for node of size 1
	Node0x7fc9d46e29a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e29a0:s0 -> Node0x7fc9d45c8080;
Adding 1 elements
Tainting at offset: 1
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %43 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !501
Creating ConsElem Map for :	Node0x7fc9d46e3b90 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
REACHABLE SOURCE:   %40 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !496
REACHABLE SOURCE:   %41 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !498
REACHABLE SOURCE:   %Nr43 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %42, i32 0, i32 1, !dbg !500
REACHABLE SOURCE:   %43 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !501
	Node0x7fc9d46e3b90 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x7fc9d46e3ac0 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSOURCEGEP INSTRUCTION   %Nr43 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %42, i32 0, i32 1, !dbg !500
[Source:]   %Nr43 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %42, i32 0, i32 1, !dbg !500
StructType: allocation intermediate:   %42 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !499
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Trying to find element at offset 1
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x7fc9d6a226e0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x7fc9d6a226e0
	Node0x7fc9d46e6b60 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %40 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !496
RSINKGEP INSTRUCTION   %41 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !498
RSINKGEP INSTRUCTION   %Nr43 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %42, i32 0, i32 1, !dbg !500
[Sink:]   %Nr43 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %42, i32 0, i32 1, !dbg !500
StructType:::IS STRUCT TY:: allocation intermediate:   %42 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !499
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Tainting at offset: 1
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fc9d46e29a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e29a0:s0 -> Node0x7fc9d45c8080;
Adding 1 elements
Tainting at offset: 1
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %43 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !501
Using taint reachable signature for:   %call49 = call i32 @BN_rshift(%struct.bignum_st* %44, %struct.bignum_st* %45, i32 %sub), !dbg !512
RSINKGEP INSTRUCTION   %44 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !505
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %45 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !507
REACHABLE SOURCE:   %44 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !505
REACHABLE SOURCE:   %45 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !507
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
	Node0x7fc9d46e3b90 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %44 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !505
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %45 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !507
Using taint reachable signature for:   %call54 = call i32 @BN_mul(%struct.bignum_st* %50, %struct.bignum_st* %N53, %struct.bignum_st* %52, %struct.bignum_ctx* %53), !dbg !524
RSINKGEP INSTRUCTION   %53 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !523
RSINKGEP INSTRUCTION   %52 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !522
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %N53 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %51, i32 0, i32 0, !dbg !521
[Sink:]   %N53 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %51, i32 0, i32 0, !dbg !521
StructType:::IS STRUCT TY:: allocation intermediate:   %51 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !520
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Tainting at offset: 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fc9d46e29a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e29a0:s0 -> Node0x7fc9d45c8080;
Adding 1 elements
Tainting at offset: 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %50 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !518
REACHABLE SOURCE:   %53 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !523
REACHABLE SOURCE:   %52 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !522
REACHABLE SOURCE:   %N53 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %51, i32 0, i32 0, !dbg !521
REACHABLE SOURCE:   %50 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !518
	Node0x7fc9d46e6b60 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
RSOURCEGEP INSTRUCTION   %N53 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %51, i32 0, i32 0, !dbg !521
[Source:]   %N53 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %51, i32 0, i32 0, !dbg !521
StructType: allocation intermediate:   %51 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !520
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x7fc9d6a226e0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x7fc9d6a226e0
	Node0x7fc9d46e3b90 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %53 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !523
RSINKGEP INSTRUCTION   %52 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !522
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %N53 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %51, i32 0, i32 0, !dbg !521
[Sink:]   %N53 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %51, i32 0, i32 0, !dbg !521
StructType:::IS STRUCT TY:: allocation intermediate:   %51 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !520
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Tainting at offset: 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fc9d46e29a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e29a0:s0 -> Node0x7fc9d45c8080;
Adding 1 elements
Tainting at offset: 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %50 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !518
Using taint reachable signature for:   %call58 = call i32 @BN_usub(%struct.bignum_st* %54, %struct.bignum_st* %55, %struct.bignum_st* %56), !dbg !531
RSINKGEP INSTRUCTION   %56 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !530
RSINKGEP INSTRUCTION   %55 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !529
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %54 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !527
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %56 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !530
REACHABLE SOURCE:   %55 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !529
REACHABLE SOURCE:   %54 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !527
	Node0x7fc9d46e3b90 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
RSINKGEP INSTRUCTION   %56 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !530
RSINKGEP INSTRUCTION   %55 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !529
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %54 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !527
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   call void @ERR_put_error(i32 3, i32 130, i32 101, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str47, i32 0, i32 0), i32 154), !dbg !549
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str47, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str47, i32 0, i32 0)
	Node0x7fc9d46e3c60 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str47 = private unnamed_addr constant [10 x i8] c\"bn_recp.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str47, i32 0, i32 0)
Using taint reachable signature for:   %call70 = call i32 @BN_usub(%struct.bignum_st* %61, %struct.bignum_st* %62, %struct.bignum_st* %N69), !dbg !557
RSINKGEP INSTRUCTION   %N69 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %63, i32 0, i32 0, !dbg !556
[Sink:]   %N69 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %63, i32 0, i32 0, !dbg !556
StructType:::IS STRUCT TY:: allocation intermediate:   %63 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !555
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Tainting at offset: 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fc9d46e29a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e29a0:s0 -> Node0x7fc9d45c8080;
Adding 1 elements
Tainting at offset: 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %61 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !552
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %62 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !554
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %N69 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %63, i32 0, i32 0, !dbg !556
REACHABLE SOURCE:   %61 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !552
REACHABLE SOURCE:   %62 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !554
RSOURCEGEP INSTRUCTION   %N69 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %63, i32 0, i32 0, !dbg !556
[Source:]   %N69 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %63, i32 0, i32 0, !dbg !556
StructType: allocation intermediate:   %63 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !555
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x7fc9d6a226e0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x7fc9d6a226e0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
RSINKGEP INSTRUCTION   %N69 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %63, i32 0, i32 0, !dbg !556
[Sink:]   %N69 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %63, i32 0, i32 0, !dbg !556
StructType:::IS STRUCT TY:: allocation intermediate:   %63 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !555
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Tainting at offset: 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fc9d46e29a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e29a0:s0 -> Node0x7fc9d45c8080;
Adding 1 elements
Tainting at offset: 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %61 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !552
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %62 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !554
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call74 = call i32 @BN_add_word(%struct.bignum_st* %64, i64 1), !dbg !562
RSINKGEP INSTRUCTION   %64 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !560
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %64 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !560
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
RSINKGEP INSTRUCTION   %64 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !560
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %74), !dbg !584
RSINKGEP INSTRUCTION   %74 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !583
REACHABLE SOURCE:   %74 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !583
	Node0x7fc9d46e6b60 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %74 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !583
Creating ConsElem Map for :	Node0x7fc9d46e2c80 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d46e2c80:s0 -> Node0x7fc9d46e25f0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d46e25f0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x7fc9d46e25f0:s0 -> Node0x7fc9d46e3d30;
Creating ConsElem Map for :	Node0x7fc9d46e2dc0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d46e2dc0:s0 -> Node0x7fc9d46e27a0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d46e27a0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fc9d46e27a0:s0 -> Node0x7fc9d46e3e30;
Creating ConsElem Map for :	Node0x7fc9d46e2f00 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d46e2f00:s0 -> Node0x7fc9d46e27a0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d46e27a0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fc9d46e27a0:s0 -> Node0x7fc9d46e3e30;
Creating ConsElem Map for :	Node0x7fc9d46e3040 [shape=record,shape=Mrecord,label="{0: %struct.bn_recp_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d46e3040:s0 -> Node0x7fc9d46e29a0;
EDGE: [0: tymap-size 1]:%struct.bn_recp_ctx_st = type { %struct.bignum_st, %struct.bignum_st, i32, i32, i32 }
	Node0x7fc9d46e29a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e29a0:s0 -> Node0x7fc9d45c8080;
Creating ConsElem Map for :	Node0x7fc9d46e3180 [shape=record,shape=Mrecord,label="{0: %struct.bignum_ctx*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d46e3180:s0 -> Node0x7fc9d46e2ab0;
EDGE: [0: tymap-size 1]:%struct.bignum_ctx = type opaque
	Node0x7fc9d46e2ab0 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x7fc9d46e34c0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fc9d46e35c0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d46e35c0:s0 -> Node0x7fc9d46e3ac0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d46e3ac0 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x7fc9d46e3700 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d46e3700:s0 -> Node0x7fc9d46e3b90;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d46e3b90 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x7fc9d46e3840 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d46e3840:s0 -> Node0x7fc9d46e25f0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d46e25f0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x7fc9d46e25f0:s0 -> Node0x7fc9d46e3d30;
Creating ConsElem Map for :	Node0x7fc9d46e3980 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d46e3980:s0 -> Node0x7fc9d46e27a0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d46e27a0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fc9d46e27a0:s0 -> Node0x7fc9d46e3e30;
Creating ConsElem Map for :	Node0x7fc9d46e2b80 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fc9d46e32c0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %num_bits = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %21, i32 0, i32 2, !dbg !455
[Source:]   %num_bits = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %21, i32 0, i32 2, !dbg !455
StructType: allocation intermediate:   %21 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !454
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Trying to find element at offset 48
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 48
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x7fc9d6a226e0
Creating ConsElem Map for :	Node0x7fc9d46e33c0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %shift = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %27, i32 0, i32 3, !dbg !469
[Source:]   %shift = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %27, i32 0, i32 3, !dbg !469
StructType: allocation intermediate:   %27 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !468
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Trying to find element at offset 52
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 52
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x7fc9d6a226e0
DSINKGEP INSTRUCTION   %shift32 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %33, i32 0, i32 3, !dbg !480
[Sink:]   %shift32 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %33, i32 0, i32 3, !dbg !480
StructType:::IS STRUCT TY:: allocation intermediate:   %33 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !479
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Tainting at offset: 52
	Node0x7fc9d46e29a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e29a0:s0 -> Node0x7fc9d45c8080;
Adding 1 elements
Tainting at offset: 52
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSINKGEP INSTRUCTION   %shift32 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %33, i32 0, i32 3, !dbg !480
[Sink:]   %shift32 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %33, i32 0, i32 3, !dbg !480
StructType:::IS STRUCT TY:: allocation intermediate:   %33 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !479
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Tainting at offset: 52
	Node0x7fc9d46e29a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e29a0:s0 -> Node0x7fc9d45c8080;
Adding 1 elements
Tainting at offset: 52
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSOURCEGEP INSTRUCTION   %shift34 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %34, i32 0, i32 3, !dbg !484
[Source:]   %shift34 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %34, i32 0, i32 3, !dbg !484
StructType: allocation intermediate:   %34 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !482
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Trying to find element at offset 52
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 52
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x7fc9d6a226e0
DSOURCEGEP INSTRUCTION   %num_bits38 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %38, i32 0, i32 2, !dbg !492
[Source:]   %num_bits38 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %38, i32 0, i32 2, !dbg !492
StructType: allocation intermediate:   %38 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !491
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Trying to find element at offset 48
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 48
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x7fc9d6a226e0
DSOURCEGEP INSTRUCTION   %num_bits48 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %47, i32 0, i32 2, !dbg !510
[Source:]   %num_bits48 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %47, i32 0, i32 2, !dbg !510
StructType: allocation intermediate:   %47 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !509
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Trying to find element at offset 48
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 48
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x7fc9d6a226e0
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %49, i32 0, i32 3, !dbg !516
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %49, i32 0, i32 3, !dbg !516
StructType:::IS STRUCT TY:: allocation intermediate:   %49 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !515
=>  %d = alloca %struct.bignum_st*, align 8
FINAL:   %d = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fc9d46e25f0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x7fc9d46e25f0:s0 -> Node0x7fc9d46e3d30;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %49, i32 0, i32 3, !dbg !516
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %49, i32 0, i32 3, !dbg !516
StructType:::IS STRUCT TY:: allocation intermediate:   %49 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !515
=>  %d = alloca %struct.bignum_st*, align 8
FINAL:   %d = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fc9d46e25f0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x7fc9d46e25f0:s0 -> Node0x7fc9d46e3d30;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg62 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %57, i32 0, i32 3, !dbg !535
[Sink:]   %neg62 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %57, i32 0, i32 3, !dbg !535
StructType:::IS STRUCT TY:: allocation intermediate:   %57 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !534
=>  %r = alloca %struct.bignum_st*, align 8
FINAL:   %r = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fc9d46e27a0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fc9d46e27a0:s0 -> Node0x7fc9d46e3e30;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg62 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %57, i32 0, i32 3, !dbg !535
[Sink:]   %neg62 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %57, i32 0, i32 3, !dbg !535
StructType:::IS STRUCT TY:: allocation intermediate:   %57 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !534
=>  %r = alloca %struct.bignum_st*, align 8
FINAL:   %r = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fc9d46e27a0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fc9d46e27a0:s0 -> Node0x7fc9d46e3e30;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSOURCEGEP INSTRUCTION   %neg80 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %66, i32 0, i32 3, !dbg !568
[Source:]   %neg80 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %66, i32 0, i32 3, !dbg !568
StructType: allocation intermediate:   %66 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !567
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[16,20]0x7fc9d691ce00
DSINKGEP INSTRUCTION   %neg81 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %68, i32 0, i32 3, !dbg !570
[Sink:]   %neg81 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %68, i32 0, i32 3, !dbg !570
StructType:::IS STRUCT TY:: allocation intermediate:   %68 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !569
=>  %r = alloca %struct.bignum_st*, align 8
FINAL:   %r = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fc9d46e27a0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fc9d46e27a0:s0 -> Node0x7fc9d46e3e30;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg81 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %68, i32 0, i32 3, !dbg !570
[Sink:]   %neg81 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %68, i32 0, i32 3, !dbg !570
StructType:::IS STRUCT TY:: allocation intermediate:   %68 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !569
=>  %r = alloca %struct.bignum_st*, align 8
FINAL:   %r = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fc9d46e27a0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fc9d46e27a0:s0 -> Node0x7fc9d46e3e30;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSOURCEGEP INSTRUCTION   %neg82 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %69, i32 0, i32 3, !dbg !573
[Source:]   %neg82 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %69, i32 0, i32 3, !dbg !573
StructType: allocation intermediate:   %69 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !572
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[16,20]0x7fc9d691ce00
DSOURCEGEP INSTRUCTION   %neg84 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %N83, i32 0, i32 3, !dbg !576
[Source:]   %neg84 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %N83, i32 0, i32 3, !dbg !576
StructType: allocation intermediate:   %N83 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %71, i32 0, i32 0, !dbg !575
=>  %71 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !574
 allocation intermediate:   %71 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !574
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Trying to find element at offset 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x7fc9d6a226e0
DSINKGEP INSTRUCTION   %neg85 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %73, i32 0, i32 3, !dbg !579
[Sink:]   %neg85 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %73, i32 0, i32 3, !dbg !579
StructType:::IS STRUCT TY:: allocation intermediate:   %73 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !578
=>  %d = alloca %struct.bignum_st*, align 8
FINAL:   %d = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fc9d46e25f0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x7fc9d46e25f0:s0 -> Node0x7fc9d46e3d30;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg85 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %73, i32 0, i32 3, !dbg !579
[Sink:]   %neg85 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %73, i32 0, i32 3, !dbg !579
StructType:::IS STRUCT TY:: allocation intermediate:   %73 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !578
=>  %d = alloca %struct.bignum_st*, align 8
FINAL:   %d = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fc9d46e25f0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x7fc9d46e25f0:s0 -> Node0x7fc9d46e3d30;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
Running on BN_free in context [BN_RECP_CTX_free ]
Using taint reachable signature for:   call void @CRYPTO_free(i8* %6, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 206), !dbg !382
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
RSINKGEP INSTRUCTION   %6 = bitcast %struct.bignum_st* %5 to i8*, !dbg !382
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x7fc9d4490bd0 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE:   %6 = bitcast %struct.bignum_st* %5 to i8*, !dbg !382
	Node0x7fc9d4490bd0 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
RSINKGEP INSTRUCTION   %6 = bitcast %struct.bignum_st* %5 to i8*, !dbg !382
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x7fc9d46de5b0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d46de5b0:s0 -> Node0x7fc9d680e430;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d680e430 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d680e430:s0 -> Node0x7fc9d45c6fb0;
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 4, !dbg !379
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 4, !dbg !379
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !377
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d69244f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d6924970
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d6924a30
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d6924a80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d6924aa0
DSOURCEGEP INSTRUCTION   %flags5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 4, !dbg !385
[Source:]   %flags5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 4, !dbg !385
StructType: allocation intermediate:   %7 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !383
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d69244f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d6924970
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d6924a30
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d6924a80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d6924aa0
DSINKGEP INSTRUCTION   %flags5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 4, !dbg !385
[Sink:]   %flags5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 4, !dbg !385
StructType:::IS STRUCT TY:: allocation intermediate:   %7 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !383
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 20
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
Tainting at offset: 20
	Node0x7fc9d680e430 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d680e430:s0 -> Node0x7fc9d45c6fb0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %flags5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 4, !dbg !385
[Sink:]   %flags5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 4, !dbg !385
StructType:::IS STRUCT TY:: allocation intermediate:   %7 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !383
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 20
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
Tainting at offset: 20
	Node0x7fc9d680e430 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d680e430:s0 -> Node0x7fc9d45c6fb0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %9, i32 0, i32 0, !dbg !388
[Sink:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %9, i32 0, i32 0, !dbg !388
StructType:::IS STRUCT TY:: allocation intermediate:   %9 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !387
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
Tainting at offset: 0
	Node0x7fc9d680e430 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d680e430:s0 -> Node0x7fc9d45c6fb0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %9, i32 0, i32 0, !dbg !388
[Sink:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %9, i32 0, i32 0, !dbg !388
StructType:::IS STRUCT TY:: allocation intermediate:   %9 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !387
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
Tainting at offset: 0
	Node0x7fc9d680e430 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d680e430:s0 -> Node0x7fc9d45c6fb0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on bn_expand2 in context [bn_expand ]
Using taint reachable signature for:   call void @OPENSSL_cleanse(i8* %10, i64 %mul), !dbg !394
RSINKGEP INSTRUCTION   %10 = bitcast i64* %9 to i8*, !dbg !388
REACHABLE SOURCE:   %10 = bitcast i64* %9 to i8*, !dbg !388
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %10 = bitcast i64* %9 to i8*, !dbg !388
Creating ConsElem Map for :	Node0x7fc9d448f060 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d448f060:s0 -> Node0x7fc9d448e360;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d448e360 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d448e360:s0 -> Node0x7fc9d44c7600;
Creating ConsElem Map for :	Node0x7fc9d448f1a0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !371
[Source:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !371
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !370
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d6914bc0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d6925e60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d6925e80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d69261e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d6926280
Creating ConsElem Map for :	Node0x7fc9d448f2a0 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d448f2a0:s0 -> Node0x7fc9d44c7600;
EDGE: [0: tymap-size 1]:i64
	Node0x7fc9d44c7600 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x7fc9d448ef20 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d448ef20:s0 -> Node0x7fc9d448e360;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d448e360 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d448e360:s0 -> Node0x7fc9d44c7600;
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !386
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !386
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !384
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d6914bc0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d6925e60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d6925e80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d69261e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d6926280
DSOURCEGEP INSTRUCTION   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !390
[Source:]   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !390
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !388
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d6914bc0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d6925e60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d6925e80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d69261e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d6926280
DSOURCEGEP INSTRUCTION   %dmax5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %11, i32 0, i32 2, !dbg !392
[Source:]   %dmax5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %11, i32 0, i32 2, !dbg !392
StructType: allocation intermediate:   %11 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !391
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d6914bc0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d6925e60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d6925e80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d69261e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d6926280
DSINKGEP INSTRUCTION   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !400
[Sink:]   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !400
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !399
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x7fc9d448e360 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d448e360:s0 -> Node0x7fc9d44c7600;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSINKGEP INSTRUCTION   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !400
[Sink:]   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !400
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !399
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x7fc9d448e360 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d448e360:s0 -> Node0x7fc9d44c7600;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSINKGEP INSTRUCTION   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !404
[Sink:]   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !404
StructType:::IS STRUCT TY:: allocation intermediate:   %17 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !403
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 12
	Node0x7fc9d448e360 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d448e360:s0 -> Node0x7fc9d44c7600;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 12
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSINKGEP INSTRUCTION   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !404
[Sink:]   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !404
StructType:::IS STRUCT TY:: allocation intermediate:   %17 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !403
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 12
	Node0x7fc9d448e360 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d448e360:s0 -> Node0x7fc9d44c7600;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 12
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
Running on bn_expand2 in context [bn_wexpand ]
Using taint reachable signature for:   call void @OPENSSL_cleanse(i8* %10, i64 %mul), !dbg !394
RSINKGEP INSTRUCTION   %10 = bitcast i64* %9 to i8*, !dbg !388
REACHABLE SOURCE:   %10 = bitcast i64* %9 to i8*, !dbg !388
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %10 = bitcast i64* %9 to i8*, !dbg !388
DSOURCEGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !371
[Source:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !371
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !370
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d6914bc0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d6925e60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d6925e80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d69261e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d6926280
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !386
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !386
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !384
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d6914bc0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d6925e60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d6925e80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d69261e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d6926280
DSOURCEGEP INSTRUCTION   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !390
[Source:]   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !390
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !388
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d6914bc0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d6925e60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d6925e80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d69261e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d6926280
DSOURCEGEP INSTRUCTION   %dmax5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %11, i32 0, i32 2, !dbg !392
[Source:]   %dmax5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %11, i32 0, i32 2, !dbg !392
StructType: allocation intermediate:   %11 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !391
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d6914bc0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d6925e60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d6925e80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d69261e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d6926280
DSINKGEP INSTRUCTION   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !400
[Sink:]   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !400
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !399
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x7fc9d448e360 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d448e360:s0 -> Node0x7fc9d44c7600;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSINKGEP INSTRUCTION   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !400
[Sink:]   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !400
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !399
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x7fc9d448e360 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d448e360:s0 -> Node0x7fc9d44c7600;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSINKGEP INSTRUCTION   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !404
[Sink:]   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !404
StructType:::IS STRUCT TY:: allocation intermediate:   %17 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !403
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 12
	Node0x7fc9d448e360 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d448e360:s0 -> Node0x7fc9d44c7600;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 12
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSINKGEP INSTRUCTION   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !404
[Sink:]   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !404
StructType:::IS STRUCT TY:: allocation intermediate:   %17 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !403
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 12
	Node0x7fc9d448e360 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d448e360:s0 -> Node0x7fc9d44c7600;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 12
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
Running on BN_ucmp in context [BN_div_recp ]
Creating ConsElem Map for :	Node0x7fc9d44c14a0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d44c14a0:s0 -> Node0x7fc9d44c10a0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d44c10a0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x7fc9d44c10a0:s0 -> Node0x7fc9d44c1ca0;
Creating ConsElem Map for :	Node0x7fc9d44c15e0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d44c15e0:s0 -> Node0x7fc9d680eb80;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d680eb80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d680eb80:s0 -> Node0x7fc9d45c7240;
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !379
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !379
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7fc9d6a313c0
DSOURCEGEP INSTRUCTION   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 1, !dbg !381
[Source:]   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 1, !dbg !381
StructType: allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !380
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d6a317d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d6a31820
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d6a319c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d6a31d30
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d6a31d80
Creating ConsElem Map for :	Node0x7fc9d44c1720 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fc9d44c13a0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !391
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !391
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !390
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7fc9d6a31320
Creating ConsElem Map for :	Node0x7fc9d44c1a20 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d44c1a20:s0 -> Node0x7fc9d44c1ca0;
EDGE: [0: tymap-size 1]:i64
	Node0x7fc9d44c1ca0 [shape=record,shape=Mrecord,label="{0: i64,   array: MRE2\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
DSOURCEGEP INSTRUCTION   %d2 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !394
[Source:]   %d2 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !394
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !393
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d6a317d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d6a31820
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d6a319c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d6a31d30
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d6a31d80
Creating ConsElem Map for :	Node0x7fc9d44c1b60 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d44c1b60:s0 -> Node0x7fc9d45c7240;
EDGE: [0: tymap-size 1]:i64
	Node0x7fc9d45c7240 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
DSOURCEGEP INSTRUCTION   %top3 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !398
[Source:]   %top3 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !398
StructType: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !396
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7fc9d6a313c0
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !408
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !408
Creating ConsElem Map for :	Node0x7fc9d44c1820 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx7 = getelementptr inbounds i64, i64* %17, i64 %idxprom6, !dbg !411
[Source:]   %arrayidx7 = getelementptr inbounds i64, i64* %17, i64 %idxprom6, !dbg !411
Creating ConsElem Map for :	Node0x7fc9d44c1920 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Running on BN_set_word in context [BN_div_recp ]
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !375
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !375
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !374
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fc9d44bdd10 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44bdd10:s0 -> Node0x7fc9d45c7140;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !375
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !375
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !374
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fc9d44bdd10 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44bdd10:s0 -> Node0x7fc9d45c7140;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d44f7980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d44f7b20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d44f7c20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d44f7d40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d44f7de0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !378
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !378
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !379
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x7fc9d44bdd10 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44bdd10:s0 -> Node0x7fc9d45c7140;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !378
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !378
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !379
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !379
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x7fc9d44bdd10 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44bdd10:s0 -> Node0x7fc9d45c7140;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !383
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !383
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !382
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fc9d44bdd10 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44bdd10:s0 -> Node0x7fc9d45c7140;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !383
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !383
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !382
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fc9d44bdd10 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44bdd10:s0 -> Node0x7fc9d45c7140;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
Running on BN_copy in context [BN_div_recp ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !384
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !384
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !383
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d45f6a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d45f6ab0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d45f6c50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d45f6ca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d45f7000
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !390
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !390
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !389
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d45f6a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d45f6ab0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d45f6c50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d45f6ca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d45f7000
DSOURCEGEP INSTRUCTION   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !393
[Source:]   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !393
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !392
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d45f6a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d45f6ab0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d45f6c50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d45f6ca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d45f7000
DSOURCEGEP INSTRUCTION   %top5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !397
[Source:]   %top5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !397
StructType: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !395
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d45f6a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d45f6ab0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d45f6c50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d45f6ca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d45f7000
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !414
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !414
 allocation intermediate:   %13 = load i64*, i64** %B, align 8, !dbg !414
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fc9d47f3f90
DSOURCEGEP INSTRUCTION   %arrayidx7 = getelementptr inbounds i64, i64* %15, i64 1, !dbg !416
[Source:]   %arrayidx7 = getelementptr inbounds i64, i64* %15, i64 1, !dbg !416
 allocation intermediate:   %15 = load i64*, i64** %B, align 8, !dbg !416
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 1
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fc9d47f3f90
DSOURCEGEP INSTRUCTION   %arrayidx8 = getelementptr inbounds i64, i64* %17, i64 2, !dbg !418
[Source:]   %arrayidx8 = getelementptr inbounds i64, i64* %17, i64 2, !dbg !418
 allocation intermediate:   %17 = load i64*, i64** %B, align 8, !dbg !418
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 2
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fc9d47f3f90
DSOURCEGEP INSTRUCTION   %arrayidx9 = getelementptr inbounds i64, i64* %19, i64 3, !dbg !420
[Source:]   %arrayidx9 = getelementptr inbounds i64, i64* %19, i64 3, !dbg !420
 allocation intermediate:   %19 = load i64*, i64** %B, align 8, !dbg !420
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 3
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 3
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fc9d47f3f90
DSINKGEP INSTRUCTION   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !423
[Sink:]   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !423
 allocation intermediate:   %22 = load i64*, i64** %A, align 8, !dbg !423
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !423
[Sink:]   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !423
 allocation intermediate:   %22 = load i64*, i64** %A, align 8, !dbg !423
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !426
[Sink:]   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !426
 allocation intermediate:   %24 = load i64*, i64** %A, align 8, !dbg !426
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !426
[Sink:]   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !426
 allocation intermediate:   %24 = load i64*, i64** %A, align 8, !dbg !426
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !429
[Sink:]   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !429
 allocation intermediate:   %26 = load i64*, i64** %A, align 8, !dbg !429
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !429
[Sink:]   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !429
 allocation intermediate:   %26 = load i64*, i64** %A, align 8, !dbg !429
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !432
[Sink:]   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !432
 allocation intermediate:   %28 = load i64*, i64** %A, align 8, !dbg !432
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 3
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 3
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !432
[Sink:]   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !432
 allocation intermediate:   %28 = load i64*, i64** %A, align 8, !dbg !432
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 3
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 3
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top15 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %32, i32 0, i32 1, !dbg !440
[Source:]   %top15 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %32, i32 0, i32 1, !dbg !440
StructType: allocation intermediate:   %32 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !439
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d45f6a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d45f6ab0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d45f6c50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d45f6ca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d45f7000
DSOURCEGEP INSTRUCTION   %arrayidx16 = getelementptr inbounds i64, i64* %34, i64 2, !dbg !443
[Source:]   %arrayidx16 = getelementptr inbounds i64, i64* %34, i64 2, !dbg !443
 allocation intermediate:   %34 = load i64*, i64** %B, align 8, !dbg !443
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 2
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fc9d47f3f90
DSINKGEP INSTRUCTION   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !445
[Sink:]   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !445
 allocation intermediate:   %36 = load i64*, i64** %A, align 8, !dbg !445
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !445
[Sink:]   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !445
 allocation intermediate:   %36 = load i64*, i64** %A, align 8, !dbg !445
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx19 = getelementptr inbounds i64, i64* %37, i64 1, !dbg !447
[Source:]   %arrayidx19 = getelementptr inbounds i64, i64* %37, i64 1, !dbg !447
 allocation intermediate:   %37 = load i64*, i64** %B, align 8, !dbg !447
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 1
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fc9d47f3f90
DSINKGEP INSTRUCTION   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !448
[Sink:]   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !448
 allocation intermediate:   %39 = load i64*, i64** %A, align 8, !dbg !448
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !448
[Sink:]   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !448
 allocation intermediate:   %39 = load i64*, i64** %A, align 8, !dbg !448
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx22 = getelementptr inbounds i64, i64* %40, i64 0, !dbg !450
[Source:]   %arrayidx22 = getelementptr inbounds i64, i64* %40, i64 0, !dbg !450
 allocation intermediate:   %40 = load i64*, i64** %B, align 8, !dbg !450
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fc9d47f3f90
DSINKGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !451
[Sink:]   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !451
 allocation intermediate:   %42 = load i64*, i64** %A, align 8, !dbg !451
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !451
[Sink:]   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !451
 allocation intermediate:   %42 = load i64*, i64** %A, align 8, !dbg !451
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x7fc9d44a73b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top29 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %45, i32 0, i32 1, !dbg !462
[Source:]   %top29 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %45, i32 0, i32 1, !dbg !462
StructType: allocation intermediate:   %45 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !461
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d45f6a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d45f6ab0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d45f6c50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d45f6ca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d45f7000
DSINKGEP INSTRUCTION   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !464
[Sink:]   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !464
StructType:::IS STRUCT TY:: allocation intermediate:   %47 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !463
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fc9d44a7680 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44a7680:s0 -> Node0x7fc9d44a73b0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSINKGEP INSTRUCTION   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !464
[Sink:]   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !464
StructType:::IS STRUCT TY:: allocation intermediate:   %47 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !463
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fc9d44a7680 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44a7680:s0 -> Node0x7fc9d44a73b0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %48, i32 0, i32 3, !dbg !467
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %48, i32 0, i32 3, !dbg !467
StructType: allocation intermediate:   %48 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !466
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d45f6a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d45f6ab0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d45f6c50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d45f6ca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d45f7000
DSINKGEP INSTRUCTION   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !469
[Sink:]   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !469
StructType:::IS STRUCT TY:: allocation intermediate:   %50 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !468
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fc9d44a7680 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44a7680:s0 -> Node0x7fc9d44a73b0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSINKGEP INSTRUCTION   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !469
[Sink:]   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !469
StructType:::IS STRUCT TY:: allocation intermediate:   %50 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !468
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x7fc9d44a7680 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44a7680:s0 -> Node0x7fc9d44a73b0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
Running on BN_num_bits in context [BN_div_recp ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !369
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !369
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !368
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7fc9d45efab0
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !380
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !380
StructType: allocation intermediate:   %5 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !379
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7fc9d45ef920
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !379
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !379
Running on BN_reciprocal in context [BN_div_recp ]
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %0), !dbg !377
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !376
REACHABLE SOURCE:   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !376
	Node0x7fc9d46e6b60 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !376
Using taint reachable signature for:   %call = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %1), !dbg !380
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !378
REACHABLE SOURCE:   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !378
	Node0x7fc9d46e6b60 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !378
Using taint reachable signature for:   %call4 = call i32 @BN_div(%struct.bignum_st* %4, %struct.bignum_st* null, %struct.bignum_st* %5, %struct.bignum_st* %6, %struct.bignum_ctx* %7), !dbg !396
RSINKGEP INSTRUCTION   %5 = load %struct.bignum_st*, %struct.bignum_st** %t, align 8, !dbg !393
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %4 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !391
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION %struct.bignum_st* null
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !395
RSINKGEP INSTRUCTION   %6 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !394
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %5 = load %struct.bignum_st*, %struct.bignum_st** %t, align 8, !dbg !393
REACHABLE SOURCE:   %4 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !391
REACHABLE SOURCE: %struct.bignum_st* null
REACHABLE SOURCE:   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !395
REACHABLE SOURCE:   %6 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !394
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
	Node0x7fc9d46e6b60 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
RSINKGEP INSTRUCTION   %5 = load %struct.bignum_st*, %struct.bignum_st** %t, align 8, !dbg !393
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %4 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !391
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION %struct.bignum_st* null
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !395
RSINKGEP INSTRUCTION   %6 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !394
Added child elem: 	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %9), !dbg !403
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !402
REACHABLE SOURCE:   %9 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !402
	Node0x7fc9d46e6b60 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !402
Creating ConsElem Map for :	Node0x7fc9d46e6bf0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d46e6bf0:s0 -> Node0x7fc9d46e69b0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Creating ConsElem Map for :	Node0x7fc9d46e6c80 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d46e6c80:s0 -> Node0x7fc9d46e69b0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Creating ConsElem Map for :	Node0x7fc9d46e6d10 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fc9d46e6da0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_ctx*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d46e6da0:s0 -> Node0x7fc9d46e6b60;
EDGE: [0: tymap-size 1]:%struct.bignum_ctx = type opaque
	Node0x7fc9d46e6b60 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x7fc9d46e6e30 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fc9d46e6ec0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d46e6ec0:s0 -> Node0x7fc9d46e6f50;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d46e6f50 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x7fc9d46e6f50:s0 -> Node0x7fc9d46e6fe0;
Running on BN_is_zero in context [BN_div_recp ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !367
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !367
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !366
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7fc9d6a01cc0
Running on BN_get_flags in context [BN_free ]
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !369
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !369
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !368
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d45ee5b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d45ee600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d45ee7a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d45ee7f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d45eeb50
Running on bn_free_d in context [BN_free ]
Using taint reachable signature for:   call void @CRYPTO_secure_free(i8* %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 174), !dbg !370
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
RSINKGEP INSTRUCTION   %3 = bitcast i64* %2 to i8*, !dbg !370
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE:   %3 = bitcast i64* %2 to i8*, !dbg !370
	Node0x7fc9d4490bd0 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
RSINKGEP INSTRUCTION   %3 = bitcast i64* %2 to i8*, !dbg !370
Using taint reachable signature for:   call void @CRYPTO_free(i8* %6, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 176), !dbg !371
RSINKGEP INSTRUCTION   %6 = bitcast i64* %5 to i8*, !dbg !371
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE:   %6 = bitcast i64* %5 to i8*, !dbg !371
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fc9d4490bd0 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %6 = bitcast i64* %5 to i8*, !dbg !371
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Creating ConsElem Map for :	Node0x7fc9d4492670 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d4492670:s0 -> Node0x7fc9d448f3e0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d448f3e0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d448f3e0:s0 -> Node0x7fc9d448edc0;
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 0, !dbg !370
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 0, !dbg !370
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !370
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d6a408c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d6a40a30
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d6a40cc0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d6a40d10
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d6a40eb0
DSOURCEGEP INSTRUCTION   %d1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !371
[Source:]   %d1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !371
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !371
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d6a408c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d6a40a30
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d6a40cc0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d6a40d10
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d6a40eb0
Running on bn_expand_internal in context [bn_expand2 ]
Using taint reachable signature for:   call void @ERR_put_error(i32 3, i32 120, i32 114, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 255), !dbg !380
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
	Node0x7fc9d4490bd0 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Using taint reachable signature for:   call void @ERR_put_error(i32 3, i32 120, i32 105, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 259), !dbg !387
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
	Node0x7fc9d4490bd0 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Using taint reachable signature for:   %call6 = call i8* @CRYPTO_secure_zalloc(i64 %mul, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 263), !dbg !394
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
	Node0x7fc9d4490bd0 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Using taint reachable signature for:   %call9 = call i8* @CRYPTO_zalloc(i64 %mul8, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 265), !dbg !398
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
	Node0x7fc9d4490bd0 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Using taint reachable signature for:   call void @ERR_put_error(i32 3, i32 120, i32 65, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 267), !dbg !405
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
	Node0x7fc9d4490bd0 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Creating ConsElem Map for :	Node0x7fc9d44900d0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d44900d0:s0 -> Node0x7fc9d44a4af0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d44a4af0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d44a4af0:s0 -> Node0x7fc9d448a1e0;
Creating ConsElem Map for :	Node0x7fc9d4490210 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fc9d4490450 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d4490450:s0 -> Node0x7fc9d448a1e0;
EDGE: [0: tymap-size 1]:i64
	Node0x7fc9d448a1e0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x7fc9d448ffc0 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d448ffc0:s0 -> Node0x7fc9d448a1e0;
EDGE: [0: tymap-size 1]:i64
	Node0x7fc9d448a1e0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x7fc9d4490310 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d4490310:s0 -> Node0x7fc9d448a1e0;
EDGE: [0: tymap-size 1]:i64
	Node0x7fc9d448a1e0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !409
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !409
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !408
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d6a448b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d6a44a50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d6a44aa0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d6a44c40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d6a44f30
Creating ConsElem Map for :	Node0x7fc9d4490590 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d4490590:s0 -> Node0x7fc9d448a1e0;
EDGE: [0: tymap-size 1]:i64
	Node0x7fc9d448a1e0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %11, i32 0, i32 1, !dbg !418
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %11, i32 0, i32 1, !dbg !418
StructType: allocation intermediate:   %11 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !415
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d6a448b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d6a44a50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d6a44aa0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d6a44c40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d6a44f30
Creating ConsElem Map for :	Node0x7fc9d44906d0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %14, i64 0, !dbg !435
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %14, i64 0, !dbg !435
 allocation intermediate:   %14 = load i64*, i64** %B, align 8, !dbg !435
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
Creating ConsElem Map for :	Node0x7fc9d44907d0 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx20 = getelementptr inbounds i64, i64* %16, i64 1, !dbg !437
[Source:]   %arrayidx20 = getelementptr inbounds i64, i64* %16, i64 1, !dbg !437
 allocation intermediate:   %16 = load i64*, i64** %B, align 8, !dbg !437
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
Creating ConsElem Map for :	Node0x7fc9d44908d0 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx21 = getelementptr inbounds i64, i64* %18, i64 2, !dbg !439
[Source:]   %arrayidx21 = getelementptr inbounds i64, i64* %18, i64 2, !dbg !439
 allocation intermediate:   %18 = load i64*, i64** %B, align 8, !dbg !439
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
Creating ConsElem Map for :	Node0x7fc9d44909d0 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx22 = getelementptr inbounds i64, i64* %20, i64 3, !dbg !441
[Source:]   %arrayidx22 = getelementptr inbounds i64, i64* %20, i64 3, !dbg !441
 allocation intermediate:   %20 = load i64*, i64** %B, align 8, !dbg !441
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 3
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
Creating ConsElem Map for :	Node0x7fc9d4490ad0 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSINKGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds i64, i64* %23, i64 0, !dbg !444
[Sink:]   %arrayidx23 = getelementptr inbounds i64, i64* %23, i64 0, !dbg !444
 allocation intermediate:   %23 = load i64*, i64** %A, align 8, !dbg !444
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
Created 1 constraint variable(s) for node of size 1
	Node0x7fc9d448a1e0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds i64, i64* %23, i64 0, !dbg !444
[Sink:]   %arrayidx23 = getelementptr inbounds i64, i64* %23, i64 0, !dbg !444
 allocation intermediate:   %23 = load i64*, i64** %A, align 8, !dbg !444
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x7fc9d448a1e0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx24 = getelementptr inbounds i64, i64* %25, i64 1, !dbg !447
[Sink:]   %arrayidx24 = getelementptr inbounds i64, i64* %25, i64 1, !dbg !447
 allocation intermediate:   %25 = load i64*, i64** %A, align 8, !dbg !447
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x7fc9d448a1e0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx24 = getelementptr inbounds i64, i64* %25, i64 1, !dbg !447
[Sink:]   %arrayidx24 = getelementptr inbounds i64, i64* %25, i64 1, !dbg !447
 allocation intermediate:   %25 = load i64*, i64** %A, align 8, !dbg !447
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x7fc9d448a1e0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx25 = getelementptr inbounds i64, i64* %27, i64 2, !dbg !450
[Sink:]   %arrayidx25 = getelementptr inbounds i64, i64* %27, i64 2, !dbg !450
 allocation intermediate:   %27 = load i64*, i64** %A, align 8, !dbg !450
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x7fc9d448a1e0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx25 = getelementptr inbounds i64, i64* %27, i64 2, !dbg !450
[Sink:]   %arrayidx25 = getelementptr inbounds i64, i64* %27, i64 2, !dbg !450
 allocation intermediate:   %27 = load i64*, i64** %A, align 8, !dbg !450
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x7fc9d448a1e0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx26 = getelementptr inbounds i64, i64* %29, i64 3, !dbg !453
[Sink:]   %arrayidx26 = getelementptr inbounds i64, i64* %29, i64 3, !dbg !453
 allocation intermediate:   %29 = load i64*, i64** %A, align 8, !dbg !453
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 3
	Node0x7fc9d448a1e0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 3
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx26 = getelementptr inbounds i64, i64* %29, i64 3, !dbg !453
[Sink:]   %arrayidx26 = getelementptr inbounds i64, i64* %29, i64 3, !dbg !453
 allocation intermediate:   %29 = load i64*, i64** %A, align 8, !dbg !453
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 3
	Node0x7fc9d448a1e0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 3
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top28 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %33, i32 0, i32 1, !dbg !461
[Source:]   %top28 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %33, i32 0, i32 1, !dbg !461
StructType: allocation intermediate:   %33 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !460
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d6a448b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d6a44a50
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d6a44aa0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d6a44c40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d6a44f30
DSOURCEGEP INSTRUCTION   %arrayidx29 = getelementptr inbounds i64, i64* %35, i64 2, !dbg !464
[Source:]   %arrayidx29 = getelementptr inbounds i64, i64* %35, i64 2, !dbg !464
 allocation intermediate:   %35 = load i64*, i64** %B, align 8, !dbg !464
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 2
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fc9d6a49d10
DSINKGEP INSTRUCTION   %arrayidx30 = getelementptr inbounds i64, i64* %37, i64 2, !dbg !466
[Sink:]   %arrayidx30 = getelementptr inbounds i64, i64* %37, i64 2, !dbg !466
 allocation intermediate:   %37 = load i64*, i64** %A, align 8, !dbg !466
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x7fc9d448a1e0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx30 = getelementptr inbounds i64, i64* %37, i64 2, !dbg !466
[Sink:]   %arrayidx30 = getelementptr inbounds i64, i64* %37, i64 2, !dbg !466
 allocation intermediate:   %37 = load i64*, i64** %A, align 8, !dbg !466
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x7fc9d448a1e0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx32 = getelementptr inbounds i64, i64* %38, i64 1, !dbg !468
[Source:]   %arrayidx32 = getelementptr inbounds i64, i64* %38, i64 1, !dbg !468
 allocation intermediate:   %38 = load i64*, i64** %B, align 8, !dbg !468
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 1
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fc9d6a49d10
DSINKGEP INSTRUCTION   %arrayidx33 = getelementptr inbounds i64, i64* %40, i64 1, !dbg !469
[Sink:]   %arrayidx33 = getelementptr inbounds i64, i64* %40, i64 1, !dbg !469
 allocation intermediate:   %40 = load i64*, i64** %A, align 8, !dbg !469
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x7fc9d448a1e0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx33 = getelementptr inbounds i64, i64* %40, i64 1, !dbg !469
[Sink:]   %arrayidx33 = getelementptr inbounds i64, i64* %40, i64 1, !dbg !469
 allocation intermediate:   %40 = load i64*, i64** %A, align 8, !dbg !469
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x7fc9d448a1e0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx35 = getelementptr inbounds i64, i64* %41, i64 0, !dbg !471
[Source:]   %arrayidx35 = getelementptr inbounds i64, i64* %41, i64 0, !dbg !471
 allocation intermediate:   %41 = load i64*, i64** %B, align 8, !dbg !471
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default:0x7fc9d47eb360
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x7fc9d6a49d10
DSINKGEP INSTRUCTION   %arrayidx36 = getelementptr inbounds i64, i64* %43, i64 0, !dbg !472
[Sink:]   %arrayidx36 = getelementptr inbounds i64, i64* %43, i64 0, !dbg !472
 allocation intermediate:   %43 = load i64*, i64** %A, align 8, !dbg !472
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x7fc9d448a1e0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx36 = getelementptr inbounds i64, i64* %43, i64 0, !dbg !472
[Sink:]   %arrayidx36 = getelementptr inbounds i64, i64* %43, i64 0, !dbg !472
 allocation intermediate:   %43 = load i64*, i64** %A, align 8, !dbg !472
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x7fc9d448a1e0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Running on bn_free_d in context [bn_expand2 ]
Using taint reachable signature for:   call void @CRYPTO_secure_free(i8* %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 174), !dbg !370
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
RSINKGEP INSTRUCTION   %3 = bitcast i64* %2 to i8*, !dbg !370
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE:   %3 = bitcast i64* %2 to i8*, !dbg !370
	Node0x7fc9d4490bd0 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
RSINKGEP INSTRUCTION   %3 = bitcast i64* %2 to i8*, !dbg !370
Using taint reachable signature for:   call void @CRYPTO_free(i8* %6, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 176), !dbg !371
RSINKGEP INSTRUCTION   %6 = bitcast i64* %5 to i8*, !dbg !371
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE:   %6 = bitcast i64* %5 to i8*, !dbg !371
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
	Node0x7fc9d45c8200 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x7fc9d4490bd0 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %6 = bitcast i64* %5 to i8*, !dbg !371
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 0, !dbg !370
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 0, !dbg !370
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !370
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d6a408c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d6a40a30
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d6a40cc0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d6a40d10
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d6a40eb0
DSOURCEGEP INSTRUCTION   %d1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !371
[Source:]   %d1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !371
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !371
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d6a408c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d6a40a30
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d6a40cc0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d6a40d10
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d6a40eb0
Running on BN_set_bit in context [BN_reciprocal ]
Creating ConsElem Map for :	Node0x7fc9d44b0080 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x7fc9d44b0080:s0 -> Node0x7fc9d46df050;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x7fc9d46df050 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46df050:s0 -> Node0x7fc9d45c7340;
Creating ConsElem Map for :	Node0x7fc9d44b0110 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fc9d44afff0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fc9d44b01a0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x7fc9d44b0230 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 1, !dbg !387
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 1, !dbg !387
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !385
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d6a4e380
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d6a4e520
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d6a4e570
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d6a4e710
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d6a4ea00
DSOURCEGEP INSTRUCTION   %top6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 1, !dbg !402
[Source:]   %top6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 1, !dbg !402
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !400
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d6a4e380
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d6a4e520
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d6a4e570
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d6a4e710
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d6a4ea00
Creating ConsElem Map for :	Node0x7fc9d44b02c0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %13, i32 0, i32 0, !dbg !413
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %13, i32 0, i32 0, !dbg !413
StructType: allocation intermediate:   %13 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !412
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d6a4e380
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d6a4e520
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d6a4e570
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d6a4e710
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d6a4ea00
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !412
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !412
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !412
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !412
DSINKGEP INSTRUCTION   %top10 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 1, !dbg !420
[Sink:]   %top10 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 1, !dbg !420
StructType:::IS STRUCT TY:: allocation intermediate:   %17 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !419
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fc9d46df050 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46df050:s0 -> Node0x7fc9d45c7340;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSINKGEP INSTRUCTION   %top10 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 1, !dbg !420
[Sink:]   %top10 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 1, !dbg !420
StructType:::IS STRUCT TY:: allocation intermediate:   %17 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !419
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x7fc9d46df050 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46df050:s0 -> Node0x7fc9d45c7340;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Adding 1 elements
DSOURCEGEP INSTRUCTION   %d13 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %20, i32 0, i32 0, !dbg !427
[Source:]   %d13 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %20, i32 0, i32 0, !dbg !427
StructType: allocation intermediate:   %20 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !426
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d6a4e380
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d6a4e520
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d6a4e570
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d6a4e710
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d6a4ea00
DSOURCEGEP INSTRUCTION   %arrayidx14 = getelementptr inbounds i64, i64* %21, i64 %idxprom12, !dbg !426
[Source:]   %arrayidx14 = getelementptr inbounds i64, i64* %21, i64 %idxprom12, !dbg !426
DSINKGEP INSTRUCTION   %arrayidx14 = getelementptr inbounds i64, i64* %21, i64 %idxprom12, !dbg !426
[Sink:]   %arrayidx14 = getelementptr inbounds i64, i64* %21, i64 %idxprom12, !dbg !426
DSINKGEP INSTRUCTION   %arrayidx14 = getelementptr inbounds i64, i64* %21, i64 %idxprom12, !dbg !426
[Sink:]   %arrayidx14 = getelementptr inbounds i64, i64* %21, i64 %idxprom12, !dbg !426
Running on BN_get_flags in context [bn_free_d ]
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !369
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !369
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !368
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d45ee5b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d45ee600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d45ee7a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d45ee7f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d45eeb50
Running on BN_get_flags in context [bn_expand_internal ]
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !369
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !369
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !368
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d45ee5b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d45ee600
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d45ee7a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d45ee7f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d45eeb50
Running on bn_wexpand in context [BN_set_bit ]
DSOURCEGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !370
[Source:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !370
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !369
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default:0x7fc9d45dd6d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7fc9d6a0c290
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7fc9d6a18a10
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7fc9d6a18a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7fc9d6a18c00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7fc9d6a18c50
Running on MOD_EXP_CTIME_COPY_TO_PREBUF in context []
Running on MOD_EXP_CTIME_COPY_FROM_PREBUF in context []
Running on constant_time_eq_int in context []
Running on constant_time_eq in context []
Running on constant_time_is_zero in context []
Running on constant_time_msb in context []
Running on bn2binpad in context []
Running on BN_from_montgomery_word in context []
Trying to constrain p at 0 for value : p
%struct.bignum_st* %p
%struct.bignum_st* %p
 has 5 elements.
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
FOUND 2 elements from the locsForValue
Number of elements to constrain: 2
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default: : addr 0x7fc9d45dd6d0
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default: : addr 0x7fc9d47eb360
DONE
Trying to constrain m at 0 for value : m
%struct.bignum_st* %m
%struct.bignum_st* %m
 has 5 elements.
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
FOUND 2 elements from the locsForValue
Number of elements to constrain: 2
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default: : addr 0x7fc9d45dd6d0
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default: : addr 0x7fc9d47eb360
Trying to constrain m at 0 for value : m
%struct.bignum_st* %m
%struct.bignum_st* %m
 has 5 elements.
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
FOUND 2 elements from the locsForValue
Number of elements to constrain: 2
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default: : addr 0x7fc9d45dd6d0
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default: : addr 0x7fc9d47eb360
Trying to constrain m at 0 for value : m
%struct.bignum_st* %m
%struct.bignum_st* %m
 has 5 elements.
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
FOUND 2 elements from the locsForValue
Number of elements to constrain: 2
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default: : addr 0x7fc9d45dd6d0
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default: : addr 0x7fc9d47eb360
DONE
Trying to constrain p at 0 for value : p
%struct.bignum_st* %p
%struct.bignum_st* %p
 has 5 elements.
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
FOUND 2 elements from the locsForValue
Number of elements to constrain: 2
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default: : addr 0x7fc9d45dd6d0
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default: : addr 0x7fc9d47eb360
DONE
Trying to constrain m at 0 for value : m
%struct.bignum_st* %m
%struct.bignum_st* %m
 has 5 elements.
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
FOUND 2 elements from the locsForValue
Number of elements to constrain: 2
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default: : addr 0x7fc9d45dd6d0
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default: : addr 0x7fc9d47eb360
Trying to constrain m at 0 for value : m
%struct.bignum_st* %m
%struct.bignum_st* %m
 has 5 elements.
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
FOUND 2 elements from the locsForValue
Number of elements to constrain: 2
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default: : addr 0x7fc9d45dd6d0
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default: : addr 0x7fc9d47eb360
Trying to constrain m at 0 for value : m
%struct.bignum_st* %m
%struct.bignum_st* %m
 has 5 elements.
	Node0x7fc9d46e69b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x7fc9d46e69b0:s0 -> Node0x7fc9d45c8200;
FOUND 2 elements from the locsForValue
Number of elements to constrain: 2
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:default: : addr 0x7fc9d45dd6d0
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:default: : addr 0x7fc9d47eb360
DONE
Removing values tied to bits
Size of vector 10903
Constraint to find 0: i32,  : SCMR: elem 0:default:
Constraint erased: 0: i32,  : SCMR: elem 0:default:
Removing values tied to bits
Size of vector 10902
Constraint to find 0: i32,  : SCMR: elem 0:default:
#--------------Results------------------
bn_exp.c line 182
bn_exp.c line 183
bn_exp.c line 181
bn_exp.c line 192
bn_exp.c line 204
bn_exp.c line 204
bn_exp.c line 208
bn_exp.c line 210
bn_exp.c line 220
bn_exp.c line 222
bn_exp.c line 234
bn_exp.c line 251
bn_exp.c line 271
bn_lib.c line 111
bn_lib.c line 112
bn_lib.c line 113
bn_lib.c line 118
bn_lib.c line 143
bn_lib.c line 144
bn_lib.c line 152
bn_lib.c line 166
bn_lib.c line 203
bn_lib.c line 205
bn_lib.c line 330
bn_lib.c line 332
bn_lib.c line 334
bn_lib.c line 373
bn_lib.c line 375
bn_lib.c line 381
bn_lib.c line 409
bn_lib.c line 1027
bn_lib.c line 475
bn_lib.c line 641
bn_lib.c line 645
bn_lib.c line 648
bn_lib.c line 705
bn_lib.c line 710
bn_lib.c line 711
bn_lib.c line 713
bn_lib.c line 750
bn_lib.c line 926
bn_lib.c line 926
bn_lib.c line 936
bn_lib.c line 173
bn_lib.c line 254
bn_lib.c line 258
bn_lib.c line 262
bn_lib.c line 266
bn_lib.c line 274
bn_lib.c line 275
include/bn_lcl.h line 679
bn_recp.c line 40
bn_recp.c line 46
bn_recp.c line 62
bn_recp.c line 64
bn_recp.c line 65
bn_recp.c line 66
bn_recp.c line 69
bn_recp.c line 96
bn_recp.c line 100
bn_recp.c line 100
bn_recp.c line 100
bn_recp.c line 100
bn_recp.c line 103
bn_recp.c line 105
bn_recp.c line 121
bn_recp.c line 125
bn_recp.c line 128
bn_recp.c line 137
bn_recp.c line 139
bn_recp.c line 141
bn_recp.c line 145
bn_recp.c line 147
bn_recp.c line 152
bn_recp.c line 153
bn_recp.c line 157
bn_recp.c line 159
bn_recp.c line 163
bn_recp.c line 185
bn_recp.c line 191
#--------------Statistics----------------
:: Tainted Branches: 80
:: Branch Instructions: 1056
:: Conditional Branches: 429
:: Vulnerable Branches: 7.58% [80/1056]
