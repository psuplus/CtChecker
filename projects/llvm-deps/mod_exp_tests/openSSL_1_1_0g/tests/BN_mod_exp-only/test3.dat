Args: ../../../..//Debug+Asserts/bin/opt -load ../../../..//projects/poolalloc/Debug+Asserts/lib/LLVMDataStructure.so -load ../../../..//projects/llvm-deps/Debug+Asserts/lib/Constraints.so -load ../../../..//projects/llvm-deps/Debug+Asserts/lib/sourcesinkanalysis.so -load ../../../..//projects/llvm-deps/Debug+Asserts/lib/pointstointerface.so -load ../../../..//projects/llvm-deps/Debug+Asserts/lib/Deps.so -load ../../../..//projects/llvm-deps/Debug+Asserts/lib/Security.so -vulnerablebranch -debug 

Features:+64bit,+sse2
CPU:generic

Subtarget features: SSELevel 3, 3DNowLevel 0, 64bit 1
Merged 13 call nodes.
Merged 5 call nodes.
Merged 6 call nodes.
Merged 4 call nodes.
Merged 6 call nodes.
Merged 5 call nodes.
Merged 1 call nodes.
Attempting to merge two chunks of the same node together!
Merged 3 call nodes.
Merged 2 call nodes.
Merged 2 call nodes.
Merged 2 call nodes.
Merged 2 call nodes.
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_RECP_CTX_set
Removing llvm.dbg.declare from BN_RECP_CTX_set
Removing llvm.dbg.declare from BN_RECP_CTX_set
Removing llvm.dbg.declare from BN_RECP_CTX_free
Removing llvm.dbg.declare from BN_RECP_CTX_new
Removing llvm.dbg.declare from BN_RECP_CTX_init
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_copy
Removing llvm.dbg.declare from BN_MONT_CTX_copy
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_free
Removing llvm.dbg.declare from BN_MONT_CTX_init
Removing llvm.dbg.declare from BN_MONT_CTX_new
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from bn_free_d
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand
Removing llvm.dbg.declare from bn_expand
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from BN_GENCB_get_arg
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_free
Removing llvm.dbg.declare from BN_GENCB_new
Removing llvm.dbg.declare from BN_with_flags
Removing llvm.dbg.declare from BN_with_flags
Removing llvm.dbg.declare from BN_with_flags
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_is_negative
Removing llvm.dbg.declare from BN_is_odd
Removing llvm.dbg.declare from BN_is_word
Removing llvm.dbg.declare from BN_is_word
Removing llvm.dbg.declare from BN_is_one
Removing llvm.dbg.declare from BN_abs_is_word
Removing llvm.dbg.declare from BN_abs_is_word
Removing llvm.dbg.declare from BN_zero_ex
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from BN_set_negative
Removing llvm.dbg.declare from BN_set_negative
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_bn2bin
Removing llvm.dbg.declare from BN_bn2bin
Removing llvm.dbg.declare from BN_bn2binpad
Removing llvm.dbg.declare from BN_bn2binpad
Removing llvm.dbg.declare from BN_bn2binpad
Removing llvm.dbg.declare from bn_correct_top
Removing llvm.dbg.declare from bn_correct_top
Removing llvm.dbg.declare from bn_correct_top
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_set_word
Removing llvm.dbg.declare from BN_set_word
Removing llvm.dbg.declare from BN_get_word
Removing llvm.dbg.declare from BN_clear
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_set_flags
Removing llvm.dbg.declare from BN_set_flags
Removing llvm.dbg.declare from bn_wexpand
Removing llvm.dbg.declare from bn_wexpand
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_dup
Removing llvm.dbg.declare from BN_dup
Removing llvm.dbg.declare from bn_expand2
Removing llvm.dbg.declare from bn_expand2
Removing llvm.dbg.declare from bn_expand2
Removing llvm.dbg.declare from BN_secure_new
Removing llvm.dbg.declare from BN_new
Removing llvm.dbg.declare from bn_init
Removing llvm.dbg.declare from BN_free
Removing llvm.dbg.declare from BN_get_flags
Removing llvm.dbg.declare from BN_get_flags
Removing llvm.dbg.declare from BN_clear_free
Removing llvm.dbg.declare from BN_clear_free
Removing llvm.dbg.declare from BN_is_zero
Removing llvm.dbg.declare from BN_num_bits
Removing llvm.dbg.declare from BN_num_bits
Removing llvm.dbg.declare from BN_num_bits_word
Removing llvm.dbg.declare from BN_get_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from constant_time_eq_int
Removing llvm.dbg.declare from constant_time_eq_int
Removing llvm.dbg.declare from constant_time_eq
Removing llvm.dbg.declare from constant_time_eq
Removing llvm.dbg.declare from constant_time_is_zero
Removing llvm.dbg.declare from constant_time_msb
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_reciprocal
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_div_recp
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_mod_mul_reciprocal
Removing llvm.dbg.declare from BN_RECP_CTX_set
Removing llvm.dbg.declare from BN_RECP_CTX_set
Removing llvm.dbg.declare from BN_RECP_CTX_set
Removing llvm.dbg.declare from BN_RECP_CTX_free
Removing llvm.dbg.declare from BN_RECP_CTX_new
Removing llvm.dbg.declare from BN_RECP_CTX_init
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_from_montgomery_word
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_set_locked
Removing llvm.dbg.declare from BN_MONT_CTX_copy
Removing llvm.dbg.declare from BN_MONT_CTX_copy
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_set
Removing llvm.dbg.declare from BN_MONT_CTX_free
Removing llvm.dbg.declare from BN_MONT_CTX_init
Removing llvm.dbg.declare from BN_MONT_CTX_new
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_from_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from BN_mod_mul_montgomery
Removing llvm.dbg.declare from bn_free_d
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand
Removing llvm.dbg.declare from bn_expand
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from BN_GENCB_get_arg
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_free
Removing llvm.dbg.declare from BN_GENCB_new
Removing llvm.dbg.declare from BN_with_flags
Removing llvm.dbg.declare from BN_with_flags
Removing llvm.dbg.declare from BN_with_flags
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_is_negative
Removing llvm.dbg.declare from BN_is_odd
Removing llvm.dbg.declare from BN_is_word
Removing llvm.dbg.declare from BN_is_word
Removing llvm.dbg.declare from BN_is_one
Removing llvm.dbg.declare from BN_abs_is_word
Removing llvm.dbg.declare from BN_abs_is_word
Removing llvm.dbg.declare from BN_zero_ex
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from BN_set_negative
Removing llvm.dbg.declare from BN_set_negative
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_bn2bin
Removing llvm.dbg.declare from BN_bn2bin
Removing llvm.dbg.declare from BN_bn2binpad
Removing llvm.dbg.declare from BN_bn2binpad
Removing llvm.dbg.declare from BN_bn2binpad
Removing llvm.dbg.declare from bn_correct_top
Removing llvm.dbg.declare from bn_correct_top
Removing llvm.dbg.declare from bn_correct_top
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_set_word
Removing llvm.dbg.declare from BN_set_word
Removing llvm.dbg.declare from BN_get_word
Removing llvm.dbg.declare from BN_clear
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_set_flags
Removing llvm.dbg.declare from BN_set_flags
Removing llvm.dbg.declare from bn_wexpand
Removing llvm.dbg.declare from bn_wexpand
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_dup
Removing llvm.dbg.declare from BN_dup
Removing llvm.dbg.declare from bn_expand2
Removing llvm.dbg.declare from bn_expand2
Removing llvm.dbg.declare from bn_expand2
Removing llvm.dbg.declare from BN_secure_new
Removing llvm.dbg.declare from BN_new
Removing llvm.dbg.declare from bn_init
Removing llvm.dbg.declare from BN_free
Removing llvm.dbg.declare from BN_get_flags
Removing llvm.dbg.declare from BN_get_flags
Removing llvm.dbg.declare from BN_clear_free
Removing llvm.dbg.declare from BN_clear_free
Removing llvm.dbg.declare from BN_is_zero
Removing llvm.dbg.declare from BN_num_bits
Removing llvm.dbg.declare from BN_num_bits
Removing llvm.dbg.declare from BN_num_bits_word
Removing llvm.dbg.declare from BN_get_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from constant_time_eq_int
Removing llvm.dbg.declare from constant_time_eq_int
Removing llvm.dbg.declare from constant_time_eq
Removing llvm.dbg.declare from constant_time_eq
Removing llvm.dbg.declare from constant_time_is_zero
Removing llvm.dbg.declare from constant_time_msb
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Visiting single node SCC #: 3 fn: BN_num_bits_word
  [BU] Calculating graph for: BN_num_bits_word
  [BU] Done inlining: BN_num_bits_word [3+0]
Visiting single node SCC #: 4 fn: BN_is_zero
  [BU] Calculating graph for: BN_is_zero
  [BU] Done inlining: BN_is_zero [2+0]
Visiting single node SCC #: 2 fn: BN_num_bits
  [BU] Calculating graph for: BN_num_bits
    Inlining graph for BN_is_zero[2+0] into 'BN_num_bits' [5+0]
  [BU] Done inlining: BN_num_bits [5+0]
Visiting single node SCC #: 5 fn: BN_get_flags
  [BU] Calculating graph for: BN_get_flags
  [BU] Done inlining: BN_get_flags [3+0]
Visiting single node SCC #: 7 fn: BN_set_flags
  [BU] Calculating graph for: BN_set_flags
  [BU] Done inlining: BN_set_flags [3+0]
Visiting single node SCC #: 10 fn: bn_free_d
  [BU] Calculating graph for: bn_free_d
    Inlining graph for BN_get_flags[3+0] into 'bn_free_d' [4+0]
  [BU] Done inlining: bn_free_d [4+0]
Visiting single node SCC #: 11 fn: bn_expand_internal
  [BU] Calculating graph for: bn_expand_internal
    Inlining graph for BN_get_flags[3+0] into 'bn_expand_internal' [15+0]
  [BU] Done inlining: bn_expand_internal [15+0]
Visiting single node SCC #: 9 fn: bn_expand2
  [BU] Calculating graph for: bn_expand2
    Inlining graph for bn_free_d[4+0] into 'bn_expand2' [6+0]
    Inlining graph for bn_expand_internal[15+0] into 'bn_expand2' [6+0]
  [BU] Done inlining: bn_expand2 [6+0]
Visiting single node SCC #: 8 fn: bn_wexpand
  [BU] Calculating graph for: bn_wexpand
    Inlining graph for bn_expand2[6+0] into 'bn_wexpand' [3+0]
  [BU] Done inlining: bn_wexpand [4+0]
Visiting single node SCC #: 6 fn: BN_copy
  [BU] Calculating graph for: BN_copy
    Inlining graph for BN_set_flags[3+0] into 'BN_copy' [15+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_copy' [15+0]
    Inlining graph for bn_wexpand[4+0] into 'BN_copy' [15+0]
  [BU] Done inlining: BN_copy [14+0]
Visiting single node SCC #: 13 fn: bn_expand
  [BU] Calculating graph for: bn_expand
    Inlining graph for bn_expand2[6+0] into 'bn_expand' [4+0]
  [BU] Done inlining: bn_expand [5+0]
Visiting single node SCC #: 12 fn: BN_set_word
  [BU] Calculating graph for: BN_set_word
    Inlining graph for bn_expand[5+0] into 'BN_set_word' [6+0]
  [BU] Done inlining: BN_set_word [5+0]
Visiting single node SCC #: 14 fn: BN_is_bit_set
  [BU] Calculating graph for: BN_is_bit_set
  [BU] Done inlining: BN_is_bit_set [7+0]
Visiting single node SCC #: 15 fn: BN_is_odd
  [BU] Calculating graph for: BN_is_odd
  [BU] Done inlining: BN_is_odd [3+0]
Visiting single node SCC #: 1 fn: BN_exp
  [BU] Calculating graph for: BN_exp
    Inlining graph for BN_num_bits[5+0] into 'BN_exp' [18+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_exp' [19+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_exp' [19+0]
    Inlining graph for BN_copy[14+0] into 'BN_exp' [19+0]
    Inlining graph for BN_copy[14+0] into 'BN_exp' [20+0]
    Inlining graph for BN_copy[14+0] into 'BN_exp' [20+0]
    Inlining graph for BN_set_word[5+0] into 'BN_exp' [19+0]
    Inlining graph for BN_is_bit_set[7+0] into 'BN_exp' [19+0]
    Inlining graph for BN_is_odd[3+0] into 'BN_exp' [19+0]
  [BU] Done inlining: BN_exp [19+0]
Visiting single node SCC #: 19 fn: BN_abs_is_word
  [BU] Calculating graph for: BN_abs_is_word
  [BU] Done inlining: BN_abs_is_word [4+0]
Visiting single node SCC #: 18 fn: BN_is_one
  [BU] Calculating graph for: BN_is_one
    Inlining graph for BN_abs_is_word[4+0] into 'BN_is_one' [2+0]
  [BU] Done inlining: BN_is_one [3+0]
Visiting single node SCC #: 23 fn: bn_correct_top
  [BU] Calculating graph for: bn_correct_top
  [BU] Done inlining: bn_correct_top [5+0]
Visiting single node SCC #: 22 fn: BN_from_montgomery_word
  [BU] Calculating graph for: BN_from_montgomery_word
    Inlining graph for bn_wexpand[4+0] into 'BN_from_montgomery_word' [28+0]
    Inlining graph for bn_wexpand[4+0] into 'BN_from_montgomery_word' [27+0]
    Inlining graph for bn_correct_top[5+0] into 'BN_from_montgomery_word' [26+0]
    Inlining graph for bn_correct_top[5+0] into 'BN_from_montgomery_word' [26+0]
  [BU] Done inlining: BN_from_montgomery_word [26+0]
Visiting single node SCC #: 21 fn: BN_mod_mul_montgomery
  [BU] Calculating graph for: BN_mod_mul_montgomery
    Inlining graph for BN_from_montgomery_word[26+0] into 'BN_mod_mul_montgomery' [13+0]
  [BU] Done inlining: BN_mod_mul_montgomery [15+0]
Visiting single node SCC #: 20 fn: BN_to_montgomery
  [BU] Calculating graph for: BN_to_montgomery
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_to_montgomery' [8+0]
  [BU] Done inlining: BN_to_montgomery [10+0]
Visiting single node SCC #: 24 fn: BN_from_montgomery
  [BU] Calculating graph for: BN_from_montgomery
    Inlining graph for BN_copy[14+0] into 'BN_from_montgomery' [12+0]
    Inlining graph for BN_from_montgomery_word[26+0] into 'BN_from_montgomery' [13+0]
  [BU] Done inlining: BN_from_montgomery [14+0]
Visiting single node SCC #: 27 fn: bn_init
  [BU] Calculating graph for: bn_init
  [BU] Done inlining: bn_init [2+0]
Visiting single node SCC #: 26 fn: BN_MONT_CTX_init
  [BU] Calculating graph for: BN_MONT_CTX_init
    Inlining graph for bn_init[2+0] into 'BN_MONT_CTX_init' [2+0]
  [BU] Done inlining: BN_MONT_CTX_init [2+0]
Visiting single node SCC #: 25 fn: BN_MONT_CTX_new
  [BU] Calculating graph for: BN_MONT_CTX_new
    Inlining graph for BN_MONT_CTX_init[2+0] into 'BN_MONT_CTX_new' [4+0]
  [BU] Done inlining: BN_MONT_CTX_new [4+0]
Visiting single node SCC #: 29 fn: BN_clear_free
  [BU] Calculating graph for: BN_clear_free
    Inlining graph for bn_free_d[4+0] into 'BN_clear_free' [5+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_clear_free' [5+0]
  [BU] Done inlining: BN_clear_free [5+0]
Visiting single node SCC #: 28 fn: BN_MONT_CTX_free
  [BU] Calculating graph for: BN_MONT_CTX_free
    Inlining graph for BN_clear_free[5+0] into 'BN_MONT_CTX_free' [3+0]
    Inlining graph for BN_clear_free[5+0] into 'BN_MONT_CTX_free' [4+0]
    Inlining graph for BN_clear_free[5+0] into 'BN_MONT_CTX_free' [5+0]
  [BU] Done inlining: BN_MONT_CTX_free [6+0]
Visiting single node SCC #: 31 fn: BN_set_bit
  [BU] Calculating graph for: BN_set_bit
    Inlining graph for bn_wexpand[4+0] into 'BN_set_bit' [9+0]
  [BU] Done inlining: BN_set_bit [8+0]
Visiting single node SCC #: 30 fn: BN_MONT_CTX_set
  [BU] Calculating graph for: BN_MONT_CTX_set
    Inlining graph for BN_set_flags[3+0] into 'BN_MONT_CTX_set' [17+0]
    Inlining graph for BN_num_bits[5+0] into 'BN_MONT_CTX_set' [17+0]
    Inlining graph for BN_is_zero[2+0] into 'BN_MONT_CTX_set' [17+0]
    Inlining graph for BN_is_zero[2+0] into 'BN_MONT_CTX_set' [17+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_MONT_CTX_set' [17+0]
    Inlining graph for bn_init[2+0] into 'BN_MONT_CTX_set' [17+0]
    Inlining graph for BN_copy[14+0] into 'BN_MONT_CTX_set' [17+0]
    Inlining graph for BN_set_word[5+0] into 'BN_MONT_CTX_set' [17+0]
    Inlining graph for BN_set_word[5+0] into 'BN_MONT_CTX_set' [17+0]
    Inlining graph for BN_set_bit[8+0] into 'BN_MONT_CTX_set' [17+0]
  [BU] Done inlining: BN_MONT_CTX_set [17+0]
Visiting single node SCC #: 17 fn: BN_mod_exp_mont_word
  [BU] Calculating graph for: BN_mod_exp_mont_word
    Inlining graph for BN_num_bits[5+0] into 'BN_mod_exp_mont_word' [27+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_mont_word' [28+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_mont_word' [28+0]
    Inlining graph for BN_set_word[5+0] into 'BN_mod_exp_mont_word' [28+0]
    Inlining graph for BN_set_word[5+0] into 'BN_mod_exp_mont_word' [29+0]
    Inlining graph for BN_is_bit_set[7+0] into 'BN_mod_exp_mont_word' [30+0]
    Inlining graph for BN_is_one[3+0] into 'BN_mod_exp_mont_word' [30+0]
    Inlining graph for BN_is_odd[3+0] into 'BN_mod_exp_mont_word' [30+0]
    Inlining graph for BN_to_montgomery[10+0] into 'BN_mod_exp_mont_word' [30+0]
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_mod_exp_mont_word' [31+0]
    Inlining graph for BN_from_montgomery[14+0] into 'BN_mod_exp_mont_word' [31+0]
    Inlining graph for BN_MONT_CTX_new[4+0] into 'BN_mod_exp_mont_word' [31+0]
    Inlining graph for BN_MONT_CTX_free[6+0] into 'BN_mod_exp_mont_word' [31+0]
    Inlining graph for BN_MONT_CTX_set[17+0] into 'BN_mod_exp_mont_word' [31+0]
  [BU] Done inlining: BN_mod_exp_mont_word [31+0]
Visiting single node SCC #: 34 fn: MOD_EXP_CTIME_COPY_TO_PREBUF
  [BU] Calculating graph for: MOD_EXP_CTIME_COPY_TO_PREBUF
  [BU] Done inlining: MOD_EXP_CTIME_COPY_TO_PREBUF [12+0]
Visiting single node SCC #: 39 fn: constant_time_msb
  [BU] Calculating graph for: constant_time_msb
  [BU] Done inlining: constant_time_msb [1+0]
Visiting single node SCC #: 38 fn: constant_time_is_zero
  [BU] Calculating graph for: constant_time_is_zero
  [BU] Done inlining: constant_time_is_zero [1+0]
Visiting single node SCC #: 37 fn: constant_time_eq
  [BU] Calculating graph for: constant_time_eq
  [BU] Done inlining: constant_time_eq [2+0]
Visiting single node SCC #: 36 fn: constant_time_eq_int
  [BU] Calculating graph for: constant_time_eq_int
  [BU] Done inlining: constant_time_eq_int [2+0]
Visiting single node SCC #: 35 fn: MOD_EXP_CTIME_COPY_FROM_PREBUF
  [BU] Calculating graph for: MOD_EXP_CTIME_COPY_FROM_PREBUF
    Inlining graph for bn_wexpand[4+0] into 'MOD_EXP_CTIME_COPY_FROM_PREBUF' [21+0]
    Inlining graph for bn_correct_top[5+0] into 'MOD_EXP_CTIME_COPY_FROM_PREBUF' [20+0]
  [BU] Done inlining: MOD_EXP_CTIME_COPY_FROM_PREBUF [20+0]
Visiting single node SCC #: 40 fn: BN_value_one
  [BU] Calculating graph for: BN_value_one
  [BU] Done inlining: BN_value_one [2+0]
Visiting single node SCC #: 41 fn: BN_ucmp
  [BU] Calculating graph for: BN_ucmp
  [BU] Done inlining: BN_ucmp [12+0]
Visiting single node SCC #: 33 fn: BN_mod_exp_mont_consttime
  [BU] Calculating graph for: BN_mod_exp_mont_consttime
    Inlining graph for MOD_EXP_CTIME_COPY_TO_PREBUF[12+0] into 'BN_mod_exp_mont_consttime' [30+0]
    Inlining graph for MOD_EXP_CTIME_COPY_TO_PREBUF[12+0] into 'BN_mod_exp_mont_consttime' [30+0]
    Inlining graph for MOD_EXP_CTIME_COPY_FROM_PREBUF[20+0] into 'BN_mod_exp_mont_consttime' [30+0]
    Inlining graph for MOD_EXP_CTIME_COPY_FROM_PREBUF[20+0] into 'BN_mod_exp_mont_consttime' [30+0]
    Inlining graph for BN_value_one[2+0] into 'BN_mod_exp_mont_consttime' [30+0]
    Inlining graph for BN_num_bits[5+0] into 'BN_mod_exp_mont_consttime' [31+0]
    Inlining graph for BN_set_word[5+0] into 'BN_mod_exp_mont_consttime' [32+0]
    Inlining graph for BN_ucmp[12+0] into 'BN_mod_exp_mont_consttime' [33+0]
    Inlining graph for BN_is_bit_set[7+0] into 'BN_mod_exp_mont_consttime' [34+0]
    Inlining graph for BN_is_one[3+0] into 'BN_mod_exp_mont_consttime' [34+0]
    Inlining graph for BN_is_odd[3+0] into 'BN_mod_exp_mont_consttime' [34+0]
    Inlining graph for BN_to_montgomery[10+0] into 'BN_mod_exp_mont_consttime' [34+0]
    Inlining graph for BN_to_montgomery[10+0] into 'BN_mod_exp_mont_consttime' [35+0]
    Inlining graph for BN_to_montgomery[10+0] into 'BN_mod_exp_mont_consttime' [35+0]
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_mod_exp_mont_consttime' [35+0]
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_mod_exp_mont_consttime' [35+0]
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_mod_exp_mont_consttime' [35+0]
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_mod_exp_mont_consttime' [35+0]
    Inlining graph for BN_from_montgomery[14+0] into 'BN_mod_exp_mont_consttime' [35+0]
    Inlining graph for BN_MONT_CTX_new[4+0] into 'BN_mod_exp_mont_consttime' [35+0]
    Inlining graph for BN_MONT_CTX_free[6+0] into 'BN_mod_exp_mont_consttime' [35+0]
    Inlining graph for BN_MONT_CTX_set[17+0] into 'BN_mod_exp_mont_consttime' [35+0]
  [BU] Done inlining: BN_mod_exp_mont_consttime [35+0]
Visiting single node SCC #: 32 fn: BN_mod_exp_mont
  [BU] Calculating graph for: BN_mod_exp_mont
    Inlining graph for BN_mod_exp_mont_consttime[35+0] into 'BN_mod_exp_mont' [34+0]
    Inlining graph for BN_value_one[2+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_num_bits[5+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_is_zero[2+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for bn_wexpand[4+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_set_word[5+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for bn_correct_top[5+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_ucmp[12+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_is_bit_set[7+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_is_one[3+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_is_odd[3+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_to_montgomery[10+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_to_montgomery[10+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_mod_mul_montgomery[15+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_from_montgomery[14+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_MONT_CTX_new[4+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_MONT_CTX_free[6+0] into 'BN_mod_exp_mont' [39+0]
    Inlining graph for BN_MONT_CTX_set[17+0] into 'BN_mod_exp_mont' [39+0]
  [BU] Done inlining: BN_mod_exp_mont [39+0]
Visiting single node SCC #: 43 fn: BN_RECP_CTX_init
  [BU] Calculating graph for: BN_RECP_CTX_init
    Inlining graph for bn_init[2+0] into 'BN_RECP_CTX_init' [2+0]
    Inlining graph for bn_init[2+0] into 'BN_RECP_CTX_init' [2+0]
Attempting to merge two chunks of the same node together!
Merged 1 call nodes.
  [BU] Done inlining: BN_RECP_CTX_init [2+0]
Visiting single node SCC #: 45 fn: BN_free
  [BU] Calculating graph for: BN_free
    Inlining graph for bn_free_d[4+0] into 'BN_free' [3+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_free' [4+0]
  [BU] Done inlining: BN_free [4+0]
Visiting single node SCC #: 44 fn: BN_RECP_CTX_free
  [BU] Calculating graph for: BN_RECP_CTX_free
    Inlining graph for BN_free[4+0] into 'BN_RECP_CTX_free' [3+0]
    Inlining graph for BN_free[4+0] into 'BN_RECP_CTX_free' [4+0]
  [BU] Done inlining: BN_RECP_CTX_free [5+0]
Visiting single node SCC #: 46 fn: BN_RECP_CTX_set
  [BU] Calculating graph for: BN_RECP_CTX_set
    Inlining graph for BN_num_bits[5+0] into 'BN_RECP_CTX_set' [8+0]
    Inlining graph for BN_copy[14+0] into 'BN_RECP_CTX_set' [9+0]
    Inlining graph for BN_set_word[5+0] into 'BN_RECP_CTX_set' [9+0]
  [BU] Done inlining: BN_RECP_CTX_set [10+0]
Visiting single node SCC #: 49 fn: BN_reciprocal
  [BU] Calculating graph for: BN_reciprocal
    Inlining graph for BN_set_bit[8+0] into 'BN_reciprocal' [10+0]
  [BU] Done inlining: BN_reciprocal [11+0]
Visiting single node SCC #: 48 fn: BN_div_recp
  [BU] Calculating graph for: BN_div_recp
    Inlining graph for BN_num_bits[5+0] into 'BN_div_recp' [22+0]
    Inlining graph for BN_is_zero[2+0] into 'BN_div_recp' [23+0]
    Inlining graph for BN_copy[14+0] into 'BN_div_recp' [23+0]
    Inlining graph for BN_reciprocal[11+0] into 'BN_div_recp' [23+0]
    Inlining graph for BN_set_word[5+0] into 'BN_div_recp' [23+0]
    Inlining graph for BN_ucmp[12+0] into 'BN_div_recp' [24+0]
    Inlining graph for BN_ucmp[12+0] into 'BN_div_recp' [25+0]
  [BU] Done inlining: BN_div_recp [25+0]
Visiting single node SCC #: 47 fn: BN_mod_mul_reciprocal
  [BU] Calculating graph for: BN_mod_mul_reciprocal
    Inlining graph for BN_div_recp[25+0] into 'BN_mod_mul_reciprocal' [13+0]
  [BU] Done inlining: BN_mod_mul_reciprocal [16+0]
Visiting single node SCC #: 42 fn: BN_mod_exp_recp
  [BU] Calculating graph for: BN_mod_exp_recp
    Inlining graph for BN_num_bits[5+0] into 'BN_mod_exp_recp' [27+0]
    Inlining graph for BN_is_zero[2+0] into 'BN_mod_exp_recp' [28+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_recp' [28+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_recp' [28+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_recp' [28+0]
    Inlining graph for BN_copy[14+0] into 'BN_mod_exp_recp' [28+0]
    Inlining graph for BN_set_word[5+0] into 'BN_mod_exp_recp' [29+0]
    Inlining graph for BN_is_bit_set[7+0] into 'BN_mod_exp_recp' [30+0]
    Inlining graph for BN_is_one[3+0] into 'BN_mod_exp_recp' [30+0]
    Inlining graph for BN_RECP_CTX_init[2+0] into 'BN_mod_exp_recp' [30+0]
    Inlining graph for BN_RECP_CTX_free[5+0] into 'BN_mod_exp_recp' [30+0]
    Inlining graph for BN_RECP_CTX_set[10+0] into 'BN_mod_exp_recp' [31+0]
    Inlining graph for BN_RECP_CTX_set[10+0] into 'BN_mod_exp_recp' [31+0]
    Inlining graph for BN_mod_mul_reciprocal[16+0] into 'BN_mod_exp_recp' [31+0]
    Inlining graph for BN_mod_mul_reciprocal[16+0] into 'BN_mod_exp_recp' [31+0]
    Inlining graph for BN_mod_mul_reciprocal[16+0] into 'BN_mod_exp_recp' [31+0]
    Inlining graph for BN_mod_mul_reciprocal[16+0] into 'BN_mod_exp_recp' [32+0]
  [BU] Done inlining: BN_mod_exp_recp [32+0]
Visiting single node SCC #: 16 fn: BN_mod_exp
  [BU] Calculating graph for: BN_mod_exp
    Inlining graph for BN_mod_exp_mont_word[31+0] into 'BN_mod_exp' [13+0]
    Inlining graph for BN_mod_exp_mont[39+0] into 'BN_mod_exp' [18+0]
    Inlining graph for BN_mod_exp_recp[32+0] into 'BN_mod_exp' [18+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp' [18+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp' [18+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp' [18+0]
    Inlining graph for BN_is_odd[3+0] into 'BN_mod_exp' [18+0]
  [BU] Done inlining: BN_mod_exp [16+0]
Visiting single node SCC #: 50 fn: BN_mod_exp_simple
  [BU] Calculating graph for: BN_mod_exp_simple
    Inlining graph for BN_num_bits[5+0] into 'BN_mod_exp_simple' [25+0]
    Inlining graph for BN_is_zero[2+0] into 'BN_mod_exp_simple' [26+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_simple' [26+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_simple' [26+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_simple' [26+0]
    Inlining graph for BN_set_word[5+0] into 'BN_mod_exp_simple' [26+0]
    Inlining graph for BN_is_bit_set[7+0] into 'BN_mod_exp_simple' [27+0]
    Inlining graph for BN_is_one[3+0] into 'BN_mod_exp_simple' [27+0]
  [BU] Done inlining: BN_mod_exp_simple [28+0]
Visiting single node SCC #: 51 fn: BN_set_params
  [BU] Calculating graph for: BN_set_params
  [BU] Done inlining: BN_set_params [4+0]
Visiting single node SCC #: 52 fn: BN_get_params
  [BU] Calculating graph for: BN_get_params
  [BU] Done inlining: BN_get_params [2+0]
Visiting single node SCC #: 53 fn: BN_new
  [BU] Calculating graph for: BN_new
  [BU] Done inlining: BN_new [4+0]
Visiting single node SCC #: 54 fn: BN_secure_new
  [BU] Calculating graph for: BN_secure_new
    Inlining graph for BN_new[4+0] into 'BN_secure_new' [2+0]
  [BU] Done inlining: BN_secure_new [2+0]
Visiting single node SCC #: 55 fn: BN_dup
  [BU] Calculating graph for: BN_dup
    Inlining graph for BN_get_flags[3+0] into 'BN_dup' [6+0]
    Inlining graph for BN_free[4+0] into 'BN_dup' [6+0]
    Inlining graph for BN_new[4+0] into 'BN_dup' [7+0]
    Inlining graph for BN_secure_new[2+0] into 'BN_dup' [7+0]
    Inlining graph for BN_copy[14+0] into 'BN_dup' [7+0]
  [BU] Done inlining: BN_dup [7+0]
Visiting single node SCC #: 56 fn: BN_swap
  [BU] Calculating graph for: BN_swap
  [BU] Done inlining: BN_swap [11+0]
Visiting single node SCC #: 57 fn: BN_clear
  [BU] Calculating graph for: BN_clear
  [BU] Done inlining: BN_clear [3+0]
Visiting single node SCC #: 58 fn: BN_get_word
  [BU] Calculating graph for: BN_get_word
  [BU] Done inlining: BN_get_word [4+0]
Visiting single node SCC #: 59 fn: BN_bin2bn
  [BU] Calculating graph for: BN_bin2bn
    Inlining graph for BN_free[4+0] into 'BN_bin2bn' [13+0]
    Inlining graph for BN_new[4+0] into 'BN_bin2bn' [13+0]
    Inlining graph for bn_wexpand[4+0] into 'BN_bin2bn' [13+0]
    Inlining graph for bn_correct_top[5+0] into 'BN_bin2bn' [12+0]
  [BU] Done inlining: BN_bin2bn [12+0]
Visiting single node SCC #: 61 fn: bn2binpad
  [BU] Calculating graph for: bn2binpad
    Inlining graph for BN_num_bits[5+0] into 'bn2binpad' [9+0]
  [BU] Done inlining: bn2binpad [9+0]
Visiting single node SCC #: 60 fn: BN_bn2binpad
  [BU] Calculating graph for: BN_bn2binpad
    Inlining graph for bn2binpad[9+0] into 'BN_bn2binpad' [6+0]
  [BU] Done inlining: BN_bn2binpad [7+0]
Visiting single node SCC #: 62 fn: BN_bn2bin
  [BU] Calculating graph for: BN_bn2bin
    Inlining graph for bn2binpad[9+0] into 'BN_bn2bin' [4+0]
  [BU] Done inlining: BN_bn2bin [5+0]
Visiting single node SCC #: 63 fn: BN_lebin2bn
  [BU] Calculating graph for: BN_lebin2bn
    Inlining graph for BN_free[4+0] into 'BN_lebin2bn' [13+0]
    Inlining graph for BN_new[4+0] into 'BN_lebin2bn' [13+0]
    Inlining graph for bn_wexpand[4+0] into 'BN_lebin2bn' [13+0]
    Inlining graph for bn_correct_top[5+0] into 'BN_lebin2bn' [12+0]
  [BU] Done inlining: BN_lebin2bn [12+0]
Visiting single node SCC #: 64 fn: BN_bn2lebinpad
  [BU] Calculating graph for: BN_bn2lebinpad
    Inlining graph for BN_num_bits[5+0] into 'BN_bn2lebinpad' [9+0]
  [BU] Done inlining: BN_bn2lebinpad [9+0]
Visiting single node SCC #: 65 fn: BN_cmp
  [BU] Calculating graph for: BN_cmp
  [BU] Done inlining: BN_cmp [12+0]
Visiting single node SCC #: 66 fn: BN_clear_bit
  [BU] Calculating graph for: BN_clear_bit
    Inlining graph for bn_correct_top[5+0] into 'BN_clear_bit' [7+0]
  [BU] Done inlining: BN_clear_bit [7+0]
Visiting single node SCC #: 67 fn: BN_mask_bits
  [BU] Calculating graph for: BN_mask_bits
    Inlining graph for bn_correct_top[5+0] into 'BN_mask_bits' [7+0]
  [BU] Done inlining: BN_mask_bits [7+0]
Visiting single node SCC #: 68 fn: BN_set_negative
  [BU] Calculating graph for: BN_set_negative
    Inlining graph for BN_is_zero[2+0] into 'BN_set_negative' [3+0]
  [BU] Done inlining: BN_set_negative [3+0]
Visiting single node SCC #: 69 fn: bn_cmp_words
  [BU] Calculating graph for: bn_cmp_words
  [BU] Done inlining: bn_cmp_words [9+0]
Visiting single node SCC #: 70 fn: bn_cmp_part_words
  [BU] Calculating graph for: bn_cmp_part_words
    Inlining graph for bn_cmp_words[9+0] into 'bn_cmp_part_words' [9+0]
  [BU] Done inlining: bn_cmp_part_words [9+0]
Visiting single node SCC #: 71 fn: BN_consttime_swap
  [BU] Calculating graph for: BN_consttime_swap
  [BU] Done inlining: BN_consttime_swap [14+0]
Visiting single node SCC #: 72 fn: BN_security_bits
  [BU] Calculating graph for: BN_security_bits
  [BU] Done inlining: BN_security_bits [5+0]
Visiting single node SCC #: 73 fn: BN_zero_ex
  [BU] Calculating graph for: BN_zero_ex
  [BU] Done inlining: BN_zero_ex [2+0]
Visiting single node SCC #: 74 fn: BN_is_word
  [BU] Calculating graph for: BN_is_word
    Inlining graph for BN_abs_is_word[4+0] into 'BN_is_word' [3+0]
  [BU] Done inlining: BN_is_word [4+0]
Visiting single node SCC #: 75 fn: BN_is_negative
  [BU] Calculating graph for: BN_is_negative
  [BU] Done inlining: BN_is_negative [2+0]
Visiting single node SCC #: 76 fn: BN_with_flags
  [BU] Calculating graph for: BN_with_flags
  [BU] Done inlining: BN_with_flags [6+0]
Visiting single node SCC #: 77 fn: BN_GENCB_new
  [BU] Calculating graph for: BN_GENCB_new
  [BU] Done inlining: BN_GENCB_new [4+0]
Visiting single node SCC #: 78 fn: BN_GENCB_free
  [BU] Calculating graph for: BN_GENCB_free
  [BU] Done inlining: BN_GENCB_free [3+0]
Visiting single node SCC #: 79 fn: BN_GENCB_set_old
  [BU] Calculating graph for: BN_GENCB_set_old
  [BU] Done inlining: BN_GENCB_set_old [7+0]
Visiting single node SCC #: 80 fn: BN_GENCB_set
  [BU] Calculating graph for: BN_GENCB_set
  [BU] Done inlining: BN_GENCB_set [7+0]
Visiting single node SCC #: 81 fn: BN_GENCB_get_arg
  [BU] Calculating graph for: BN_GENCB_get_arg
  [BU] Done inlining: BN_GENCB_get_arg [3+0]
Visiting single node SCC #: 82 fn: BN_MONT_CTX_copy
  [BU] Calculating graph for: BN_MONT_CTX_copy
    Inlining graph for BN_copy[14+0] into 'BN_MONT_CTX_copy' [8+0]
    Inlining graph for BN_copy[14+0] into 'BN_MONT_CTX_copy' [9+0]
    Inlining graph for BN_copy[14+0] into 'BN_MONT_CTX_copy' [8+0]
Merged 2 call nodes.
  [BU] Done inlining: BN_MONT_CTX_copy [7+0]
Visiting single node SCC #: 83 fn: BN_MONT_CTX_set_locked
  [BU] Calculating graph for: BN_MONT_CTX_set_locked
    Inlining graph for BN_MONT_CTX_new[4+0] into 'BN_MONT_CTX_set_locked' [11+0]
    Inlining graph for BN_MONT_CTX_free[6+0] into 'BN_MONT_CTX_set_locked' [11+0]
    Inlining graph for BN_MONT_CTX_set[17+0] into 'BN_MONT_CTX_set_locked' [12+0]
  [BU] Done inlining: BN_MONT_CTX_set_locked [13+0]
Visiting single node SCC #: 84 fn: BN_RECP_CTX_new
  [BU] Calculating graph for: BN_RECP_CTX_new
    Inlining graph for bn_init[2+0] into 'BN_RECP_CTX_new' [4+0]
    Inlining graph for bn_init[2+0] into 'BN_RECP_CTX_new' [4+0]
Attempting to merge two chunks of the same node together!
Merged 1 call nodes.
  [BU] Done inlining: BN_RECP_CTX_new [4+0]
[TD] Inlining callers into 'BN_RECP_CTX_new'
[TD] Inlining callers into 'BN_MONT_CTX_set_locked'
[TD] Inlining callers into 'BN_MONT_CTX_copy'
[TD] Inlining callers into 'BN_GENCB_get_arg'
[TD] Inlining callers into 'BN_GENCB_set'
[TD] Inlining callers into 'BN_GENCB_set_old'
[TD] Inlining callers into 'BN_GENCB_free'
[TD] Inlining callers into 'BN_GENCB_new'
[TD] Inlining callers into 'BN_with_flags'
[TD] Inlining callers into 'BN_is_negative'
[TD] Inlining callers into 'BN_is_word'
[TD] Inlining callers into 'BN_zero_ex'
[TD] Inlining callers into 'BN_security_bits'
[TD] Inlining callers into 'BN_consttime_swap'
[TD] Inlining callers into 'bn_cmp_part_words'
[TD] Inlining callers into 'bn_cmp_words'
   [TD] Inlining graph into Fn 'bn_cmp_words' from Fn 'bn_cmp_part_words': 3 args
[TD] Inlining callers into 'BN_set_negative'
[TD] Inlining callers into 'BN_mask_bits'
[TD] Inlining callers into 'BN_clear_bit'
[TD] Inlining callers into 'BN_cmp'
[TD] Inlining callers into 'BN_bn2lebinpad'
[TD] Inlining callers into 'BN_lebin2bn'
[TD] Inlining callers into 'BN_bn2bin'
[TD] Inlining callers into 'BN_bn2binpad'
[TD] Inlining callers into 'bn2binpad'
   [TD] Inlining graph into Fn 'bn2binpad' from Fn 'BN_bn2bin': 3 args
   [TD] Inlining graph into Fn 'bn2binpad' from Fn 'BN_bn2binpad': 3 args
[TD] Inlining callers into 'BN_bin2bn'
[TD] Inlining callers into 'BN_get_word'
[TD] Inlining callers into 'BN_clear'
[TD] Inlining callers into 'BN_swap'
[TD] Inlining callers into 'BN_dup'
[TD] Inlining callers into 'BN_secure_new'
   [TD] Inlining graph into Fn 'BN_secure_new' from Fn 'BN_dup': 0 args
[TD] Inlining callers into 'BN_new'
   [TD] Inlining graph into Fn 'BN_new' from Fn 'BN_lebin2bn': 0 args
   [TD] Inlining graph into Fn 'BN_new' from Fn 'BN_bin2bn': 0 args
   [TD] Inlining graph into Fn 'BN_new' from Fn 'BN_dup': 0 args
   [TD] Inlining graph into Fn 'BN_new' from Fn 'BN_secure_new': 0 args
[TD] Inlining callers into 'BN_get_params'
[TD] Inlining callers into 'BN_set_params'
[TD] Inlining callers into 'BN_mod_exp_simple'
[TD] Inlining callers into 'BN_mod_exp'
[TD] Inlining callers into 'BN_mod_exp_recp'
   [TD] Inlining graph into Fn 'BN_mod_exp_recp' from Fn 'BN_mod_exp': 5 args
[TD] Inlining callers into 'BN_mod_mul_reciprocal'
   [TD] Inlining graph into Fn 'BN_mod_mul_reciprocal' from Fn 'BN_mod_exp_recp': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_reciprocal' from Fn 'BN_mod_exp_recp': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_reciprocal' from Fn 'BN_mod_exp_recp': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_reciprocal' from Fn 'BN_mod_exp_recp': 5 args
[TD] Inlining callers into 'BN_div_recp'
   [TD] Inlining graph into Fn 'BN_div_recp' from Fn 'BN_mod_mul_reciprocal': 5 args
Merged 1 call nodes.
[TD] Inlining callers into 'BN_reciprocal'
   [TD] Inlining graph into Fn 'BN_reciprocal' from Fn 'BN_div_recp': 4 args
[TD] Inlining callers into 'BN_RECP_CTX_set'
   [TD] Inlining graph into Fn 'BN_RECP_CTX_set' from Fn 'BN_mod_exp_recp': 3 args
   [TD] Inlining graph into Fn 'BN_RECP_CTX_set' from Fn 'BN_mod_exp_recp': 3 args
[TD] Inlining callers into 'BN_RECP_CTX_free'
   [TD] Inlining graph into Fn 'BN_RECP_CTX_free' from Fn 'BN_mod_exp_recp': 1 args
Merged 1 call nodes.
[TD] Inlining callers into 'BN_free'
   [TD] Inlining graph into Fn 'BN_free' from Fn 'BN_lebin2bn': 1 args
   [TD] Inlining graph into Fn 'BN_free' from Fn 'BN_bin2bn': 1 args
   [TD] Inlining graph into Fn 'BN_free' from Fn 'BN_dup': 1 args
   [TD] Inlining graph into Fn 'BN_free' from Fn 'BN_RECP_CTX_free': 1 args
[TD] Inlining callers into 'BN_RECP_CTX_init'
   [TD] Inlining graph into Fn 'BN_RECP_CTX_init' from Fn 'BN_mod_exp_recp': 1 args
[TD] Inlining callers into 'BN_mod_exp_mont'
   [TD] Inlining graph into Fn 'BN_mod_exp_mont' from Fn 'BN_mod_exp': 6 args
[TD] Inlining callers into 'BN_mod_exp_mont_consttime'
   [TD] Inlining graph into Fn 'BN_mod_exp_mont_consttime' from Fn 'BN_mod_exp_mont': 6 args
[TD] Inlining callers into 'BN_ucmp'
   [TD] Inlining graph into Fn 'BN_ucmp' from Fn 'BN_div_recp': 2 args
   [TD] Inlining graph into Fn 'BN_ucmp' from Fn 'BN_mod_exp_mont_consttime': 2 args
   [TD] Inlining graph into Fn 'BN_ucmp' from Fn 'BN_mod_exp_mont': 2 args
[TD] Inlining callers into 'BN_value_one'
   [TD] Inlining graph into Fn 'BN_value_one' from Fn 'BN_mod_exp_mont_consttime': 0 args
   [TD] Inlining graph into Fn 'BN_value_one' from Fn 'BN_mod_exp_mont': 0 args
[TD] Inlining callers into 'MOD_EXP_CTIME_COPY_FROM_PREBUF'
   [TD] Inlining graph into Fn 'MOD_EXP_CTIME_COPY_FROM_PREBUF' from Fn 'BN_mod_exp_mont_consttime': 5 args
   [TD] Inlining graph into Fn 'MOD_EXP_CTIME_COPY_FROM_PREBUF' from Fn 'BN_mod_exp_mont_consttime': 5 args
[TD] Inlining callers into 'constant_time_eq_int'
   [TD] Inlining graph into Fn 'constant_time_eq_int' from Fn 'MOD_EXP_CTIME_COPY_FROM_PREBUF': 2 args
[TD] Inlining callers into 'constant_time_eq'
   [TD] Inlining graph into Fn 'constant_time_eq' from Fn 'constant_time_eq_int': 2 args
[TD] Inlining callers into 'constant_time_is_zero'
   [TD] Inlining graph into Fn 'constant_time_is_zero' from Fn 'constant_time_eq': 1 args
[TD] Inlining callers into 'constant_time_msb'
   [TD] Inlining graph into Fn 'constant_time_msb' from Fn 'constant_time_is_zero': 1 args
[TD] Inlining callers into 'MOD_EXP_CTIME_COPY_TO_PREBUF'
   [TD] Inlining graph into Fn 'MOD_EXP_CTIME_COPY_TO_PREBUF' from Fn 'BN_mod_exp_mont_consttime': 5 args
   [TD] Inlining graph into Fn 'MOD_EXP_CTIME_COPY_TO_PREBUF' from Fn 'BN_mod_exp_mont_consttime': 5 args
[TD] Inlining callers into 'BN_mod_exp_mont_word'
   [TD] Inlining graph into Fn 'BN_mod_exp_mont_word' from Fn 'BN_mod_exp': 6 args
[TD] Inlining callers into 'BN_MONT_CTX_set'
   [TD] Inlining graph into Fn 'BN_MONT_CTX_set' from Fn 'BN_MONT_CTX_set_locked': 3 args
   [TD] Inlining graph into Fn 'BN_MONT_CTX_set' from Fn 'BN_mod_exp_mont_consttime': 3 args
   [TD] Inlining graph into Fn 'BN_MONT_CTX_set' from Fn 'BN_mod_exp_mont': 3 args
   [TD] Inlining graph into Fn 'BN_MONT_CTX_set' from Fn 'BN_mod_exp_mont_word': 3 args
[TD] Inlining callers into 'BN_set_bit'
   [TD] Inlining graph into Fn 'BN_set_bit' from Fn 'BN_reciprocal': 2 args
   [TD] Inlining graph into Fn 'BN_set_bit' from Fn 'BN_MONT_CTX_set': 2 args
[TD] Inlining callers into 'BN_MONT_CTX_free'
   [TD] Inlining graph into Fn 'BN_MONT_CTX_free' from Fn 'BN_MONT_CTX_set_locked': 1 args
   [TD] Inlining graph into Fn 'BN_MONT_CTX_free' from Fn 'BN_mod_exp_mont_consttime': 1 args
   [TD] Inlining graph into Fn 'BN_MONT_CTX_free' from Fn 'BN_mod_exp_mont': 1 args
   [TD] Inlining graph into Fn 'BN_MONT_CTX_free' from Fn 'BN_mod_exp_mont_word': 1 args
Merged 2 call nodes.
[TD] Inlining callers into 'BN_clear_free'
   [TD] Inlining graph into Fn 'BN_clear_free' from Fn 'BN_MONT_CTX_free': 1 args
[TD] Inlining callers into 'BN_MONT_CTX_new'
   [TD] Inlining graph into Fn 'BN_MONT_CTX_new' from Fn 'BN_MONT_CTX_set_locked': 0 args
   [TD] Inlining graph into Fn 'BN_MONT_CTX_new' from Fn 'BN_mod_exp_mont_consttime': 0 args
   [TD] Inlining graph into Fn 'BN_MONT_CTX_new' from Fn 'BN_mod_exp_mont': 0 args
   [TD] Inlining graph into Fn 'BN_MONT_CTX_new' from Fn 'BN_mod_exp_mont_word': 0 args
[TD] Inlining callers into 'BN_MONT_CTX_init'
   [TD] Inlining graph into Fn 'BN_MONT_CTX_init' from Fn 'BN_MONT_CTX_new': 1 args
[TD] Inlining callers into 'bn_init'
   [TD] Inlining graph into Fn 'bn_init' from Fn 'BN_RECP_CTX_new': 1 args
   [TD] Inlining graph into Fn 'bn_init' from Fn 'BN_RECP_CTX_init': 1 args
   [TD] Inlining graph into Fn 'bn_init' from Fn 'BN_MONT_CTX_set': 1 args
   [TD] Inlining graph into Fn 'bn_init' from Fn 'BN_MONT_CTX_init': 1 args
[TD] Inlining callers into 'BN_from_montgomery'
   [TD] Inlining graph into Fn 'BN_from_montgomery' from Fn 'BN_mod_exp_mont_consttime': 4 args
   [TD] Inlining graph into Fn 'BN_from_montgomery' from Fn 'BN_mod_exp_mont': 4 args
   [TD] Inlining graph into Fn 'BN_from_montgomery' from Fn 'BN_mod_exp_mont_word': 4 args
[TD] Inlining callers into 'BN_to_montgomery'
   [TD] Inlining graph into Fn 'BN_to_montgomery' from Fn 'BN_mod_exp_mont_consttime': 4 args
   [TD] Inlining graph into Fn 'BN_to_montgomery' from Fn 'BN_mod_exp_mont_consttime': 4 args
   [TD] Inlining graph into Fn 'BN_to_montgomery' from Fn 'BN_mod_exp_mont_consttime': 4 args
   [TD] Inlining graph into Fn 'BN_to_montgomery' from Fn 'BN_mod_exp_mont': 4 args
   [TD] Inlining graph into Fn 'BN_to_montgomery' from Fn 'BN_mod_exp_mont': 4 args
   [TD] Inlining graph into Fn 'BN_to_montgomery' from Fn 'BN_mod_exp_mont_word': 4 args
[TD] Inlining callers into 'BN_mod_mul_montgomery'
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_mod_exp_mont_consttime': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_mod_exp_mont_consttime': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_mod_exp_mont_consttime': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_mod_exp_mont_consttime': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_mod_exp_mont': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_mod_exp_mont': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_mod_exp_mont': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_mod_exp_mont': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_to_montgomery': 5 args
   [TD] Inlining graph into Fn 'BN_mod_mul_montgomery' from Fn 'BN_mod_exp_mont_word': 5 args
[TD] Inlining callers into 'BN_from_montgomery_word'
   [TD] Inlining graph into Fn 'BN_from_montgomery_word' from Fn 'BN_from_montgomery': 3 args
   [TD] Inlining graph into Fn 'BN_from_montgomery_word' from Fn 'BN_mod_mul_montgomery': 3 args
[TD] Inlining callers into 'bn_correct_top'
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'BN_mask_bits': 1 args
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'BN_clear_bit': 1 args
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'BN_lebin2bn': 1 args
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'BN_bin2bn': 1 args
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'MOD_EXP_CTIME_COPY_FROM_PREBUF': 1 args
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'BN_mod_exp_mont': 1 args
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'BN_from_montgomery_word': 1 args
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'BN_from_montgomery_word': 1 args
[TD] Inlining callers into 'BN_is_one'
   [TD] Inlining graph into Fn 'BN_is_one' from Fn 'BN_mod_exp_simple': 1 args
   [TD] Inlining graph into Fn 'BN_is_one' from Fn 'BN_mod_exp_recp': 1 args
   [TD] Inlining graph into Fn 'BN_is_one' from Fn 'BN_mod_exp_mont_consttime': 1 args
   [TD] Inlining graph into Fn 'BN_is_one' from Fn 'BN_mod_exp_mont': 1 args
   [TD] Inlining graph into Fn 'BN_is_one' from Fn 'BN_mod_exp_mont_word': 1 args
[TD] Inlining callers into 'BN_abs_is_word'
   [TD] Inlining graph into Fn 'BN_abs_is_word' from Fn 'BN_is_word': 2 args
   [TD] Inlining graph into Fn 'BN_abs_is_word' from Fn 'BN_is_one': 2 args
[TD] Inlining callers into 'BN_exp'
[TD] Inlining callers into 'BN_is_odd'
   [TD] Inlining graph into Fn 'BN_is_odd' from Fn 'BN_mod_exp_mont_consttime': 1 args
   [TD] Inlining graph into Fn 'BN_is_odd' from Fn 'BN_mod_exp_mont': 1 args
   [TD] Inlining graph into Fn 'BN_is_odd' from Fn 'BN_mod_exp_mont_word': 1 args
   [TD] Inlining graph into Fn 'BN_is_odd' from Fn 'BN_mod_exp': 1 args
   [TD] Inlining graph into Fn 'BN_is_odd' from Fn 'BN_exp': 1 args
[TD] Inlining callers into 'BN_is_bit_set'
   [TD] Inlining graph into Fn 'BN_is_bit_set' from Fn 'BN_mod_exp_simple': 2 args
   [TD] Inlining graph into Fn 'BN_is_bit_set' from Fn 'BN_mod_exp_recp': 2 args
   [TD] Inlining graph into Fn 'BN_is_bit_set' from Fn 'BN_mod_exp_mont_consttime': 2 args
   [TD] Inlining graph into Fn 'BN_is_bit_set' from Fn 'BN_mod_exp_mont': 2 args
   [TD] Inlining graph into Fn 'BN_is_bit_set' from Fn 'BN_mod_exp_mont_word': 2 args
   [TD] Inlining graph into Fn 'BN_is_bit_set' from Fn 'BN_exp': 2 args
[TD] Inlining callers into 'BN_set_word'
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_mod_exp_simple': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_div_recp': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_RECP_CTX_set': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_mod_exp_recp': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_mod_exp_mont_consttime': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_mod_exp_mont': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_MONT_CTX_set': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_MONT_CTX_set': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_mod_exp_mont_word': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_mod_exp_mont_word': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_exp': 2 args
[TD] Inlining callers into 'bn_expand'
   [TD] Inlining graph into Fn 'bn_expand' from Fn 'BN_set_word': 2 args
[TD] Inlining callers into 'BN_copy'
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_MONT_CTX_copy': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_dup': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_div_recp': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_RECP_CTX_set': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_mod_exp_recp': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_MONT_CTX_set': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_from_montgomery': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_exp': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_exp': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_exp': 2 args
[TD] Inlining callers into 'bn_wexpand'
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'BN_lebin2bn': 2 args
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'BN_bin2bn': 2 args
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'MOD_EXP_CTIME_COPY_FROM_PREBUF': 2 args
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'BN_mod_exp_mont': 2 args
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'BN_set_bit': 2 args
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'BN_from_montgomery_word': 2 args
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'BN_from_montgomery_word': 2 args
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'BN_copy': 2 args
[TD] Inlining callers into 'bn_expand2'
   [TD] Inlining graph into Fn 'bn_expand2' from Fn 'bn_expand': 2 args
   [TD] Inlining graph into Fn 'bn_expand2' from Fn 'bn_wexpand': 2 args
[TD] Inlining callers into 'bn_expand_internal'
   [TD] Inlining graph into Fn 'bn_expand_internal' from Fn 'bn_expand2': 2 args
[TD] Inlining callers into 'bn_free_d'
   [TD] Inlining graph into Fn 'bn_free_d' from Fn 'BN_free': 1 args
   [TD] Inlining graph into Fn 'bn_free_d' from Fn 'BN_clear_free': 1 args
   [TD] Inlining graph into Fn 'bn_free_d' from Fn 'bn_expand2': 1 args
[TD] Inlining callers into 'BN_set_flags'
   [TD] Inlining graph into Fn 'BN_set_flags' from Fn 'BN_MONT_CTX_set': 2 args
   [TD] Inlining graph into Fn 'BN_set_flags' from Fn 'BN_copy': 2 args
[TD] Inlining callers into 'BN_get_flags'
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_dup': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_simple': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_simple': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_simple': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_free': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_recp': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_recp': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_recp': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_mont': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_mont': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_mont': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_MONT_CTX_set': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_clear_free': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_mont_word': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_mont_word': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'bn_expand_internal': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'bn_free_d': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_copy': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_exp': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_exp': 2 args
[TD] Inlining callers into 'BN_num_bits'
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_bn2lebinpad': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'bn2binpad': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_mod_exp_simple': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_div_recp': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_RECP_CTX_set': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_mod_exp_recp': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_mod_exp_mont_consttime': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_mod_exp_mont': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_MONT_CTX_set': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_mod_exp_mont_word': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_exp': 1 args
[TD] Inlining callers into 'BN_is_zero'
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_set_negative': 1 args
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_mod_exp_simple': 1 args
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_div_recp': 1 args
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_mod_exp_recp': 1 args
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_mod_exp_mont': 1 args
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_MONT_CTX_set': 1 args
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_MONT_CTX_set': 1 args
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_num_bits': 1 args
[TD] Inlining callers into 'BN_num_bits_word'
   [TD] Inlining graph into Fn 'BN_num_bits_word' from Fn 'BN_num_bits': 1 args
Eliminating 1 EC Globals!
Running on BN_exp in context []
Running on llvm.dbg.declare in context []
Running on ERR_put_error in context []
Running on BN_CTX_start in context []
Running on BN_CTX_get in context []
Running on BN_sqr in context []
Running on BN_mul in context []
Running on BN_CTX_end in context []
Running on BN_mod_exp in context []
Creating ConsElem Map for :	Node0x6084ae0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x6084ae0:s0 -> Node0x60840a0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60840a0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x60840a0:s0 -> Node0x6085620;
Creating ConsElem Map for :	Node0x6084c60 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x6084c60:s0 -> Node0x6084320;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x6084320 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x6084320:s0 -> Node0x60854e0;
Creating ConsElem Map for :	Node0x6084de0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x6084de0:s0 -> Node0x60845a0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60845a0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  20: i32,  : RE\n|{<s0>0}}"];
	Node0x60845a0:s0 -> Node0x6085760;
Creating ConsElem Map for :	Node0x6084f60 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x6084f60:s0 -> Node0x60847a0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60847a0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0}}"];
	Node0x60847a0:s0 -> Node0x60858a0;
Creating ConsElem Map for :	Node0x60850e0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_ctx*,  : SMR\n|{<s0>0}}"];
	Node0x60850e0:s0 -> Node0x60849e0;
EDGE: [0: tymap-size 1]:%struct.bignum_ctx = type opaque
	Node0x60849e0 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 1, !dbg !380
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 1, !dbg !380
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !377
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Created 5 constraint variable(s) for node of size 1
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x61422f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 3, !dbg !385
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 3, !dbg !385
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !383
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[16,20]0x6142470
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !404
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !404
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !403
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x6142280
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %9, i64 0, !dbg !403
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %9, i64 0, !dbg !403
 allocation intermediate:   %9 = load i64*, i64** %d, align 8, !dbg !404
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !404
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !404
=>  %8 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !403
 allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !403
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Created 1 constraint variable(s) for node of size 1
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x6142280
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
Creating ConsElem Map for :	Node0x60853a0 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Creating ConsElem Map for :	Node0x6085260 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Running on BN_mod_exp_mont_word in context []
Running on BN_mod_exp_mont in context []
Running on BN_mod_exp_recp in context []
Running on BN_nnmod in context []
Running on BN_mod_exp_mont_consttime in context []
Running on BN_set_flags in context []
Running on BN_swap in context []
Running on BN_clear in context []
Running on BN_get_word in context []
Running on CRYPTO_malloc in context []
Running on llvm.memset.p0i8.i64 in context []
Running on BN_div in context []
Running on OPENSSL_cleanse in context []
Running on CRYPTO_free in context []
Running on BN_mul_word in context []
Running on BN_mod_exp_simple in context []
Running on BN_mod_mul in context []
Running on BN_set_params in context []
Running on BN_GENCB_new in context []
Running on BN_GENCB_free in context []
Running on BN_GENCB_set_old in context []
Running on BN_GENCB_set in context []
Running on BN_GENCB_get_arg in context []
Running on CRYPTO_secure_free in context []
Running on CRYPTO_secure_zalloc in context []
Running on BN_get_params in context []
Running on BN_value_one in context []
Running on BN_num_bits_word in context []
Running on BN_num_bits in context []
Running on BN_is_zero in context []
Running on BN_clear_free in context []
Running on BN_get_flags in context []
Running on BN_free in context []
Running on bn_init in context []
Running on llvm.memcpy.p0i8.p0i8.i64 in context []
Running on BN_new in context []
Running on CRYPTO_zalloc in context []
Running on BN_secure_new in context []
Running on bn_expand2 in context []
Running on BN_dup in context []
Running on BN_copy in context []
Running on bn_wexpand in context []
Running on BN_div_recp in context []
Running on BN_reciprocal in context []
Running on BN_rshift in context []
Running on BN_usub in context []
Running on BN_add_word in context []
Running on BN_set_word in context []
Running on BN_bin2bn in context []
Running on bn_correct_top in context []
Running on BN_bn2binpad in context []
Running on BN_bn2bin in context []
Running on BN_lebin2bn in context []
Running on BN_bn2lebinpad in context []
Running on BN_ucmp in context []
Running on BN_cmp in context []
Running on BN_set_bit in context []
Running on BN_clear_bit in context []
Running on BN_is_bit_set in context []
Running on BN_mask_bits in context []
Running on BN_set_negative in context []
Running on bn_cmp_words in context []
Running on bn_cmp_part_words in context []
Running on BN_consttime_swap in context []
Running on __assert_fail in context []
Running on BN_security_bits in context []
Running on BN_zero_ex in context []
Running on BN_abs_is_word in context []
Running on BN_is_one in context []
Running on BN_is_word in context []
Running on BN_is_odd in context []
Running on BN_is_negative in context []
Running on BN_to_montgomery in context []
Running on BN_with_flags in context []
Running on BN_mod_mul_montgomery in context []
Running on BN_from_montgomery in context []
Running on BN_MONT_CTX_new in context []
Running on BN_MONT_CTX_init in context []
Running on BN_MONT_CTX_free in context []
Running on BN_MONT_CTX_set in context []
Running on BN_mod_inverse in context []
Running on BN_lshift in context []
Running on BN_sub_word in context []
Running on BN_MONT_CTX_copy in context []
Running on BN_MONT_CTX_set_locked in context []
Running on CRYPTO_THREAD_read_lock in context []
Running on CRYPTO_THREAD_unlock in context []
Running on CRYPTO_THREAD_write_lock in context []
Running on bn_mul_add_words in context []
Running on bn_sub_words in context []
Running on BN_RECP_CTX_init in context []
Running on BN_RECP_CTX_new in context []
Running on BN_RECP_CTX_free in context []
Running on BN_RECP_CTX_set in context []
Running on BN_mod_mul_reciprocal in context []
Running on BN_is_odd in context [BN_mod_exp ]
Creating ConsElem Map for :	Node0x6083ab0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x6083ab0:s0 -> Node0x6083930;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x6083930 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x6083930:s0 -> Node0x6083b70;
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !364
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !364
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !363
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[8,12]0x60da890
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !369
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !369
StructType: allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !367
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x621f490
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %3, i64 0, !dbg !370
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %3, i64 0, !dbg !370
 allocation intermediate:   %3 = load i64*, i64** %d, align 8, !dbg !369
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !369
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !369
=>  %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !367
 allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !367
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x621f490
Running on BN_get_flags in context [BN_mod_exp ]
Creating ConsElem Map for :	Node0x60789a0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60789a0:s0 -> Node0x607e0f0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x607e0f0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x607e0f0:s0 -> Node0x60bdfb0;
Creating ConsElem Map for :	Node0x6078b20 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !366
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !366
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !365
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x61483b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x6150190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x6218cd0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x6218ea0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x6218fc0
Running on BN_mod_exp_mont_word in context [BN_mod_exp ]
Using taint reachable signature for:   call void @ERR_put_error(i32 3, i32 117, i32 66, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 1126), !dbg !405
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
Creating ConsElem Map for :	Node0x60c85f0 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str = private unnamed_addr constant [9 x i8] c\"bn_exp.c\\00\", align 1\n|{<s0>0}}"];
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
	Node0x60c85f0 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str = private unnamed_addr constant [9 x i8] c\"bn_exp.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
Using taint reachable signature for:   call void @ERR_put_error(i32 3, i32 117, i32 102, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 1134), !dbg !412
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
	Node0x60c85f0 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str = private unnamed_addr constant [9 x i8] c\"bn_exp.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %18), !dbg !455
RSINKGEP INSTRUCTION   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !454
Creating ConsElem Map for :	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
REACHABLE SOURCE:   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !454
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !454
Using taint reachable signature for:   %call24 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %19), !dbg !457
RSINKGEP INSTRUCTION   %19 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !456
REACHABLE SOURCE:   %19 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !456
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %19 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !456
Using taint reachable signature for:   %call25 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %20), !dbg !460
RSINKGEP INSTRUCTION   %20 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !459
REACHABLE SOURCE:   %20 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !459
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %20 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !459
Using taint reachable signature for:   %call26 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %21), !dbg !463
RSINKGEP INSTRUCTION   %21 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !462
REACHABLE SOURCE:   %21 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !462
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %21 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !462
Using taint reachable signature for:   %call58 = call i32 @BN_mul_word(%struct.bignum_st* %45, i64 %46), !dbg !538
RSINKGEP INSTRUCTION   %45 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !538
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %45 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !538
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %45 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !538
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call61 = call i32 @BN_div(%struct.bignum_st* null, %struct.bignum_st* %47, %struct.bignum_st* %48, %struct.bignum_st* %49, %struct.bignum_ctx* %50), !dbg !541
RSINKGEP INSTRUCTION %struct.bignum_st* null
RSINKGEP INSTRUCTION   %50 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !541
RSINKGEP INSTRUCTION   %48 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !541
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %49 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !541
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %47 = load %struct.bignum_st*, %struct.bignum_st** %t, align 8, !dbg !541
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE: %struct.bignum_st* null
REACHABLE SOURCE:   %50 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !541
REACHABLE SOURCE:   %48 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !541
REACHABLE SOURCE:   %49 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !541
REACHABLE SOURCE:   %47 = load %struct.bignum_st*, %struct.bignum_st** %t, align 8, !dbg !541
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION %struct.bignum_st* null
RSINKGEP INSTRUCTION   %50 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !541
RSINKGEP INSTRUCTION   %48 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !541
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %49 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !541
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %47 = load %struct.bignum_st*, %struct.bignum_st** %t, align 8, !dbg !541
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call92 = call i32 @BN_mul_word(%struct.bignum_st* %75, i64 %76), !dbg !595
RSINKGEP INSTRUCTION   %75 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !595
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %75 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !595
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %75 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !595
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call95 = call i32 @BN_div(%struct.bignum_st* null, %struct.bignum_st* %77, %struct.bignum_st* %78, %struct.bignum_st* %79, %struct.bignum_ctx* %80), !dbg !598
RSINKGEP INSTRUCTION   %79 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !598
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %80 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !598
RSINKGEP INSTRUCTION   %78 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !598
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION %struct.bignum_st* null
RSINKGEP INSTRUCTION   %77 = load %struct.bignum_st*, %struct.bignum_st** %t, align 8, !dbg !598
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %79 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !598
REACHABLE SOURCE:   %80 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !598
REACHABLE SOURCE:   %78 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !598
REACHABLE SOURCE: %struct.bignum_st* null
REACHABLE SOURCE:   %77 = load %struct.bignum_st*, %struct.bignum_st** %t, align 8, !dbg !598
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %79 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !598
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %80 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !598
RSINKGEP INSTRUCTION   %78 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !598
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION %struct.bignum_st* null
RSINKGEP INSTRUCTION   %77 = load %struct.bignum_st*, %struct.bignum_st** %t, align 8, !dbg !598
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call115 = call i32 @BN_mul_word(%struct.bignum_st* %95, i64 %96), !dbg !630
RSINKGEP INSTRUCTION   %95 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !630
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %95 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !630
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %95 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !630
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call118 = call i32 @BN_div(%struct.bignum_st* null, %struct.bignum_st* %97, %struct.bignum_st* %98, %struct.bignum_st* %99, %struct.bignum_ctx* %100), !dbg !633
RSINKGEP INSTRUCTION   %99 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !633
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %100 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !633
RSINKGEP INSTRUCTION %struct.bignum_st* null
RSINKGEP INSTRUCTION   %97 = load %struct.bignum_st*, %struct.bignum_st** %t, align 8, !dbg !633
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %98 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !633
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %99 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !633
REACHABLE SOURCE:   %100 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !633
REACHABLE SOURCE: %struct.bignum_st* null
REACHABLE SOURCE:   %97 = load %struct.bignum_st*, %struct.bignum_st** %t, align 8, !dbg !633
REACHABLE SOURCE:   %98 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !633
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %99 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !633
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %100 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !633
RSINKGEP INSTRUCTION %struct.bignum_st* null
RSINKGEP INSTRUCTION   %97 = load %struct.bignum_st*, %struct.bignum_st** %t, align 8, !dbg !633
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %98 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !633
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %112), !dbg !667
RSINKGEP INSTRUCTION   %112 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !666
REACHABLE SOURCE:   %112 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !666
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %112 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !666
Creating ConsElem Map for :	Node0x6087130 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x6087130:s0 -> Node0x6086a30;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x6086a30 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x6086a30:s0 -> Node0x6089010;
Creating ConsElem Map for :	Node0x60872b0 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60873f0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60873f0:s0 -> Node0x6086bb0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x6086bb0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x6086bb0:s0 -> Node0x6088ed0;
Creating ConsElem Map for :	Node0x6087570 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x6087570:s0 -> Node0x6086c70;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x6086c70 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x6086c70:s0 -> Node0x6088a10;
Creating ConsElem Map for :	Node0x60876f0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_ctx*,  : SMR\n|{<s0>0}}"];
	Node0x60876f0:s0 -> Node0x6086db0;
EDGE: [0: tymap-size 1]:%struct.bignum_ctx = type opaque
	Node0x6086db0 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x6087870 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x6087870:s0 -> Node0x6086eb0;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x6086eb0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6086eb0:s0 -> Node0x608da40;
Creating ConsElem Map for :	Node0x60879f0 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x60879f0:s0 -> Node0x6086eb0;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x6086eb0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6086eb0:s0 -> Node0x608da40;
Creating ConsElem Map for :	Node0x6087df0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x6086ff0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 1, !dbg !417
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 1, !dbg !417
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !415
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[8,12]0x6218330
DSOURCEGEP INSTRUCTION   %d8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !421
[Source:]   %d8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !421
StructType: allocation intermediate:   %5 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !420
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x6218280
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %6, i64 0, !dbg !420
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %6, i64 0, !dbg !420
 allocation intermediate:   %6 = load i64*, i64** %d8, align 8, !dbg !421
=>  %d8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !421
 allocation intermediate:   %d8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !421
=>  %5 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !420
 allocation intermediate:   %5 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !420
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x6218280
Creating ConsElem Map for :	Node0x6087cb0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60882f0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60882f0:s0 -> Node0x6088b50;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x6088b50 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x6088470 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x6088470:s0 -> Node0x6088c50;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x6088c50 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x6088c50:s0 -> Node0x6089150;
Creating ConsElem Map for :	Node0x60885f0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60885f0:s0 -> Node0x6088c50;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x6088c50 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x6088c50:s0 -> Node0x6089150;
Creating ConsElem Map for :	Node0x6087f30 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x6088070 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Creating ConsElem Map for :	Node0x6087b70 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60881b0 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Creating ConsElem Map for :	Node0x6088770 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x6088770:s0 -> Node0x6088c50;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x6088c50 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x6088c50:s0 -> Node0x6089150;
Running on BN_mod_exp_mont in context [BN_mod_exp ]
Using taint reachable signature for:   call void @ERR_put_error(i32 3, i32 109, i32 102, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 328), !dbg !431
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
	Node0x60c85f0 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str = private unnamed_addr constant [9 x i8] c\"bn_exp.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %16), !dbg !456
RSINKGEP INSTRUCTION   %16 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !455
REACHABLE SOURCE:   %16 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !455
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %16 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !455
Using taint reachable signature for:   %call20 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %17), !dbg !458
RSINKGEP INSTRUCTION   %17 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !457
REACHABLE SOURCE:   %17 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !457
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %17 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !457
Using taint reachable signature for:   %call21 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %18), !dbg !461
RSINKGEP INSTRUCTION   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !460
REACHABLE SOURCE:   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !460
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !460
Using taint reachable signature for:   %call22 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %19), !dbg !464
RSINKGEP INSTRUCTION   %19 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !463
REACHABLE SOURCE:   %19 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !463
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %19 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !463
Using taint reachable signature for:   %call49 = call i32 @BN_nnmod(%struct.bignum_st* %32, %struct.bignum_st* %33, %struct.bignum_st* %34, %struct.bignum_ctx* %35), !dbg !514
RSINKGEP INSTRUCTION   %35 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !513
RSINKGEP INSTRUCTION   %32 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx48, align 8, !dbg !508
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %34 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !512
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %33 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !511
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %35 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !513
REACHABLE SOURCE:   %32 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx48, align 8, !dbg !508
REACHABLE SOURCE:   %34 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !512
REACHABLE SOURCE:   %33 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !511
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %35 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !513
RSINKGEP INSTRUCTION   %32 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx48, align 8, !dbg !508
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %34 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !512
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %33 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !511
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call88 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %57), !dbg !591
RSINKGEP INSTRUCTION   %57 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !588
REACHABLE SOURCE:   %57 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !588
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %57 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !588
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %146), !dbg !819
RSINKGEP INSTRUCTION   %146 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !818
REACHABLE SOURCE:   %146 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !818
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %146 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !818
Creating ConsElem Map for :	Node0x60a0b60 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60a0b60:s0 -> Node0x609ffe0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x609ffe0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x609ffe0:s0 -> Node0x60a3260;
Creating ConsElem Map for :	Node0x60a0ce0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60a0ce0:s0 -> Node0x60a0160;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60a0160 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60a0160:s0 -> Node0x60a33a0;
Creating ConsElem Map for :	Node0x60a0e60 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60a0e60:s0 -> Node0x60a03a0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60a03a0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60a03a0:s0 -> Node0x60a34e0;
Creating ConsElem Map for :	Node0x60a0fe0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60a0fe0:s0 -> Node0x60a05a0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60a05a0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60a05a0:s0 -> Node0x60a2d40;
Creating ConsElem Map for :	Node0x60a1160 [shape=record,shape=Mrecord,label="{0: %struct.bignum_ctx*,  : SMR\n|{<s0>0}}"];
	Node0x60a1160:s0 -> Node0x60a07e0;
EDGE: [0: tymap-size 1]:%struct.bignum_ctx = type opaque
	Node0x60a07e0 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x60a12e0 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x60a12e0:s0 -> Node0x607bae0;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x607bae0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x607bae0:s0 -> Node0x6089290;
Creating ConsElem Map for :	Node0x60a1820 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60a1e60 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60a25a0 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x60a25a0:s0 -> Node0x607bae0;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x607bae0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x607bae0:s0 -> Node0x6089290;
Creating ConsElem Map for :	Node0x60a0a20 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60a16e0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60a1fa0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60a1fa0:s0 -> Node0x60a2840;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60a2840 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x60a2840:s0 -> Node0x60a3880;
Creating ConsElem Map for :	Node0x60a2120 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60a2120:s0 -> Node0x60a2ac0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60a2ac0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x60a2ac0:s0 -> Node0x60a2e80;
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !465
[Sink:]   %arrayidx = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !465
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Tainting at offset: 0
	Node0x60a0160 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60a0160:s0 -> Node0x60a33a0;
Trying to find element at offset 0
Tainting at offset: 0
Created 32 constraint variable(s) for node of size 8
	Node0x60a2420 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x60a2420:s0 -> Node0x60a0160;
Trying to find element at offset 0
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !465
[Sink:]   %arrayidx = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !465
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Tainting at offset: 0
	Node0x60a0160 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60a0160:s0 -> Node0x60a33a0;
Trying to find element at offset 0
Tainting at offset: 0
	Node0x60a2420 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x60a2420:s0 -> Node0x60a0160;
Trying to find element at offset 0
DSOURCEGEP INSTRUCTION   %arrayidx27 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !473
[Source:]   %arrayidx27 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !473
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Trying to find element at offset 0
	Node0x60a2420 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x60a2420:s0 -> Node0x60a0160;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x62daf00
CONSTRAINING: 0: %struct.bignum_st*,   array: SCMR: elem 0::0x6691fd0
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %28, i32 0, i32 3, !dbg !500
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %28, i32 0, i32 3, !dbg !500
StructType: allocation intermediate:   %28 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !498
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[16,20]0x62db140
DSOURCEGEP INSTRUCTION   %arrayidx48 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !508
[Source:]   %arrayidx48 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !508
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Trying to find element at offset 0
	Node0x60a2420 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x60a2420:s0 -> Node0x60a0160;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x62daf00
CONSTRAINING: 0: %struct.bignum_st*,   array: SCMR: elem 0::0x6691fd0
DSOURCEGEP INSTRUCTION   %arrayidx53 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !517
[Source:]   %arrayidx53 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !517
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Trying to find element at offset 0
	Node0x60a2420 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x60a2420:s0 -> Node0x60a0160;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x62daf00
CONSTRAINING: 0: %struct.bignum_st*,   array: SCMR: elem 0::0x6691fd0
Creating ConsElem Map for :	Node0x60a22a0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60a22a0:s0 -> Node0x60a0160;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60a0160 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60a0160:s0 -> Node0x60a33a0;
DSOURCEGEP INSTRUCTION   %arrayidx61 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !530
[Source:]   %arrayidx61 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !530
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Trying to find element at offset 0
	Node0x60a2420 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x60a2420:s0 -> Node0x60a0160;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x62daf00
CONSTRAINING: 0: %struct.bignum_st*,   array: SCMR: elem 0::0x6691fd0
Creating ConsElem Map for :	Node0x60a1be0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx81 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !567
[Source:]   %arrayidx81 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !567
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Trying to find element at offset 0
	Node0x60a2420 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x60a2420:s0 -> Node0x60a0160;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x62daf00
CONSTRAINING: 0: %struct.bignum_st*,   array: SCMR: elem 0::0x6691fd0
DSOURCEGEP INSTRUCTION   %arrayidx82 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !568
[Source:]   %arrayidx82 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !568
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Trying to find element at offset 0
	Node0x60a2420 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x60a2420:s0 -> Node0x60a0160;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x62daf00
CONSTRAINING: 0: %struct.bignum_st*,   array: SCMR: elem 0::0x6691fd0
Creating ConsElem Map for :	Node0x60a15a0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60a1460 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSINKGEP INSTRUCTION   %arrayidx89 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom, !dbg !593
[Sink:]   %arrayidx89 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom, !dbg !593
DSINKGEP INSTRUCTION   %arrayidx89 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom, !dbg !593
[Sink:]   %arrayidx89 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom, !dbg !593
DSOURCEGEP INSTRUCTION   %arrayidx93 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom92, !dbg !598
[Source:]   %arrayidx93 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom92, !dbg !598
DSOURCEGEP INSTRUCTION   %arrayidx96 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom95, !dbg !601
[Source:]   %arrayidx96 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom95, !dbg !601
Creating ConsElem Map for :	Node0x60a1d20 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60a1960 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60a1aa0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %68, i32 0, i32 1, !dbg !619
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %68, i32 0, i32 1, !dbg !619
StructType: allocation intermediate:   %68 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !618
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[8,12]0x61402e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
DSOURCEGEP INSTRUCTION   %d105 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %71, i32 0, i32 0, !dbg !625
[Source:]   %d105 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %71, i32 0, i32 0, !dbg !625
StructType: allocation intermediate:   %71 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !624
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x62db7b0
DSOURCEGEP INSTRUCTION   %arrayidx106 = getelementptr inbounds i64, i64* %72, i64 %idxprom104, !dbg !624
[Source:]   %arrayidx106 = getelementptr inbounds i64, i64* %72, i64 %idxprom104, !dbg !624
DSOURCEGEP INSTRUCTION   %d113 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %76, i32 0, i32 0, !dbg !637
[Source:]   %d113 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %76, i32 0, i32 0, !dbg !637
StructType: allocation intermediate:   %76 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !636
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x62db7b0
DSOURCEGEP INSTRUCTION   %arrayidx114 = getelementptr inbounds i64, i64* %77, i64 0, !dbg !636
[Source:]   %arrayidx114 = getelementptr inbounds i64, i64* %77, i64 0, !dbg !636
 allocation intermediate:   %77 = load i64*, i64** %d113, align 8, !dbg !637
=>  %d113 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %76, i32 0, i32 0, !dbg !637
 allocation intermediate:   %d113 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %76, i32 0, i32 0, !dbg !637
=>  %76 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !636
 allocation intermediate:   %76 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !636
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x62db7b0
DSOURCEGEP INSTRUCTION   %d116 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %79, i32 0, i32 0, !dbg !640
[Source:]   %d116 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %79, i32 0, i32 0, !dbg !640
StructType: allocation intermediate:   %79 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !639
=>  %r = alloca %struct.bignum_st*, align 8
FINAL:   %r = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x65f3540
DSINKGEP INSTRUCTION   %arrayidx117 = getelementptr inbounds i64, i64* %80, i64 0, !dbg !639
[Sink:]   %arrayidx117 = getelementptr inbounds i64, i64* %80, i64 0, !dbg !639
 allocation intermediate:   %80 = load i64*, i64** %d116, align 8, !dbg !640
=>  %d116 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %79, i32 0, i32 0, !dbg !640
 allocation intermediate:   %d116 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %79, i32 0, i32 0, !dbg !640
=>  %79 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !639
 allocation intermediate:   %79 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !639
=>  %r = alloca %struct.bignum_st*, align 8
FINAL:   %r = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x60a2ac0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x60a2ac0:s0 -> Node0x60a2e80;
Trying to find element at offset 0
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx117 = getelementptr inbounds i64, i64* %80, i64 0, !dbg !639
[Sink:]   %arrayidx117 = getelementptr inbounds i64, i64* %80, i64 0, !dbg !639
 allocation intermediate:   %80 = load i64*, i64** %d116, align 8, !dbg !640
=>  %d116 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %79, i32 0, i32 0, !dbg !640
 allocation intermediate:   %d116 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %79, i32 0, i32 0, !dbg !640
=>  %79 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !639
 allocation intermediate:   %79 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !639
=>  %r = alloca %struct.bignum_st*, align 8
FINAL:   %r = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x60a2ac0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x60a2ac0:s0 -> Node0x60a2e80;
Trying to find element at offset 0
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %d122 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %84, i32 0, i32 0, !dbg !654
[Source:]   %d122 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %84, i32 0, i32 0, !dbg !654
StructType: allocation intermediate:   %84 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !653
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x62db7b0
DSOURCEGEP INSTRUCTION   %arrayidx123 = getelementptr inbounds i64, i64* %85, i64 %idxprom121, !dbg !653
[Source:]   %arrayidx123 = getelementptr inbounds i64, i64* %85, i64 %idxprom121, !dbg !653
DSOURCEGEP INSTRUCTION   %d126 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %88, i32 0, i32 0, !dbg !658
[Source:]   %d126 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %88, i32 0, i32 0, !dbg !658
StructType: allocation intermediate:   %88 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !657
=>  %r = alloca %struct.bignum_st*, align 8
FINAL:   %r = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x65f3540
DSINKGEP INSTRUCTION   %arrayidx127 = getelementptr inbounds i64, i64* %89, i64 %idxprom125, !dbg !657
[Sink:]   %arrayidx127 = getelementptr inbounds i64, i64* %89, i64 %idxprom125, !dbg !657
DSINKGEP INSTRUCTION   %arrayidx127 = getelementptr inbounds i64, i64* %89, i64 %idxprom125, !dbg !657
[Sink:]   %arrayidx127 = getelementptr inbounds i64, i64* %89, i64 %idxprom125, !dbg !657
DSINKGEP INSTRUCTION   %top131 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %92, i32 0, i32 1, !dbg !664
[Sink:]   %top131 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %92, i32 0, i32 1, !dbg !664
StructType:::IS STRUCT TY:: allocation intermediate:   %92 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !663
=>  %r = alloca %struct.bignum_st*, align 8
FINAL:   %r = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x60a2ac0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x60a2ac0:s0 -> Node0x60a2e80;
Trying to find element at offset 8
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top131 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %92, i32 0, i32 1, !dbg !664
[Sink:]   %top131 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %92, i32 0, i32 1, !dbg !664
StructType:::IS STRUCT TY:: allocation intermediate:   %92 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !663
=>  %r = alloca %struct.bignum_st*, align 8
FINAL:   %r = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x60a2ac0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x60a2ac0:s0 -> Node0x60a2e80;
Trying to find element at offset 8
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %arrayidx185 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom184, !dbg !785
[Source:]   %arrayidx185 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom184, !dbg !785
Running on BN_mod_exp_recp in context [BN_mod_exp ]
Using taint reachable signature for:   call void @ERR_put_error(i32 3, i32 125, i32 66, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 185), !dbg !420
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
	Node0x60c85f0 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str = private unnamed_addr constant [9 x i8] c\"bn_exp.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %9), !dbg !445
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !444
REACHABLE SOURCE:   %9 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !444
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !444
Using taint reachable signature for:   %call15 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %10), !dbg !447
RSINKGEP INSTRUCTION   %10 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !446
REACHABLE SOURCE:   %10 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !446
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %10 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !446
Using taint reachable signature for:   %call16 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %11), !dbg !450
RSINKGEP INSTRUCTION   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !449
REACHABLE SOURCE:   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !449
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !449
Using taint reachable signature for:   %call41 = call i32 @BN_nnmod(%struct.bignum_st* %23, %struct.bignum_st* %24, %struct.bignum_st* %25, %struct.bignum_ctx* %26), !dbg !496
RSINKGEP INSTRUCTION   %23 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx40, align 8, !dbg !491
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %24 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !493
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %25 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !494
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %26 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !495
REACHABLE SOURCE:   %23 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx40, align 8, !dbg !491
REACHABLE SOURCE:   %24 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !493
REACHABLE SOURCE:   %25 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !494
REACHABLE SOURCE:   %26 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !495
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %23 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx40, align 8, !dbg !491
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %24 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !493
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %25 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !494
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %26 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !495
Using taint reachable signature for:   %call73 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %41), !dbg !559
RSINKGEP INSTRUCTION   %41 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !556
REACHABLE SOURCE:   %41 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !556
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %41 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !556
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %92), !dbg !714
RSINKGEP INSTRUCTION   %92 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !713
REACHABLE SOURCE:   %92 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !713
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %92 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !713
Creating ConsElem Map for :	Node0x60b54f0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60b54f0:s0 -> Node0x60b4cf0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60b4cf0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60b4cf0:s0 -> Node0x60b75f0;
Creating ConsElem Map for :	Node0x60b5670 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60b5670:s0 -> Node0x60b4e70;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60b4e70 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60b4e70:s0 -> Node0x60ef440;
Creating ConsElem Map for :	Node0x60b57f0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60b57f0:s0 -> Node0x60b4f30;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60b4f30 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60b4f30:s0 -> Node0x60b7230;
Creating ConsElem Map for :	Node0x60b5970 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60b5970:s0 -> Node0x60b5070;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60b5070 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60b5070:s0 -> Node0x60b74b0;
Creating ConsElem Map for :	Node0x60b5af0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_ctx*,  : SMR\n|{<s0>0}}"];
	Node0x60b5af0:s0 -> Node0x60b52b0;
EDGE: [0: tymap-size 1]:%struct.bignum_ctx = type opaque
	Node0x60b52b0 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x60b6030 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60b6670 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60b53b0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60b5ef0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60b67b0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60b67b0:s0 -> Node0x60b6d30;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60b6d30 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x60b6d30:s0 -> Node0x60b7370;
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !451
[Sink:]   %arrayidx = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !451
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Tainting at offset: 0
Created 32 constraint variable(s) for node of size 8
	Node0x60b6930 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x60b6930:s0 -> Node0x60b6fb0;
Trying to find element at offset 0
Tainting at offset: 0
Created 32 constraint variable(s) for node of size 24
	Node0x60b6fb0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x60b6fb0:s0 -> Node0x60b7870;
Trying to find element at offset 0
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !451
[Sink:]   %arrayidx = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !451
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Tainting at offset: 0
	Node0x60b6930 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x60b6930:s0 -> Node0x60b6fb0;
Trying to find element at offset 0
Tainting at offset: 0
	Node0x60b6fb0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x60b6fb0:s0 -> Node0x60b7870;
Trying to find element at offset 0
DSOURCEGEP INSTRUCTION   %arrayidx19 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !456
[Source:]   %arrayidx19 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !456
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Trying to find element at offset 0
	Node0x60b6930 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x60b6930:s0 -> Node0x60b6fb0;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE: elem 0::0x62ef040
CONSTRAINING: 0: %struct.bignum_st*,   array: SCMR: elem 0::0x697ec10
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %14, i32 0, i32 3, !dbg !463
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %14, i32 0, i32 3, !dbg !463
StructType: allocation intermediate:   %14 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !461
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[16,20]0x694a640
DSINKGEP INSTRUCTION   %neg29 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %18, i32 0, i32 3, !dbg !473
[Sink:]   %neg29 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %18, i32 0, i32 3, !dbg !473
StructType:::IS STRUCT TY:: allocation intermediate:   %18 = load %struct.bignum_st*, %struct.bignum_st** %aa, align 8, !dbg !472
=>  %aa = alloca %struct.bignum_st*, align 8
FINAL:   %aa = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x60b6d30 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x60b6d30:s0 -> Node0x60b7370;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg29 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %18, i32 0, i32 3, !dbg !473
[Sink:]   %neg29 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %18, i32 0, i32 3, !dbg !473
StructType:::IS STRUCT TY:: allocation intermediate:   %18 = load %struct.bignum_st*, %struct.bignum_st** %aa, align 8, !dbg !472
=>  %aa = alloca %struct.bignum_st*, align 8
FINAL:   %aa = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x60b6d30 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x60b6d30:s0 -> Node0x60b7370;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %arrayidx40 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !491
[Source:]   %arrayidx40 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !491
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Trying to find element at offset 0
	Node0x60b6930 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x60b6930:s0 -> Node0x60b6fb0;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE: elem 0::0x62ef040
CONSTRAINING: 0: %struct.bignum_st*,   array: SCMR: elem 0::0x697ec10
DSOURCEGEP INSTRUCTION   %arrayidx45 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !499
[Source:]   %arrayidx45 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !499
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Trying to find element at offset 0
	Node0x60b6930 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x60b6930:s0 -> Node0x60b6fb0;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE: elem 0::0x62ef040
CONSTRAINING: 0: %struct.bignum_st*,   array: SCMR: elem 0::0x697ec10
Creating ConsElem Map for :	Node0x60b63f0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx66 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !536
[Source:]   %arrayidx66 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !536
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Trying to find element at offset 0
	Node0x60b6930 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x60b6930:s0 -> Node0x60b6fb0;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE: elem 0::0x62ef040
CONSTRAINING: 0: %struct.bignum_st*,   array: SCMR: elem 0::0x697ec10
DSOURCEGEP INSTRUCTION   %arrayidx67 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !537
[Source:]   %arrayidx67 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !537
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Trying to find element at offset 0
	Node0x60b6930 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x60b6930:s0 -> Node0x60b6fb0;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE: elem 0::0x62ef040
CONSTRAINING: 0: %struct.bignum_st*,   array: SCMR: elem 0::0x697ec10
Creating ConsElem Map for :	Node0x60b5db0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60b5c70 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSINKGEP INSTRUCTION   %arrayidx74 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom, !dbg !561
[Sink:]   %arrayidx74 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom, !dbg !561
DSINKGEP INSTRUCTION   %arrayidx74 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom, !dbg !561
[Sink:]   %arrayidx74 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom, !dbg !561
DSOURCEGEP INSTRUCTION   %arrayidx78 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom77, !dbg !566
[Source:]   %arrayidx78 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom77, !dbg !566
DSOURCEGEP INSTRUCTION   %arrayidx81 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom80, !dbg !569
[Source:]   %arrayidx81 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom80, !dbg !569
Creating ConsElem Map for :	Node0x60b6530 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60b6170 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60b62b0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx138 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom137, !dbg !695
[Source:]   %arrayidx138 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom137, !dbg !695
Running on BN_get_flags in context [BN_mod_exp_mont_word ]
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !366
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !366
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !365
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x61483b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x6150190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x6218cd0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x6218ea0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x6218fc0
Running on BN_is_odd in context [BN_mod_exp_mont_word ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !364
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !364
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !363
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[8,12]0x60da890
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !369
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !369
StructType: allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !367
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x621f490
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %3, i64 0, !dbg !370
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %3, i64 0, !dbg !370
 allocation intermediate:   %3 = load i64*, i64** %d, align 8, !dbg !369
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !369
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !369
=>  %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !367
 allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !367
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x621f490
Running on BN_num_bits in context [BN_mod_exp_mont_word ]
Creating ConsElem Map for :	Node0x6077340 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x6077340:s0 -> Node0x6077100;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x6077100 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x6077100:s0 -> Node0x60774c0;
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !366
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !366
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !365
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x6610ef0
Creating ConsElem Map for :	Node0x6077400 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x6077280 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !377
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !377
StructType: allocation intermediate:   %5 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !376
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x6610e80
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !376
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !376
Running on BN_is_one in context [BN_mod_exp_mont_word ]
Creating ConsElem Map for :	Node0x608c2e0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x608c2e0:s0 -> Node0x608c160;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x608c160 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x608c160:s0 -> Node0x608c3a0;
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !368
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !368
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !366
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[16,20]0x61f5e50
Running on BN_set_word in context [BN_mod_exp_mont_word ]
Creating ConsElem Map for :	Node0x6081620 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x6081620:s0 -> Node0x6094dc0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Creating ConsElem Map for :	Node0x60816e0 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Creating ConsElem Map for :	Node0x6081560 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !372
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !372
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !371
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !372
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !372
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !371
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x6676440
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x6676560
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x6676680
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69bd5a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x6a2efa0
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !375
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !375
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !376
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !375
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !375
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !376
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !380
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !380
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !379
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !380
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !380
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !379
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on BN_MONT_CTX_new in context [BN_mod_exp_mont_word ]
Using taint reachable signature for:   %call = call i8* @CRYPTO_malloc(i64 104, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0), i32 217), !dbg !363
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
Creating ConsElem Map for :	Node0x6099530 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str38 = private unnamed_addr constant [10 x i8] c\"bn_mont.c\\00\", align 1\n|{<s0>0}}"];
REACHABLE SOURCE: i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
	Node0x6099530 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str38 = private unnamed_addr constant [10 x i8] c\"bn_mont.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
Creating ConsElem Map for :	Node0x6097410 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x6097410:s0 -> Node0x6097590;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x6097590 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6097590:s0 -> Node0x60966b0;
Creating ConsElem Map for :	Node0x6097290 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x6097290:s0 -> Node0x6097590;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x6097590 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6097590:s0 -> Node0x60966b0;
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 5, !dbg !372
[Sink:]   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 5, !dbg !372
StructType:::IS STRUCT TY:: allocation intermediate:   %2 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ret, align 8, !dbg !371
=>  %ret = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %ret = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 96
	Node0x6097590 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6097590:s0 -> Node0x60966b0;
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Tainting at offset: 96
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 5, !dbg !372
[Sink:]   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 5, !dbg !372
StructType:::IS STRUCT TY:: allocation intermediate:   %2 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ret, align 8, !dbg !371
=>  %ret = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %ret = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 96
	Node0x6097590 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6097590:s0 -> Node0x60966b0;
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Tainting at offset: 96
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on BN_MONT_CTX_set in context [BN_mod_exp_mont_word ]
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %1), !dbg !379
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !378
REACHABLE SOURCE:   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !378
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !378
Using taint reachable signature for:   %call1 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %2), !dbg !382
RSINKGEP INSTRUCTION   %2 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !380
REACHABLE SOURCE:   %2 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !380
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %2 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !380
Using taint reachable signature for:   %call25 = call %struct.bignum_st* @BN_mod_inverse(%struct.bignum_st* %16, %struct.bignum_st* %17, %struct.bignum_st* %tmod, %struct.bignum_ctx* %18), !dbg !448
RSINKGEP INSTRUCTION   %16 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !444
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !447
RSINKGEP INSTRUCTION   %17 = load %struct.bignum_st*, %struct.bignum_st** %R, align 8, !dbg !446
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %tmod = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %16 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !444
REACHABLE SOURCE:   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !447
REACHABLE SOURCE:   %17 = load %struct.bignum_st*, %struct.bignum_st** %R, align 8, !dbg !446
REACHABLE SOURCE:   %tmod = alloca %struct.bignum_st, align 8
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %16 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !444
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !447
RSINKGEP INSTRUCTION   %17 = load %struct.bignum_st*, %struct.bignum_st** %R, align 8, !dbg !446
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %tmod = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call29 = call i32 @BN_lshift(%struct.bignum_st* %19, %struct.bignum_st* %20, i32 64), !dbg !455
RSINKGEP INSTRUCTION   %19 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !452
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %20 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !454
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %19 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !452
REACHABLE SOURCE:   %20 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !454
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %19 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !452
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %20 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !454
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call36 = call i32 @BN_sub_word(%struct.bignum_st* %22, i64 1), !dbg !465
RSINKGEP INSTRUCTION   %22 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !462
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %22 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !462
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %22 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !462
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call45 = call i32 @BN_div(%struct.bignum_st* %24, %struct.bignum_st* null, %struct.bignum_st* %25, %struct.bignum_st* %tmod, %struct.bignum_ctx* %26), !dbg !479
RSINKGEP INSTRUCTION   %24 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !475
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION %struct.bignum_st* null
RSINKGEP INSTRUCTION   %26 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !478
RSINKGEP INSTRUCTION   %25 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !477
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %tmod = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %24 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !475
REACHABLE SOURCE: %struct.bignum_st* null
REACHABLE SOURCE:   %26 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !478
REACHABLE SOURCE:   %25 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !477
REACHABLE SOURCE:   %tmod = alloca %struct.bignum_st, align 8
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %24 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !475
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION %struct.bignum_st* null
RSINKGEP INSTRUCTION   %26 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !478
RSINKGEP INSTRUCTION   %25 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !477
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %tmod = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call69 = call i32 @BN_div(%struct.bignum_st* null, %struct.bignum_st* %RR66, %struct.bignum_st* %RR67, %struct.bignum_st* %N68, %struct.bignum_ctx* %41), !dbg !511
RSINKGEP INSTRUCTION %struct.bignum_st* null
RSINKGEP INSTRUCTION   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !511
[Sink:]   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !511
StructType:::IS STRUCT TY:: allocation intermediate:   %38 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !511
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
Created 1 constraint variable(s) for node of size 1
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !511
[Sink:]   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !511
StructType:::IS STRUCT TY:: allocation intermediate:   %39 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !511
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !511
[Sink:]   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !511
StructType:::IS STRUCT TY:: allocation intermediate:   %40 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !511
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 2
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %41 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !511
REACHABLE SOURCE: %struct.bignum_st* null
REACHABLE SOURCE:   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !511
REACHABLE SOURCE:   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !511
REACHABLE SOURCE:   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !511
REACHABLE SOURCE:   %41 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !511
RSOURCEGEP INSTRUCTION   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !511
[Source:]   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !511
StructType: allocation intermediate:   %38 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !511
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x6c70660
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x6c70660
RSOURCEGEP INSTRUCTION   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !511
[Source:]   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !511
StructType: allocation intermediate:   %39 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !511
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x6c70660
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x6c70660
RSOURCEGEP INSTRUCTION   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !511
[Source:]   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !511
StructType: allocation intermediate:   %40 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !511
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x6c70660
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x6c70660
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION %struct.bignum_st* null
RSINKGEP INSTRUCTION   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !511
[Sink:]   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !511
StructType:::IS STRUCT TY:: allocation intermediate:   %38 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !511
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !511
[Sink:]   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !511
StructType:::IS STRUCT TY:: allocation intermediate:   %39 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !511
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !511
[Sink:]   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !511
StructType:::IS STRUCT TY:: allocation intermediate:   %40 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !511
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 2
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %41 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !511
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %42), !dbg !518
RSINKGEP INSTRUCTION   %42 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !517
REACHABLE SOURCE:   %42 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !517
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %42 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !517
Creating ConsElem Map for :	Node0x609b800 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x609b800:s0 -> Node0x609ca80;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Creating ConsElem Map for :	Node0x609b980 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x609b980:s0 -> Node0x609b400;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x609b400 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x609b400:s0 -> Node0x609c480;
Creating ConsElem Map for :	Node0x609bb00 [shape=record,shape=Mrecord,label="{0: %struct.bignum_ctx*,  : SMR\n|{<s0>0}}"];
	Node0x609bb00:s0 -> Node0x609b5c0;
EDGE: [0: tymap-size 1]:%struct.bignum_ctx = type opaque
	Node0x609b5c0 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x609bc80 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x609b6c0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x609bdc0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x609bdc0:s0 -> Node0x609c200;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x609c200 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x609c200:s0 -> Node0x609c6c0;
Creating ConsElem Map for :	Node0x609bf40 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x609bf40:s0 -> Node0x609ca80;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %N8, i32 0, i32 3, !dbg !399
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %N8, i32 0, i32 3, !dbg !399
StructType:::IS STRUCT TY:: allocation intermediate:   %N8 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %6, i32 0, i32 2, !dbg !398
=>  %6 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !397
 allocation intermediate:   %6 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !397
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 16
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %N8, i32 0, i32 3, !dbg !399
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %N8, i32 0, i32 3, !dbg !399
StructType:::IS STRUCT TY:: allocation intermediate:   %N8 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %6, i32 0, i32 2, !dbg !398
=>  %6 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !397
 allocation intermediate:   %6 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !397
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 16
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 0, !dbg !408
[Sink:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 0, !dbg !408
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 0, !dbg !408
[Sink:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 0, !dbg !408
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 2, !dbg !410
[Sink:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 2, !dbg !410
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 12
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 2, !dbg !410
[Sink:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 2, !dbg !410
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 12
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg9 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 3, !dbg !412
[Sink:]   %neg9 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 3, !dbg !412
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg9 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 3, !dbg !412
[Sink:]   %neg9 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 3, !dbg !412
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %ri = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %9, i32 0, i32 0, !dbg !426
[Sink:]   %ri = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %9, i32 0, i32 0, !dbg !426
StructType:::IS STRUCT TY:: allocation intermediate:   %9 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !425
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 0
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %ri = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %9, i32 0, i32 0, !dbg !426
[Sink:]   %ri = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %9, i32 0, i32 0, !dbg !426
StructType:::IS STRUCT TY:: allocation intermediate:   %9 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !425
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 0
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %d20 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !435
[Source:]   %d20 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !435
StructType: allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %mod.addr, align 8, !dbg !434
=>  %mod.addr = alloca %struct.bignum_st*, align 8
FINAL:   %mod.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x6c53880
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !434
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !434
 allocation intermediate:   %13 = load i64*, i64** %d20, align 8, !dbg !435
=>  %d20 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !435
 allocation intermediate:   %d20 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !435
=>  %12 = load %struct.bignum_st*, %struct.bignum_st** %mod.addr, align 8, !dbg !434
 allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %mod.addr, align 8, !dbg !434
=>  %mod.addr = alloca %struct.bignum_st*, align 8
FINAL:   %mod.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x6c53880
DSINKGEP INSTRUCTION   %arrayidx21 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !436
[Sink:]   %arrayidx21 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !436
ArrayType:FINAL:   %buf = alloca [2 x i64], align 16
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx21 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !436
[Sink:]   %arrayidx21 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !436
ArrayType:FINAL:   %buf = alloca [2 x i64], align 16
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx22 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 1, !dbg !438
[Sink:]   %arrayidx22 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 1, !dbg !438
ArrayType:FINAL:   %buf = alloca [2 x i64], align 16
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx22 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 1, !dbg !438
[Sink:]   %arrayidx22 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 1, !dbg !438
ArrayType:FINAL:   %buf = alloca [2 x i64], align 16
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !440
[Source:]   %arrayidx23 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !440
ArrayType:FINAL:   %buf = alloca [2 x i64], align 16
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 1, !dbg !442
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 1, !dbg !442
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 1, !dbg !442
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 1, !dbg !442
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %top49 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %27, i32 0, i32 1, !dbg !483
[Source:]   %top49 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %27, i32 0, i32 1, !dbg !483
StructType: allocation intermediate:   %27 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !482
=>  %Ri = alloca %struct.bignum_st*, align 8
FINAL:   %Ri = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x6766b10
DSOURCEGEP INSTRUCTION   %d51 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %29, i32 0, i32 0, !dbg !488
[Source:]   %d51 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %29, i32 0, i32 0, !dbg !488
StructType: allocation intermediate:   %29 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !486
=>  %Ri = alloca %struct.bignum_st*, align 8
FINAL:   %Ri = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x6766aa0
DSOURCEGEP INSTRUCTION   %arrayidx52 = getelementptr inbounds i64, i64* %30, i64 0, !dbg !489
[Source:]   %arrayidx52 = getelementptr inbounds i64, i64* %30, i64 0, !dbg !489
 allocation intermediate:   %30 = load i64*, i64** %d51, align 8, !dbg !488
=>  %d51 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %29, i32 0, i32 0, !dbg !488
 allocation intermediate:   %d51 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %29, i32 0, i32 0, !dbg !488
=>  %29 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !486
 allocation intermediate:   %29 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !486
=>  %Ri = alloca %struct.bignum_st*, align 8
FINAL:   %Ri = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x6766aa0
DSINKGEP INSTRUCTION   %arrayidx54 = getelementptr inbounds [2 x i64], [2 x i64]* %n0, i32 0, i64 0, !dbg !496
[Sink:]   %arrayidx54 = getelementptr inbounds [2 x i64], [2 x i64]* %n0, i32 0, i64 0, !dbg !496
ArrayType: allocation intermediate:   %n0 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %32, i32 0, i32 4, !dbg !495
=>  %32 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !492
 allocation intermediate:   %32 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !492
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 0
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %arrayidx54 = getelementptr inbounds [2 x i64], [2 x i64]* %n0, i32 0, i64 0, !dbg !496
[Sink:]   %arrayidx54 = getelementptr inbounds [2 x i64], [2 x i64]* %n0, i32 0, i64 0, !dbg !496
ArrayType: allocation intermediate:   %n0 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %32, i32 0, i32 4, !dbg !495
=>  %32 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !492
 allocation intermediate:   %32 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !492
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 0
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %arrayidx56 = getelementptr inbounds [2 x i64], [2 x i64]* %n055, i32 0, i64 1, !dbg !498
[Sink:]   %arrayidx56 = getelementptr inbounds [2 x i64], [2 x i64]* %n055, i32 0, i64 1, !dbg !498
ArrayType: allocation intermediate:   %n055 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %33, i32 0, i32 4, !dbg !499
=>  %33 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !498
 allocation intermediate:   %33 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !498
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 1
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %arrayidx56 = getelementptr inbounds [2 x i64], [2 x i64]* %n055, i32 0, i64 1, !dbg !498
[Sink:]   %arrayidx56 = getelementptr inbounds [2 x i64], [2 x i64]* %n055, i32 0, i64 1, !dbg !498
ArrayType: allocation intermediate:   %n055 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %33, i32 0, i32 4, !dbg !499
=>  %33 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !498
 allocation intermediate:   %33 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !498
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 1
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %ri60 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %36, i32 0, i32 0, !dbg !506
[Source:]   %ri60 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %36, i32 0, i32 0, !dbg !506
StructType: allocation intermediate:   %36 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !505
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x6c70660
Running on BN_to_montgomery in context [BN_mod_exp_mont_word ]
Creating ConsElem Map for :	Node0x608d1c0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x608d1c0:s0 -> Node0x60a9f40;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60a9f40 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60a9f40:s0 -> Node0x60aa6c0;
Creating ConsElem Map for :	Node0x608d340 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x608d340:s0 -> Node0x60a9f40;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60a9f40 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60a9f40:s0 -> Node0x60aa6c0;
Creating ConsElem Map for :	Node0x608d4c0 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x608d4c0:s0 -> Node0x60a9f40;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x60a9f40 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60a9f40:s0 -> Node0x60aa6c0;
Creating ConsElem Map for :	Node0x608d640 [shape=record,shape=Mrecord,label="{0: %struct.bignum_ctx*,  : SMR\n|{<s0>0}}"];
	Node0x608d640:s0 -> Node0x608d0c0;
EDGE: [0: tymap-size 1]:%struct.bignum_ctx = type opaque
	Node0x608d0c0 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Running on BN_mod_mul_montgomery in context [BN_mod_exp_mont_word ]
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %0), !dbg !376
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !375
REACHABLE SOURCE:   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !375
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !375
Using taint reachable signature for:   %call = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %1), !dbg !378
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !377
REACHABLE SOURCE:   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !377
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !377
Using taint reachable signature for:   %call4 = call i32 @BN_sqr(%struct.bignum_st* %5, %struct.bignum_st* %6, %struct.bignum_ctx* %7), !dbg !395
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !394
RSINKGEP INSTRUCTION   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !393
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %5 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !390
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !394
REACHABLE SOURCE:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !393
REACHABLE SOURCE:   %5 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !390
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !394
RSINKGEP INSTRUCTION   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !393
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %5 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !390
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call7 = call i32 @BN_mul(%struct.bignum_st* %8, %struct.bignum_st* %9, %struct.bignum_st* %10, %struct.bignum_ctx* %11), !dbg !405
RSINKGEP INSTRUCTION   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !404
RSINKGEP INSTRUCTION   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !403
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !402
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %8 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !399
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !404
REACHABLE SOURCE:   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !403
REACHABLE SOURCE:   %9 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !402
REACHABLE SOURCE:   %8 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !399
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !404
RSINKGEP INSTRUCTION   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !403
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !402
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %8 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !399
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %15), !dbg !418
RSINKGEP INSTRUCTION   %15 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !417
REACHABLE SOURCE:   %15 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !417
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %15 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !417
Creating ConsElem Map for :	Node0x608e650 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x608e650:s0 -> Node0x608e450;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x608e450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x608e450:s0 -> Node0x60c22b0;
Creating ConsElem Map for :	Node0x608e7d0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x608e7d0:s0 -> Node0x608e450;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x608e450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x608e450:s0 -> Node0x60c22b0;
Creating ConsElem Map for :	Node0x608e950 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x608e950:s0 -> Node0x608e450;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x608e450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x608e450:s0 -> Node0x60c22b0;
Creating ConsElem Map for :	Node0x608ead0 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x608ead0:s0 -> Node0x608e450;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x608e450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x608e450:s0 -> Node0x60c22b0;
Creating ConsElem Map for :	Node0x608ec50 [shape=record,shape=Mrecord,label="{0: %struct.bignum_ctx*,  : SMR\n|{<s0>0}}"];
	Node0x608ec50:s0 -> Node0x608e550;
EDGE: [0: tymap-size 1]:%struct.bignum_ctx = type opaque
	Node0x608e550 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x608ef50 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x608edd0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x608edd0:s0 -> Node0x608f090;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x608f090 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x608f090:s0 -> Node0x60c22b0;
Running on BN_is_bit_set in context [BN_mod_exp_mont_word ]
Creating ConsElem Map for :	Node0x6082dc0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x6082dc0:s0 -> Node0x6082b40;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x6082b40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x6082b40:s0 -> Node0x6083300;
Creating ConsElem Map for :	Node0x6082f40 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x6082cc0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x6083080 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60831c0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 1, !dbg !382
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 1, !dbg !382
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !380
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  20: i32,  : CRE[8,12]0x69bbc80
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 0, !dbg !389
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 0, !dbg !389
StructType: allocation intermediate:   %7 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !388
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  20: i32,  : CRE[0,8]0x69bbce0
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %8, i64 %idxprom, !dbg !388
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %8, i64 %idxprom, !dbg !388
Running on BN_from_montgomery in context [BN_mod_exp_mont_word ]
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %0), !dbg !374
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !373
REACHABLE SOURCE:   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !373
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !373
Using taint reachable signature for:   %call = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %1), !dbg !377
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !375
REACHABLE SOURCE:   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !375
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !375
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %7), !dbg !392
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !391
REACHABLE SOURCE:   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !391
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !391
Creating ConsElem Map for :	Node0x60958f0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60958f0:s0 -> Node0x6095270;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x6095270 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x6095270:s0 -> Node0x6096430;
Creating ConsElem Map for :	Node0x6095a70 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x6095a70:s0 -> Node0x6095470;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x6095470 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x6095470:s0 -> Node0x609a270;
Creating ConsElem Map for :	Node0x6095bf0 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x6095bf0:s0 -> Node0x60956b0;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x60956b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60956b0:s0 -> Node0x60824d0;
Creating ConsElem Map for :	Node0x6095d70 [shape=record,shape=Mrecord,label="{0: %struct.bignum_ctx*,  : SMR\n|{<s0>0}}"];
	Node0x6095d70:s0 -> Node0x60957f0;
EDGE: [0: tymap-size 1]:%struct.bignum_ctx = type opaque
	Node0x60957f0 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x6095ef0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x6096030 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x6096030:s0 -> Node0x60961b0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60961b0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x60961b0:s0 -> Node0x6096430;
Running on BN_MONT_CTX_free in context [BN_mod_exp_mont_word ]
Using taint reachable signature for:   call void @CRYPTO_free(i8* %7, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0), i32 244), !dbg !382
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
RSINKGEP INSTRUCTION   %7 = bitcast %struct.bn_mont_ctx_st* %6 to i8*, !dbg !382
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE: i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
REACHABLE SOURCE:   %7 = bitcast %struct.bn_mont_ctx_st* %6 to i8*, !dbg !382
	Node0x6099530 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str38 = private unnamed_addr constant [10 x i8] c\"bn_mont.c\\00\", align 1\n|{<s0>0}}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
RSINKGEP INSTRUCTION   %7 = bitcast %struct.bn_mont_ctx_st* %6 to i8*, !dbg !382
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x60993b0 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x60993b0:s0 -> Node0x6050dc0;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x6050dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6050dc0:s0 -> Node0x6097f70;
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %4, i32 0, i32 5, !dbg !379
[Source:]   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %4, i32 0, i32 5, !dbg !379
StructType: allocation intermediate:   %4 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !377
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 96
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 96
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,4]0x68847c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[56,80]0x6f08e40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[32,56]0x6f09260
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,32]0x6f09290
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[80,96]0x6f09320
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[96,100]0x6f095f0
Running on BN_get_flags in context [BN_mod_exp_mont ]
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !366
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !366
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !365
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x61483b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x6150190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x6218cd0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x6218ea0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x6218fc0
Running on BN_mod_exp_mont_consttime in context [BN_mod_exp_mont ]
Using taint reachable signature for:   call void @ERR_put_error(i32 3, i32 124, i32 102, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 622), !dbg !403
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
	Node0x60c85f0 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str = private unnamed_addr constant [9 x i8] c\"bn_exp.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %9), !dbg !431
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !430
REACHABLE SOURCE:   %9 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !430
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !430
Using taint reachable signature for:   %call56 = call i8* @CRYPTO_malloc(i64 %conv55, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 718), !dbg !500
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
	Node0x60c85f0 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str = private unnamed_addr constant [9 x i8] c\"bn_exp.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
Using taint reachable signature for:   %call113 = call i32 @BN_div(%struct.bignum_st* null, %struct.bignum_st* %am, %struct.bignum_st* %68, %struct.bignum_st* %69, %struct.bignum_ctx* %70), !dbg !603
RSINKGEP INSTRUCTION %struct.bignum_st* null
RSINKGEP INSTRUCTION   %68 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !603
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %70 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !603
RSINKGEP INSTRUCTION   %69 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !603
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %am = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE: %struct.bignum_st* null
REACHABLE SOURCE:   %68 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !603
REACHABLE SOURCE:   %70 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !603
REACHABLE SOURCE:   %69 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !603
REACHABLE SOURCE:   %am = alloca %struct.bignum_st, align 8
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION %struct.bignum_st* null
RSINKGEP INSTRUCTION   %68 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !603
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %70 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !603
RSINKGEP INSTRUCTION   %69 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !603
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %am = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   call void @OPENSSL_cleanse(i8* %132, i64 %conv213), !dbg !788
RSINKGEP INSTRUCTION   %132 = load i8*, i8** %powerbuf, align 8, !dbg !785
REACHABLE SOURCE:   %132 = load i8*, i8** %powerbuf, align 8, !dbg !785
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %132 = load i8*, i8** %powerbuf, align 8, !dbg !785
Using taint reachable signature for:   call void @CRYPTO_free(i8* %134, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 1091), !dbg !789
RSINKGEP INSTRUCTION   %134 = load i8*, i8** %powerbufFree, align 8, !dbg !789
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
REACHABLE SOURCE:   %134 = load i8*, i8** %powerbufFree, align 8, !dbg !789
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c85f0 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str = private unnamed_addr constant [9 x i8] c\"bn_exp.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %134 = load i8*, i8** %powerbufFree, align 8, !dbg !789
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %135), !dbg !792
RSINKGEP INSTRUCTION   %135 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !791
REACHABLE SOURCE:   %135 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !791
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %135 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !791
Creating ConsElem Map for :	Node0x60a8260 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60a8260:s0 -> Node0x60a7c60;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60a7c60 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60a7c60:s0 -> Node0x60aa440;
Creating ConsElem Map for :	Node0x60a8320 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60a8320:s0 -> Node0x60a7de0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60a7de0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60a7de0:s0 -> Node0x60aa580;
Creating ConsElem Map for :	Node0x60a83e0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60a83e0:s0 -> Node0x60a7ea0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60a7ea0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60a7ea0:s0 -> Node0x60aa300;
Creating ConsElem Map for :	Node0x60a84a0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60a84a0:s0 -> Node0x60a7f60;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60a7f60 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60a7f60:s0 -> Node0x60a9e00;
Creating ConsElem Map for :	Node0x60a8560 [shape=record,shape=Mrecord,label="{0: %struct.bignum_ctx*,  : SMR\n|{<s0>0}}"];
	Node0x60a8560:s0 -> Node0x60a8020;
EDGE: [0: tymap-size 1]:%struct.bignum_ctx = type opaque
	Node0x60a8020 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x60a86e0 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x60a86e0:s0 -> Node0x60a2fc0;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x60a2fc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60a2fc0:s0 -> Node0x60b7730;
Creating ConsElem Map for :	Node0x60a8ae0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60a8fe0 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x60a8fe0:s0 -> Node0x60a2fc0;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x60a2fc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60a2fc0:s0 -> Node0x60b7730;
Creating ConsElem Map for :	Node0x60a92a0 [shape=record,shape=Mrecord,label="{0: i8*,  : SMR\n|{<s0>0}}"];
	Node0x60a92a0:s0 -> Node0x60a9d00;
EDGE: [0: tymap-size 1]:i8
	Node0x60a9d00 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n}"];
Creating ConsElem Map for :	Node0x60a9420 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60a9560 [shape=record,shape=Mrecord,label="{0: i8*,  : SMR\n|{<s0>0}}"];
	Node0x60a9560:s0 -> Node0x60a9d00;
EDGE: [0: tymap-size 1]:i8
	Node0x60a9d00 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n}"];
Creating ConsElem Map for :	Node0x60a81a0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %top2 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 1, !dbg !407
[Source:]   %top2 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 1, !dbg !407
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !406
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[8,12]0x7009150
Creating ConsElem Map for :	Node0x60a8ea0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60a89a0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60a8c20 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60a9160 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSINKGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !524
[Sink:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !524
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !524
[Sink:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !524
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %d72 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !526
[Source:]   %d72 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !526
StructType:FINAL:   %tmp = alloca %struct.bignum_st, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
DSINKGEP INSTRUCTION   %d74 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 0, !dbg !529
[Sink:]   %d74 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 0, !dbg !529
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %d74 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 0, !dbg !529
[Sink:]   %d74 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 0, !dbg !529
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top75 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 1, !dbg !531
[Sink:]   %top75 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 1, !dbg !531
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top75 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 1, !dbg !531
[Sink:]   %top75 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 1, !dbg !531
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top76 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 1, !dbg !533
[Sink:]   %top76 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 1, !dbg !533
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top76 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 1, !dbg !533
[Sink:]   %top76 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 1, !dbg !533
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 2, !dbg !536
[Sink:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 2, !dbg !536
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 12
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 2, !dbg !536
[Sink:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 2, !dbg !536
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 12
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %dmax77 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 2, !dbg !538
[Sink:]   %dmax77 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 2, !dbg !538
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 12
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %dmax77 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 2, !dbg !538
[Sink:]   %dmax77 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 2, !dbg !538
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 12
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 3, !dbg !540
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 3, !dbg !540
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 3, !dbg !540
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 3, !dbg !540
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg78 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 3, !dbg !542
[Sink:]   %neg78 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 3, !dbg !542
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg78 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 3, !dbg !542
[Sink:]   %neg78 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 3, !dbg !542
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 4, !dbg !544
[Sink:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 4, !dbg !544
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 20
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 4, !dbg !544
[Sink:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 4, !dbg !544
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 20
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %flags79 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 4, !dbg !546
[Sink:]   %flags79 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 4, !dbg !546
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 20
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %flags79 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 4, !dbg !546
[Sink:]   %flags79 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 4, !dbg !546
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 20
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %d81 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %45, i32 0, i32 0, !dbg !552
[Source:]   %d81 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %45, i32 0, i32 0, !dbg !552
StructType: allocation intermediate:   %45 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !551
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x70090a0
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %46, i64 %idxprom, !dbg !551
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %46, i64 %idxprom, !dbg !551
DSOURCEGEP INSTRUCTION   %d85 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %48, i32 0, i32 0, !dbg !557
[Source:]   %d85 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %48, i32 0, i32 0, !dbg !557
StructType: allocation intermediate:   %48 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !555
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x70090a0
DSOURCEGEP INSTRUCTION   %arrayidx86 = getelementptr inbounds i64, i64* %49, i64 0, !dbg !555
[Source:]   %arrayidx86 = getelementptr inbounds i64, i64* %49, i64 0, !dbg !555
 allocation intermediate:   %49 = load i64*, i64** %d85, align 8, !dbg !557
=>  %d85 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %48, i32 0, i32 0, !dbg !557
 allocation intermediate:   %d85 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %48, i32 0, i32 0, !dbg !557
=>  %48 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !555
 allocation intermediate:   %48 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !555
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x70090a0
DSOURCEGEP INSTRUCTION   %d88 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !559
[Source:]   %d88 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !559
StructType:FINAL:   %tmp = alloca %struct.bignum_st, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
DSINKGEP INSTRUCTION   %arrayidx89 = getelementptr inbounds i64, i64* %51, i64 0, !dbg !560
[Sink:]   %arrayidx89 = getelementptr inbounds i64, i64* %51, i64 0, !dbg !560
 allocation intermediate:   %51 = load i64*, i64** %d88, align 8, !dbg !559
=>  %d88 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !559
 allocation intermediate:   %d88 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !559
=>  %tmp = alloca %struct.bignum_st, align 8
FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %arrayidx89 = getelementptr inbounds i64, i64* %51, i64 0, !dbg !560
[Sink:]   %arrayidx89 = getelementptr inbounds i64, i64* %51, i64 0, !dbg !560
 allocation intermediate:   %51 = load i64*, i64** %d88, align 8, !dbg !559
=>  %d88 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !559
 allocation intermediate:   %d88 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !559
=>  %tmp = alloca %struct.bignum_st, align 8
FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Creating ConsElem Map for :	Node0x60a8860 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %d93 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %55, i32 0, i32 0, !dbg !574
[Source:]   %d93 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %55, i32 0, i32 0, !dbg !574
StructType: allocation intermediate:   %55 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !573
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x70090a0
DSOURCEGEP INSTRUCTION   %arrayidx94 = getelementptr inbounds i64, i64* %56, i64 %idxprom92, !dbg !573
[Source:]   %arrayidx94 = getelementptr inbounds i64, i64* %56, i64 %idxprom92, !dbg !573
DSOURCEGEP INSTRUCTION   %d97 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !578
[Source:]   %d97 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !578
StructType:FINAL:   %tmp = alloca %struct.bignum_st, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
DSINKGEP INSTRUCTION   %arrayidx98 = getelementptr inbounds i64, i64* %59, i64 %idxprom96, !dbg !577
[Sink:]   %arrayidx98 = getelementptr inbounds i64, i64* %59, i64 %idxprom96, !dbg !577
DSINKGEP INSTRUCTION   %arrayidx98 = getelementptr inbounds i64, i64* %59, i64 %idxprom96, !dbg !577
[Sink:]   %arrayidx98 = getelementptr inbounds i64, i64* %59, i64 %idxprom96, !dbg !577
DSINKGEP INSTRUCTION   %top99 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 1, !dbg !583
[Sink:]   %top99 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 1, !dbg !583
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top99 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 1, !dbg !583
[Sink:]   %top99 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 1, !dbg !583
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %neg107 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %64, i32 0, i32 3, !dbg !595
[Source:]   %neg107 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %64, i32 0, i32 3, !dbg !595
StructType: allocation intermediate:   %64 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !593
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[16,20]0x7008630
Creating ConsElem Map for :	Node0x60a8d60 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Running on BN_is_odd in context [BN_mod_exp_mont ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !364
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !364
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !363
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[8,12]0x60da890
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !369
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !369
StructType: allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !367
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x621f490
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %3, i64 0, !dbg !370
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %3, i64 0, !dbg !370
 allocation intermediate:   %3 = load i64*, i64** %d, align 8, !dbg !369
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !369
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !369
=>  %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !367
 allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !367
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x621f490
Running on BN_num_bits in context [BN_mod_exp_mont ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !366
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !366
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !365
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x6610ef0
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !377
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !377
StructType: allocation intermediate:   %5 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !376
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x6610e80
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !376
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !376
Running on BN_is_one in context [BN_mod_exp_mont ]
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !368
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !368
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !366
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[16,20]0x61f5e50
Running on BN_set_word in context [BN_mod_exp_mont ]
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !372
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !372
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !371
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !372
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !372
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !371
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x6676440
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x6676560
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x6676680
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69bd5a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x6a2efa0
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !375
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !375
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !376
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !375
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !375
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !376
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !380
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !380
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !379
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !380
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !380
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !379
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on BN_MONT_CTX_new in context [BN_mod_exp_mont ]
Using taint reachable signature for:   %call = call i8* @CRYPTO_malloc(i64 104, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0), i32 217), !dbg !363
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
	Node0x6099530 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str38 = private unnamed_addr constant [10 x i8] c\"bn_mont.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 5, !dbg !372
[Sink:]   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 5, !dbg !372
StructType:::IS STRUCT TY:: allocation intermediate:   %2 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ret, align 8, !dbg !371
=>  %ret = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %ret = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 96
	Node0x6097590 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6097590:s0 -> Node0x60966b0;
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Tainting at offset: 96
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 5, !dbg !372
[Sink:]   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 5, !dbg !372
StructType:::IS STRUCT TY:: allocation intermediate:   %2 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ret, align 8, !dbg !371
=>  %ret = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %ret = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 96
	Node0x6097590 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6097590:s0 -> Node0x60966b0;
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Tainting at offset: 96
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on BN_MONT_CTX_set in context [BN_mod_exp_mont ]
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %1), !dbg !379
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !378
REACHABLE SOURCE:   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !378
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !378
Using taint reachable signature for:   %call1 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %2), !dbg !382
RSINKGEP INSTRUCTION   %2 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !380
REACHABLE SOURCE:   %2 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !380
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %2 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !380
Using taint reachable signature for:   %call25 = call %struct.bignum_st* @BN_mod_inverse(%struct.bignum_st* %16, %struct.bignum_st* %17, %struct.bignum_st* %tmod, %struct.bignum_ctx* %18), !dbg !448
RSINKGEP INSTRUCTION   %16 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !444
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !447
RSINKGEP INSTRUCTION   %17 = load %struct.bignum_st*, %struct.bignum_st** %R, align 8, !dbg !446
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %tmod = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %16 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !444
REACHABLE SOURCE:   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !447
REACHABLE SOURCE:   %17 = load %struct.bignum_st*, %struct.bignum_st** %R, align 8, !dbg !446
REACHABLE SOURCE:   %tmod = alloca %struct.bignum_st, align 8
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %16 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !444
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !447
RSINKGEP INSTRUCTION   %17 = load %struct.bignum_st*, %struct.bignum_st** %R, align 8, !dbg !446
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %tmod = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call29 = call i32 @BN_lshift(%struct.bignum_st* %19, %struct.bignum_st* %20, i32 64), !dbg !455
RSINKGEP INSTRUCTION   %19 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !452
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %20 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !454
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %19 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !452
REACHABLE SOURCE:   %20 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !454
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %19 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !452
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %20 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !454
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call36 = call i32 @BN_sub_word(%struct.bignum_st* %22, i64 1), !dbg !465
RSINKGEP INSTRUCTION   %22 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !462
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %22 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !462
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %22 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !462
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call45 = call i32 @BN_div(%struct.bignum_st* %24, %struct.bignum_st* null, %struct.bignum_st* %25, %struct.bignum_st* %tmod, %struct.bignum_ctx* %26), !dbg !479
RSINKGEP INSTRUCTION   %24 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !475
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION %struct.bignum_st* null
RSINKGEP INSTRUCTION   %26 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !478
RSINKGEP INSTRUCTION   %25 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !477
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %tmod = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %24 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !475
REACHABLE SOURCE: %struct.bignum_st* null
REACHABLE SOURCE:   %26 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !478
REACHABLE SOURCE:   %25 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !477
REACHABLE SOURCE:   %tmod = alloca %struct.bignum_st, align 8
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %24 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !475
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION %struct.bignum_st* null
RSINKGEP INSTRUCTION   %26 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !478
RSINKGEP INSTRUCTION   %25 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !477
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %tmod = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call69 = call i32 @BN_div(%struct.bignum_st* null, %struct.bignum_st* %RR66, %struct.bignum_st* %RR67, %struct.bignum_st* %N68, %struct.bignum_ctx* %41), !dbg !511
RSINKGEP INSTRUCTION %struct.bignum_st* null
RSINKGEP INSTRUCTION   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !511
[Sink:]   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !511
StructType:::IS STRUCT TY:: allocation intermediate:   %38 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !511
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !511
[Sink:]   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !511
StructType:::IS STRUCT TY:: allocation intermediate:   %39 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !511
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !511
[Sink:]   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !511
StructType:::IS STRUCT TY:: allocation intermediate:   %40 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !511
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 2
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %41 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !511
REACHABLE SOURCE: %struct.bignum_st* null
REACHABLE SOURCE:   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !511
REACHABLE SOURCE:   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !511
REACHABLE SOURCE:   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !511
REACHABLE SOURCE:   %41 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !511
RSOURCEGEP INSTRUCTION   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !511
[Source:]   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !511
StructType: allocation intermediate:   %38 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !511
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x6c70660
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x6c70660
RSOURCEGEP INSTRUCTION   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !511
[Source:]   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !511
StructType: allocation intermediate:   %39 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !511
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x6c70660
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x6c70660
RSOURCEGEP INSTRUCTION   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !511
[Source:]   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !511
StructType: allocation intermediate:   %40 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !511
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x6c70660
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x6c70660
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION %struct.bignum_st* null
RSINKGEP INSTRUCTION   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !511
[Sink:]   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !511
StructType:::IS STRUCT TY:: allocation intermediate:   %38 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !511
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !511
[Sink:]   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !511
StructType:::IS STRUCT TY:: allocation intermediate:   %39 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !511
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !511
[Sink:]   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !511
StructType:::IS STRUCT TY:: allocation intermediate:   %40 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !511
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 2
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %41 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !511
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %42), !dbg !518
RSINKGEP INSTRUCTION   %42 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !517
REACHABLE SOURCE:   %42 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !517
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %42 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !517
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %N8, i32 0, i32 3, !dbg !399
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %N8, i32 0, i32 3, !dbg !399
StructType:::IS STRUCT TY:: allocation intermediate:   %N8 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %6, i32 0, i32 2, !dbg !398
=>  %6 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !397
 allocation intermediate:   %6 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !397
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 16
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %N8, i32 0, i32 3, !dbg !399
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %N8, i32 0, i32 3, !dbg !399
StructType:::IS STRUCT TY:: allocation intermediate:   %N8 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %6, i32 0, i32 2, !dbg !398
=>  %6 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !397
 allocation intermediate:   %6 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !397
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 16
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 0, !dbg !408
[Sink:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 0, !dbg !408
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 0, !dbg !408
[Sink:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 0, !dbg !408
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 2, !dbg !410
[Sink:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 2, !dbg !410
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 12
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 2, !dbg !410
[Sink:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 2, !dbg !410
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 12
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg9 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 3, !dbg !412
[Sink:]   %neg9 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 3, !dbg !412
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg9 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 3, !dbg !412
[Sink:]   %neg9 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 3, !dbg !412
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %ri = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %9, i32 0, i32 0, !dbg !426
[Sink:]   %ri = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %9, i32 0, i32 0, !dbg !426
StructType:::IS STRUCT TY:: allocation intermediate:   %9 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !425
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 0
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %ri = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %9, i32 0, i32 0, !dbg !426
[Sink:]   %ri = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %9, i32 0, i32 0, !dbg !426
StructType:::IS STRUCT TY:: allocation intermediate:   %9 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !425
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 0
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %d20 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !435
[Source:]   %d20 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !435
StructType: allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %mod.addr, align 8, !dbg !434
=>  %mod.addr = alloca %struct.bignum_st*, align 8
FINAL:   %mod.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x6c53880
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !434
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !434
 allocation intermediate:   %13 = load i64*, i64** %d20, align 8, !dbg !435
=>  %d20 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !435
 allocation intermediate:   %d20 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !435
=>  %12 = load %struct.bignum_st*, %struct.bignum_st** %mod.addr, align 8, !dbg !434
 allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %mod.addr, align 8, !dbg !434
=>  %mod.addr = alloca %struct.bignum_st*, align 8
FINAL:   %mod.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x6c53880
DSINKGEP INSTRUCTION   %arrayidx21 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !436
[Sink:]   %arrayidx21 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !436
ArrayType:FINAL:   %buf = alloca [2 x i64], align 16
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx21 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !436
[Sink:]   %arrayidx21 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !436
ArrayType:FINAL:   %buf = alloca [2 x i64], align 16
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx22 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 1, !dbg !438
[Sink:]   %arrayidx22 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 1, !dbg !438
ArrayType:FINAL:   %buf = alloca [2 x i64], align 16
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx22 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 1, !dbg !438
[Sink:]   %arrayidx22 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 1, !dbg !438
ArrayType:FINAL:   %buf = alloca [2 x i64], align 16
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !440
[Source:]   %arrayidx23 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !440
ArrayType:FINAL:   %buf = alloca [2 x i64], align 16
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 1, !dbg !442
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 1, !dbg !442
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 1, !dbg !442
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 1, !dbg !442
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %top49 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %27, i32 0, i32 1, !dbg !483
[Source:]   %top49 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %27, i32 0, i32 1, !dbg !483
StructType: allocation intermediate:   %27 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !482
=>  %Ri = alloca %struct.bignum_st*, align 8
FINAL:   %Ri = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x6766b10
DSOURCEGEP INSTRUCTION   %d51 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %29, i32 0, i32 0, !dbg !488
[Source:]   %d51 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %29, i32 0, i32 0, !dbg !488
StructType: allocation intermediate:   %29 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !486
=>  %Ri = alloca %struct.bignum_st*, align 8
FINAL:   %Ri = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x6766aa0
DSOURCEGEP INSTRUCTION   %arrayidx52 = getelementptr inbounds i64, i64* %30, i64 0, !dbg !489
[Source:]   %arrayidx52 = getelementptr inbounds i64, i64* %30, i64 0, !dbg !489
 allocation intermediate:   %30 = load i64*, i64** %d51, align 8, !dbg !488
=>  %d51 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %29, i32 0, i32 0, !dbg !488
 allocation intermediate:   %d51 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %29, i32 0, i32 0, !dbg !488
=>  %29 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !486
 allocation intermediate:   %29 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !486
=>  %Ri = alloca %struct.bignum_st*, align 8
FINAL:   %Ri = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x6766aa0
DSINKGEP INSTRUCTION   %arrayidx54 = getelementptr inbounds [2 x i64], [2 x i64]* %n0, i32 0, i64 0, !dbg !496
[Sink:]   %arrayidx54 = getelementptr inbounds [2 x i64], [2 x i64]* %n0, i32 0, i64 0, !dbg !496
ArrayType: allocation intermediate:   %n0 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %32, i32 0, i32 4, !dbg !495
=>  %32 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !492
 allocation intermediate:   %32 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !492
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 0
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %arrayidx54 = getelementptr inbounds [2 x i64], [2 x i64]* %n0, i32 0, i64 0, !dbg !496
[Sink:]   %arrayidx54 = getelementptr inbounds [2 x i64], [2 x i64]* %n0, i32 0, i64 0, !dbg !496
ArrayType: allocation intermediate:   %n0 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %32, i32 0, i32 4, !dbg !495
=>  %32 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !492
 allocation intermediate:   %32 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !492
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 0
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %arrayidx56 = getelementptr inbounds [2 x i64], [2 x i64]* %n055, i32 0, i64 1, !dbg !498
[Sink:]   %arrayidx56 = getelementptr inbounds [2 x i64], [2 x i64]* %n055, i32 0, i64 1, !dbg !498
ArrayType: allocation intermediate:   %n055 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %33, i32 0, i32 4, !dbg !499
=>  %33 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !498
 allocation intermediate:   %33 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !498
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 1
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %arrayidx56 = getelementptr inbounds [2 x i64], [2 x i64]* %n055, i32 0, i64 1, !dbg !498
[Sink:]   %arrayidx56 = getelementptr inbounds [2 x i64], [2 x i64]* %n055, i32 0, i64 1, !dbg !498
ArrayType: allocation intermediate:   %n055 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %33, i32 0, i32 4, !dbg !499
=>  %33 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !498
 allocation intermediate:   %33 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !498
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 1
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %ri60 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %36, i32 0, i32 0, !dbg !506
[Source:]   %ri60 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %36, i32 0, i32 0, !dbg !506
StructType: allocation intermediate:   %36 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !505
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x6c70660
Running on BN_ucmp in context [BN_mod_exp_mont ]
Creating ConsElem Map for :	Node0x60b3840 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60b3840:s0 -> Node0x60b3340;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60b3340 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60b3340:s0 -> Node0x60b4200;
Creating ConsElem Map for :	Node0x60b39c0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60b39c0:s0 -> Node0x60bb760;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60bb760 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60bb760:s0 -> Node0x60817a0;
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !376
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !376
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x6a2def0
DSOURCEGEP INSTRUCTION   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 1, !dbg !378
[Source:]   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 1, !dbg !378
StructType: allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !377
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x6cc3460
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x6cc3540
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x6cc3660
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x6cc3780
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x741ae80
Creating ConsElem Map for :	Node0x60b3b40 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60b3700 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !388
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !388
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !387
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x6a2dec0
Creating ConsElem Map for :	Node0x60b3f00 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x60b3f00:s0 -> Node0x60b4200;
EDGE: [0: tymap-size 1]:i64
	Node0x60b4200 [shape=record,shape=Mrecord,label="{0: i64,   array: MRE2\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
DSOURCEGEP INSTRUCTION   %d2 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !391
[Source:]   %d2 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !391
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !390
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x6cc3460
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x6cc3540
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x6cc3660
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x6cc3780
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x741ae80
Creating ConsElem Map for :	Node0x60b4080 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x60b4080:s0 -> Node0x60817a0;
EDGE: [0: tymap-size 1]:i64
	Node0x60817a0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
DSOURCEGEP INSTRUCTION   %top3 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !395
[Source:]   %top3 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !395
StructType: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !393
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x6a2def0
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !407
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !407
Creating ConsElem Map for :	Node0x60b3c80 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx7 = getelementptr inbounds i64, i64* %17, i64 %idxprom6, !dbg !410
[Source:]   %arrayidx7 = getelementptr inbounds i64, i64* %17, i64 %idxprom6, !dbg !410
Creating ConsElem Map for :	Node0x60b3dc0 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Running on BN_is_zero in context [BN_mod_exp_mont ]
Creating ConsElem Map for :	Node0x60783a0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60783a0:s0 -> Node0x6078220;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x6078220 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x6078220:s0 -> Node0x6078820;
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !364
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !364
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !363
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x6eba550
Running on BN_to_montgomery in context [BN_mod_exp_mont ]
Running on BN_mod_mul_montgomery in context [BN_mod_exp_mont ]
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %0), !dbg !376
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !375
REACHABLE SOURCE:   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !375
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !375
Using taint reachable signature for:   %call = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %1), !dbg !378
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !377
REACHABLE SOURCE:   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !377
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !377
Using taint reachable signature for:   %call4 = call i32 @BN_sqr(%struct.bignum_st* %5, %struct.bignum_st* %6, %struct.bignum_ctx* %7), !dbg !395
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !394
RSINKGEP INSTRUCTION   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !393
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %5 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !390
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !394
REACHABLE SOURCE:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !393
REACHABLE SOURCE:   %5 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !390
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !394
RSINKGEP INSTRUCTION   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !393
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %5 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !390
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call7 = call i32 @BN_mul(%struct.bignum_st* %8, %struct.bignum_st* %9, %struct.bignum_st* %10, %struct.bignum_ctx* %11), !dbg !405
RSINKGEP INSTRUCTION   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !404
RSINKGEP INSTRUCTION   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !403
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !402
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %8 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !399
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !404
REACHABLE SOURCE:   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !403
REACHABLE SOURCE:   %9 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !402
REACHABLE SOURCE:   %8 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !399
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !404
RSINKGEP INSTRUCTION   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !403
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !402
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %8 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !399
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %15), !dbg !418
RSINKGEP INSTRUCTION   %15 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !417
REACHABLE SOURCE:   %15 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !417
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %15 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !417
Running on bn_wexpand in context [BN_mod_exp_mont ]
Creating ConsElem Map for :	Node0x607c190 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x607c190:s0 -> Node0x607c450;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x607c450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x607c450:s0 -> Node0x6079210;
Creating ConsElem Map for :	Node0x607c310 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !367
[Source:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !367
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !366
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x6fbfe60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7488a70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x74936e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x74938f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7493a10
Running on bn_correct_top in context [BN_mod_exp_mont ]
Creating ConsElem Map for :	Node0x6094b80 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x6094b80:s0 -> Node0x608f310;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x608f310 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x608f310:s0 -> Node0x6090370;
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !368
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !368
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !367
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x73284b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x73284e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x73286f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7328810
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x74baae0
Creating ConsElem Map for :	Node0x6094d00 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !377
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !377
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !376
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x73284b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x73284e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x73286f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7328810
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x74baae0
Creating ConsElem Map for :	Node0x6094c40 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x6094c40:s0 -> Node0x6090370;
EDGE: [0: tymap-size 1]:i64
	Node0x6090370 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
DSINKGEP INSTRUCTION   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !399
[Sink:]   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !399
StructType:::IS STRUCT TY:: allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !398
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x608f310 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x608f310:s0 -> Node0x6090370;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !399
[Sink:]   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !399
StructType:::IS STRUCT TY:: allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !398
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x608f310 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x608f310:s0 -> Node0x6090370;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %top6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %13, i32 0, i32 1, !dbg !404
[Source:]   %top6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %13, i32 0, i32 1, !dbg !404
StructType: allocation intermediate:   %13 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !402
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x73284b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x73284e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x73286f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7328810
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x74baae0
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !408
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !408
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !407
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x608f310 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x608f310:s0 -> Node0x6090370;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !408
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !408
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !407
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x608f310 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x608f310:s0 -> Node0x6090370;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on BN_value_one in context [BN_mod_exp_mont ]
Running on BN_is_bit_set in context [BN_mod_exp_mont ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 1, !dbg !382
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 1, !dbg !382
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !380
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  20: i32,  : CRE[8,12]0x69bbc80
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 0, !dbg !389
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 0, !dbg !389
StructType: allocation intermediate:   %7 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !388
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  20: i32,  : CRE[0,8]0x69bbce0
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %8, i64 %idxprom, !dbg !388
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %8, i64 %idxprom, !dbg !388
Running on BN_from_montgomery in context [BN_mod_exp_mont ]
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %0), !dbg !374
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !373
REACHABLE SOURCE:   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !373
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !373
Using taint reachable signature for:   %call = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %1), !dbg !377
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !375
REACHABLE SOURCE:   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !375
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !375
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %7), !dbg !392
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !391
REACHABLE SOURCE:   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !391
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !391
Running on BN_MONT_CTX_free in context [BN_mod_exp_mont ]
Using taint reachable signature for:   call void @CRYPTO_free(i8* %7, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0), i32 244), !dbg !382
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
RSINKGEP INSTRUCTION   %7 = bitcast %struct.bn_mont_ctx_st* %6 to i8*, !dbg !382
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE: i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
REACHABLE SOURCE:   %7 = bitcast %struct.bn_mont_ctx_st* %6 to i8*, !dbg !382
	Node0x6099530 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str38 = private unnamed_addr constant [10 x i8] c\"bn_mont.c\\00\", align 1\n|{<s0>0}}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
RSINKGEP INSTRUCTION   %7 = bitcast %struct.bn_mont_ctx_st* %6 to i8*, !dbg !382
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %4, i32 0, i32 5, !dbg !379
[Source:]   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %4, i32 0, i32 5, !dbg !379
StructType: allocation intermediate:   %4 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !377
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 96
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 96
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,4]0x68847c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[56,80]0x6f08e40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[32,56]0x6f09260
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,32]0x6f09290
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[80,96]0x6f09320
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[96,100]0x6f095f0
Running on BN_get_flags in context [BN_mod_exp_recp ]
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !366
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !366
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !365
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x61483b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x6150190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x6218cd0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x6218ea0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x6218fc0
Running on BN_num_bits in context [BN_mod_exp_recp ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !366
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !366
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !365
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x6610ef0
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !377
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !377
StructType: allocation intermediate:   %5 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !376
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x6610e80
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !376
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !376
Running on BN_is_one in context [BN_mod_exp_recp ]
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !368
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !368
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !366
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[16,20]0x61f5e50
Running on BN_set_word in context [BN_mod_exp_recp ]
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !372
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !372
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !371
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !372
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !372
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !371
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x6676440
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x6676560
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x6676680
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69bd5a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x6a2efa0
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !375
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !375
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !376
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !375
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !375
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !376
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !380
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !380
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !379
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !380
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !380
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !379
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on BN_RECP_CTX_init in context [BN_mod_exp_recp ]
Creating ConsElem Map for :	Node0x60ba650 [shape=record,shape=Mrecord,label="{0: %struct.bn_recp_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x60ba650:s0 -> Node0x60ba7d0;
EDGE: [0: tymap-size 1]:%struct.bn_recp_ctx_st = type { %struct.bignum_st, %struct.bignum_st, i32, i32, i32 }
	Node0x60ba7d0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60ba7d0:s0 -> Node0x60ec920;
Running on BN_copy in context [BN_mod_exp_recp ]
Creating ConsElem Map for :	Node0x60795d0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60795d0:s0 -> Node0x6094a00;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x6094a00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094a00:s0 -> Node0x608f450;
Creating ConsElem Map for :	Node0x6079750 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x6079750:s0 -> Node0x6094a00;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x6094a00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094a00:s0 -> Node0x608f450;
Creating ConsElem Map for :	Node0x6079450 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x6079450:s0 -> Node0x6094a00;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x6094a00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094a00:s0 -> Node0x608f450;
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !381
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !381
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !380
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !387
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !387
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !386
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
Creating ConsElem Map for :	Node0x6079a10 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x6079a10:s0 -> Node0x608f450;
EDGE: [0: tymap-size 1]:i64
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
DSOURCEGEP INSTRUCTION   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !390
[Source:]   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !390
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !389
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
Creating ConsElem Map for :	Node0x6079b90 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x6079b90:s0 -> Node0x608f450;
EDGE: [0: tymap-size 1]:i64
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
DSOURCEGEP INSTRUCTION   %top5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !394
[Source:]   %top5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !394
StructType: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !392
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
Creating ConsElem Map for :	Node0x60798d0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !413
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !413
 allocation intermediate:   %13 = load i64*, i64** %B, align 8, !dbg !413
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
Creating ConsElem Map for :	Node0x6079d10 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx7 = getelementptr inbounds i64, i64* %15, i64 1, !dbg !415
[Source:]   %arrayidx7 = getelementptr inbounds i64, i64* %15, i64 1, !dbg !415
 allocation intermediate:   %15 = load i64*, i64** %B, align 8, !dbg !415
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
Creating ConsElem Map for :	Node0x6079e50 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx8 = getelementptr inbounds i64, i64* %17, i64 2, !dbg !417
[Source:]   %arrayidx8 = getelementptr inbounds i64, i64* %17, i64 2, !dbg !417
 allocation intermediate:   %17 = load i64*, i64** %B, align 8, !dbg !417
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
Creating ConsElem Map for :	Node0x6079f90 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx9 = getelementptr inbounds i64, i64* %19, i64 3, !dbg !419
[Source:]   %arrayidx9 = getelementptr inbounds i64, i64* %19, i64 3, !dbg !419
 allocation intermediate:   %19 = load i64*, i64** %B, align 8, !dbg !419
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 3
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
Creating ConsElem Map for :	Node0x607a0d0 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSINKGEP INSTRUCTION   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !422
[Sink:]   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !422
 allocation intermediate:   %22 = load i64*, i64** %A, align 8, !dbg !422
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
Created 1 constraint variable(s) for node of size 1
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !422
[Sink:]   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !422
 allocation intermediate:   %22 = load i64*, i64** %A, align 8, !dbg !422
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !425
[Sink:]   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !425
 allocation intermediate:   %24 = load i64*, i64** %A, align 8, !dbg !425
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !425
[Sink:]   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !425
 allocation intermediate:   %24 = load i64*, i64** %A, align 8, !dbg !425
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !428
[Sink:]   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !428
 allocation intermediate:   %26 = load i64*, i64** %A, align 8, !dbg !428
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !428
[Sink:]   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !428
 allocation intermediate:   %26 = load i64*, i64** %A, align 8, !dbg !428
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !431
[Sink:]   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !431
 allocation intermediate:   %28 = load i64*, i64** %A, align 8, !dbg !431
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 3
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 3
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !431
[Sink:]   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !431
 allocation intermediate:   %28 = load i64*, i64** %A, align 8, !dbg !431
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 3
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 3
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top15 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %32, i32 0, i32 1, !dbg !439
[Source:]   %top15 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %32, i32 0, i32 1, !dbg !439
StructType: allocation intermediate:   %32 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !438
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSOURCEGEP INSTRUCTION   %arrayidx16 = getelementptr inbounds i64, i64* %34, i64 2, !dbg !442
[Source:]   %arrayidx16 = getelementptr inbounds i64, i64* %34, i64 2, !dbg !442
 allocation intermediate:   %34 = load i64*, i64** %B, align 8, !dbg !442
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSINKGEP INSTRUCTION   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !444
[Sink:]   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !444
 allocation intermediate:   %36 = load i64*, i64** %A, align 8, !dbg !444
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !444
[Sink:]   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !444
 allocation intermediate:   %36 = load i64*, i64** %A, align 8, !dbg !444
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx19 = getelementptr inbounds i64, i64* %37, i64 1, !dbg !446
[Source:]   %arrayidx19 = getelementptr inbounds i64, i64* %37, i64 1, !dbg !446
 allocation intermediate:   %37 = load i64*, i64** %B, align 8, !dbg !446
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSINKGEP INSTRUCTION   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !447
[Sink:]   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !447
 allocation intermediate:   %39 = load i64*, i64** %A, align 8, !dbg !447
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !447
[Sink:]   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !447
 allocation intermediate:   %39 = load i64*, i64** %A, align 8, !dbg !447
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx22 = getelementptr inbounds i64, i64* %40, i64 0, !dbg !449
[Source:]   %arrayidx22 = getelementptr inbounds i64, i64* %40, i64 0, !dbg !449
 allocation intermediate:   %40 = load i64*, i64** %B, align 8, !dbg !449
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSINKGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !450
[Sink:]   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !450
 allocation intermediate:   %42 = load i64*, i64** %A, align 8, !dbg !450
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !450
[Sink:]   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !450
 allocation intermediate:   %42 = load i64*, i64** %A, align 8, !dbg !450
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top29 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %45, i32 0, i32 1, !dbg !461
[Source:]   %top29 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %45, i32 0, i32 1, !dbg !461
StructType: allocation intermediate:   %45 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !460
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSINKGEP INSTRUCTION   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !463
[Sink:]   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !463
StructType:::IS STRUCT TY:: allocation intermediate:   %47 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !462
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x6094a00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094a00:s0 -> Node0x608f450;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !463
[Sink:]   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !463
StructType:::IS STRUCT TY:: allocation intermediate:   %47 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !462
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x6094a00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094a00:s0 -> Node0x608f450;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %48, i32 0, i32 3, !dbg !466
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %48, i32 0, i32 3, !dbg !466
StructType: allocation intermediate:   %48 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !465
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSINKGEP INSTRUCTION   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !468
[Sink:]   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !468
StructType:::IS STRUCT TY:: allocation intermediate:   %50 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !467
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x6094a00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094a00:s0 -> Node0x608f450;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !468
[Sink:]   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !468
StructType:::IS STRUCT TY:: allocation intermediate:   %50 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !467
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x6094a00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094a00:s0 -> Node0x608f450;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on BN_RECP_CTX_set in context [BN_mod_exp_recp ]
Creating ConsElem Map for :	Node0x60bcd30 [shape=record,shape=Mrecord,label="{0: %struct.bn_recp_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x60bcd30:s0 -> Node0x60c5580;
EDGE: [0: tymap-size 1]:%struct.bn_recp_ctx_st = type { %struct.bignum_st, %struct.bignum_st, i32, i32, i32 }
	Node0x60c5580 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5580:s0 -> Node0x60bae60;
Creating ConsElem Map for :	Node0x60bceb0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60bceb0:s0 -> Node0x60bc8b0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60bc8b0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60bc8b0:s0 -> Node0x60bd1b0;
Creating ConsElem Map for :	Node0x60bd030 [shape=record,shape=Mrecord,label="{0: %struct.bignum_ctx*,  : SM\n|{<s0>0}}"];
	Node0x60bd030:s0 -> Node0x60bcaf0;
EDGE: [0: tymap-size 1]:%struct.bignum_ctx = type opaque
	Node0x60bcaf0 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x60bcbf0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSINKGEP INSTRUCTION   %num_bits = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %4, i32 0, i32 2, !dbg !378
[Sink:]   %num_bits = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %4, i32 0, i32 2, !dbg !378
StructType:::IS STRUCT TY:: allocation intermediate:   %4 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !377
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Tainting at offset: 48
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 48
	Node0x60c5580 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5580:s0 -> Node0x60bae60;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %num_bits = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %4, i32 0, i32 2, !dbg !378
[Sink:]   %num_bits = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %4, i32 0, i32 2, !dbg !378
StructType:::IS STRUCT TY:: allocation intermediate:   %4 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !377
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Tainting at offset: 48
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 48
	Node0x60c5580 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5580:s0 -> Node0x60bae60;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %shift = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %5, i32 0, i32 3, !dbg !381
[Sink:]   %shift = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %5, i32 0, i32 3, !dbg !381
StructType:::IS STRUCT TY:: allocation intermediate:   %5 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !380
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Tainting at offset: 52
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 52
	Node0x60c5580 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5580:s0 -> Node0x60bae60;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %shift = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %5, i32 0, i32 3, !dbg !381
[Sink:]   %shift = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %5, i32 0, i32 3, !dbg !381
StructType:::IS STRUCT TY:: allocation intermediate:   %5 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !380
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Tainting at offset: 52
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 52
	Node0x60c5580 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5580:s0 -> Node0x60bae60;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on BN_is_zero in context [BN_mod_exp_recp ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !364
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !364
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !363
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x6eba550
Running on BN_mod_mul_reciprocal in context [BN_mod_exp_recp ]
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %0), !dbg !378
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !377
REACHABLE SOURCE:   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !377
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !377
Using taint reachable signature for:   %call = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %1), !dbg !381
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !379
REACHABLE SOURCE:   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !379
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !379
Using taint reachable signature for:   %call5 = call i32 @BN_sqr(%struct.bignum_st* %5, %struct.bignum_st* %6, %struct.bignum_ctx* %7), !dbg !401
RSINKGEP INSTRUCTION   %6 = load %struct.bignum_st*, %struct.bignum_st** %x.addr, align 8, !dbg !399
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %5 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !396
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !400
REACHABLE SOURCE:   %6 = load %struct.bignum_st*, %struct.bignum_st** %x.addr, align 8, !dbg !399
REACHABLE SOURCE:   %5 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !396
REACHABLE SOURCE:   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !400
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %6 = load %struct.bignum_st*, %struct.bignum_st** %x.addr, align 8, !dbg !399
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %5 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !396
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !400
Using taint reachable signature for:   %call8 = call i32 @BN_mul(%struct.bignum_st* %8, %struct.bignum_st* %9, %struct.bignum_st* %10, %struct.bignum_ctx* %11), !dbg !411
RSINKGEP INSTRUCTION   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !410
RSINKGEP INSTRUCTION   %8 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !405
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %10 = load %struct.bignum_st*, %struct.bignum_st** %y.addr, align 8, !dbg !409
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_st*, %struct.bignum_st** %x.addr, align 8, !dbg !408
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !410
REACHABLE SOURCE:   %8 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !405
REACHABLE SOURCE:   %10 = load %struct.bignum_st*, %struct.bignum_st** %y.addr, align 8, !dbg !409
REACHABLE SOURCE:   %9 = load %struct.bignum_st*, %struct.bignum_st** %x.addr, align 8, !dbg !408
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !410
RSINKGEP INSTRUCTION   %8 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !405
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %10 = load %struct.bignum_st*, %struct.bignum_st** %y.addr, align 8, !dbg !409
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_st*, %struct.bignum_st** %x.addr, align 8, !dbg !408
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %18), !dbg !427
RSINKGEP INSTRUCTION   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !426
REACHABLE SOURCE:   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !426
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !426
Creating ConsElem Map for :	Node0x60be370 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60be370:s0 -> Node0x60bef30;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60bef30 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60bef30:s0 -> Node0x60bf2b0;
Creating ConsElem Map for :	Node0x60be4f0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60be4f0:s0 -> Node0x60bef30;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60bef30 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60bef30:s0 -> Node0x60bf2b0;
Creating ConsElem Map for :	Node0x60be670 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60be670:s0 -> Node0x60bef30;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60bef30 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60bef30:s0 -> Node0x60bf2b0;
Creating ConsElem Map for :	Node0x60be7f0 [shape=record,shape=Mrecord,label="{0: %struct.bn_recp_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x60be7f0:s0 -> Node0x60efa50;
EDGE: [0: tymap-size 1]:%struct.bn_recp_ctx_st = type { %struct.bignum_st, %struct.bignum_st, i32, i32, i32 }
	Node0x60efa50 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60efa50:s0 -> Node0x60bd2f0;
Creating ConsElem Map for :	Node0x60be970 [shape=record,shape=Mrecord,label="{0: %struct.bignum_ctx*,  : SMR\n|{<s0>0}}"];
	Node0x60be970:s0 -> Node0x60be270;
EDGE: [0: tymap-size 1]:%struct.bignum_ctx = type opaque
	Node0x60be270 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x60beaf0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60bec30 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60bec30:s0 -> Node0x60bef30;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60bef30 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60bef30:s0 -> Node0x60bf2b0;
Creating ConsElem Map for :	Node0x60bedb0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60bedb0:s0 -> Node0x60bef30;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60bef30 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60bef30:s0 -> Node0x60bf2b0;
Running on BN_is_bit_set in context [BN_mod_exp_recp ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 1, !dbg !382
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 1, !dbg !382
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !380
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  20: i32,  : CRE[8,12]0x69bbc80
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 0, !dbg !389
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 0, !dbg !389
StructType: allocation intermediate:   %7 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !388
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  20: i32,  : CRE[0,8]0x69bbce0
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %8, i64 %idxprom, !dbg !388
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %8, i64 %idxprom, !dbg !388
Running on BN_RECP_CTX_free in context [BN_mod_exp_recp ]
Using taint reachable signature for:   call void @CRYPTO_free(i8* %6, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str47, i32 0, i32 0), i32 41), !dbg !379
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str47, i32 0, i32 0)
RSINKGEP INSTRUCTION   %6 = bitcast %struct.bn_recp_ctx_st* %5 to i8*, !dbg !379
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x60c2070 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str47 = private unnamed_addr constant [10 x i8] c\"bn_recp.c\\00\", align 1\n|{<s0>0}}"];
REACHABLE SOURCE: i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str47, i32 0, i32 0)
REACHABLE SOURCE:   %6 = bitcast %struct.bn_recp_ctx_st* %5 to i8*, !dbg !379
	Node0x60c2070 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str47 = private unnamed_addr constant [10 x i8] c\"bn_recp.c\\00\", align 1\n|{<s0>0}}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str47, i32 0, i32 0)
RSINKGEP INSTRUCTION   %6 = bitcast %struct.bn_recp_ctx_st* %5 to i8*, !dbg !379
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x60bace0 [shape=record,shape=Mrecord,label="{0: %struct.bn_recp_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x60bace0:s0 -> Node0x60bd430;
EDGE: [0: tymap-size 1]:%struct.bn_recp_ctx_st = type { %struct.bignum_st, %struct.bignum_st, i32, i32, i32 }
	Node0x60bd430 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60bd430:s0 -> Node0x60ede90;
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %3, i32 0, i32 4, !dbg !376
[Source:]   %flags = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %3, i32 0, i32 4, !dbg !376
StructType: allocation intermediate:   %3 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !374
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Trying to find element at offset 56
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 56
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[52,56]0x6bcd8c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,24]0x7832180
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[48,52]0x7832210
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[24,48]0x7832240
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[56,60]0x7a41b20
Running on BN_is_zero in context [BN_num_bits ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !364
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !364
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !363
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x6eba550
Running on BN_num_bits_word in context [BN_num_bits ]
Creating ConsElem Map for :	Node0x6077b90 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom, !dbg !381
[Source:]   %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom, !dbg !381
Created 256 constraint variable(s) for node of size 1
Creating ConsElem Map for :	Node0x6077a10 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx11 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom10, !dbg !387
[Source:]   %arrayidx11 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom10, !dbg !387
DSOURCEGEP INSTRUCTION   %arrayidx21 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom20, !dbg !399
[Source:]   %arrayidx21 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom20, !dbg !399
DSOURCEGEP INSTRUCTION   %arrayidx28 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom27, !dbg !405
[Source:]   %arrayidx28 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom27, !dbg !405
DSOURCEGEP INSTRUCTION   %arrayidx41 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom40, !dbg !421
[Source:]   %arrayidx41 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom40, !dbg !421
DSOURCEGEP INSTRUCTION   %arrayidx48 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom47, !dbg !427
[Source:]   %arrayidx48 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom47, !dbg !427
DSOURCEGEP INSTRUCTION   %arrayidx58 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom57, !dbg !438
[Source:]   %arrayidx58 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom57, !dbg !438
DSOURCEGEP INSTRUCTION   %arrayidx64 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom63, !dbg !443
[Source:]   %arrayidx64 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom63, !dbg !443
Running on BN_abs_is_word in context [BN_is_one ]
Creating ConsElem Map for :	Node0x608c7d0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x608c7d0:s0 -> Node0x608c650;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x608c650 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x608c650:s0 -> Node0x608c950;
Creating ConsElem Map for :	Node0x608c890 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !366
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !366
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !365
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[8,12]0x7b6c390
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !371
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !371
StructType: allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !369
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x7baaf10
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %3, i64 0, !dbg !372
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %3, i64 0, !dbg !372
 allocation intermediate:   %3 = load i64*, i64** %d, align 8, !dbg !371
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !371
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !371
=>  %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !369
 allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !369
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x7baaf10
DSOURCEGEP INSTRUCTION   %top3 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 1, !dbg !383
[Source:]   %top3 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 1, !dbg !383
StructType: allocation intermediate:   %7 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !381
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[8,12]0x7b6c390
Running on bn_expand in context [BN_set_word ]
Creating ConsElem Map for :	Node0x6082210 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x6082210:s0 -> Node0x60813e0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60813e0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60813e0:s0 -> Node0x609f630;
Creating ConsElem Map for :	Node0x6082390 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x6082090 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x6082090:s0 -> Node0x60813e0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60813e0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60813e0:s0 -> Node0x609f630;
DSOURCEGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 2, !dbg !376
[Source:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 2, !dbg !376
StructType: allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7ba4c00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7ba4d20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7ba4e00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7baab90
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7baadd0
Running on BN_MONT_CTX_init in context [BN_MONT_CTX_new ]
Creating ConsElem Map for :	Node0x6097d30 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x6097d30:s0 -> Node0x6097eb0;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x6097eb0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6097eb0:s0 -> Node0x6097670;
DSINKGEP INSTRUCTION   %ri = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %0, i32 0, i32 0, !dbg !364
[Sink:]   %ri = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %0, i32 0, i32 0, !dbg !364
StructType:::IS STRUCT TY:: allocation intermediate:   %0 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ctx.addr, align 8, !dbg !363
=>  %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 0
	Node0x6097eb0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6097eb0:s0 -> Node0x6097670;
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %ri = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %0, i32 0, i32 0, !dbg !364
[Sink:]   %ri = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %0, i32 0, i32 0, !dbg !364
StructType:::IS STRUCT TY:: allocation intermediate:   %0 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ctx.addr, align 8, !dbg !363
=>  %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 0
	Node0x6097eb0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6097eb0:s0 -> Node0x6097670;
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %n0, i32 0, i64 1, !dbg !375
[Sink:]   %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %n0, i32 0, i64 1, !dbg !375
ArrayType: allocation intermediate:   %n0 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %4, i32 0, i32 4, !dbg !376
=>  %4 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ctx.addr, align 8, !dbg !375
 allocation intermediate:   %4 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ctx.addr, align 8, !dbg !375
=>  %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x6097eb0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6097eb0:s0 -> Node0x6097670;
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Tainting at offset: 1
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %n0, i32 0, i64 1, !dbg !375
[Sink:]   %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %n0, i32 0, i64 1, !dbg !375
ArrayType: allocation intermediate:   %n0 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %4, i32 0, i32 4, !dbg !376
=>  %4 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ctx.addr, align 8, !dbg !375
 allocation intermediate:   %4 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ctx.addr, align 8, !dbg !375
=>  %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x6097eb0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6097eb0:s0 -> Node0x6097670;
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Tainting at offset: 1
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %arrayidx2 = getelementptr inbounds [2 x i64], [2 x i64]* %n01, i32 0, i64 0, !dbg !378
[Sink:]   %arrayidx2 = getelementptr inbounds [2 x i64], [2 x i64]* %n01, i32 0, i64 0, !dbg !378
ArrayType: allocation intermediate:   %n01 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %5, i32 0, i32 4, !dbg !379
=>  %5 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ctx.addr, align 8, !dbg !378
 allocation intermediate:   %5 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ctx.addr, align 8, !dbg !378
=>  %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 0
	Node0x6097eb0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6097eb0:s0 -> Node0x6097670;
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %arrayidx2 = getelementptr inbounds [2 x i64], [2 x i64]* %n01, i32 0, i64 0, !dbg !378
[Sink:]   %arrayidx2 = getelementptr inbounds [2 x i64], [2 x i64]* %n01, i32 0, i64 0, !dbg !378
ArrayType: allocation intermediate:   %n01 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %5, i32 0, i32 4, !dbg !379
=>  %5 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ctx.addr, align 8, !dbg !378
 allocation intermediate:   %5 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ctx.addr, align 8, !dbg !378
=>  %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 0
	Node0x6097eb0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6097eb0:s0 -> Node0x6097670;
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %6, i32 0, i32 5, !dbg !382
[Sink:]   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %6, i32 0, i32 5, !dbg !382
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ctx.addr, align 8, !dbg !381
=>  %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 96
	Node0x6097eb0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6097eb0:s0 -> Node0x6097670;
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Tainting at offset: 96
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %6, i32 0, i32 5, !dbg !382
[Sink:]   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %6, i32 0, i32 5, !dbg !382
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ctx.addr, align 8, !dbg !381
=>  %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %ctx.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 96
	Node0x6097eb0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6097eb0:s0 -> Node0x6097670;
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Tainting at offset: 96
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on BN_is_zero in context [BN_MONT_CTX_set ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !364
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !364
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !363
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x6eba550
Running on BN_copy in context [BN_MONT_CTX_set ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !381
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !381
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !380
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !387
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !387
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !386
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSOURCEGEP INSTRUCTION   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !390
[Source:]   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !390
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !389
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSOURCEGEP INSTRUCTION   %top5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !394
[Source:]   %top5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !394
StructType: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !392
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !413
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !413
 allocation intermediate:   %13 = load i64*, i64** %B, align 8, !dbg !413
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSOURCEGEP INSTRUCTION   %arrayidx7 = getelementptr inbounds i64, i64* %15, i64 1, !dbg !415
[Source:]   %arrayidx7 = getelementptr inbounds i64, i64* %15, i64 1, !dbg !415
 allocation intermediate:   %15 = load i64*, i64** %B, align 8, !dbg !415
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSOURCEGEP INSTRUCTION   %arrayidx8 = getelementptr inbounds i64, i64* %17, i64 2, !dbg !417
[Source:]   %arrayidx8 = getelementptr inbounds i64, i64* %17, i64 2, !dbg !417
 allocation intermediate:   %17 = load i64*, i64** %B, align 8, !dbg !417
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSOURCEGEP INSTRUCTION   %arrayidx9 = getelementptr inbounds i64, i64* %19, i64 3, !dbg !419
[Source:]   %arrayidx9 = getelementptr inbounds i64, i64* %19, i64 3, !dbg !419
 allocation intermediate:   %19 = load i64*, i64** %B, align 8, !dbg !419
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 3
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 3
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSINKGEP INSTRUCTION   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !422
[Sink:]   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !422
 allocation intermediate:   %22 = load i64*, i64** %A, align 8, !dbg !422
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !422
[Sink:]   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !422
 allocation intermediate:   %22 = load i64*, i64** %A, align 8, !dbg !422
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !425
[Sink:]   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !425
 allocation intermediate:   %24 = load i64*, i64** %A, align 8, !dbg !425
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !425
[Sink:]   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !425
 allocation intermediate:   %24 = load i64*, i64** %A, align 8, !dbg !425
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !428
[Sink:]   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !428
 allocation intermediate:   %26 = load i64*, i64** %A, align 8, !dbg !428
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !428
[Sink:]   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !428
 allocation intermediate:   %26 = load i64*, i64** %A, align 8, !dbg !428
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !431
[Sink:]   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !431
 allocation intermediate:   %28 = load i64*, i64** %A, align 8, !dbg !431
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 3
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 3
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !431
[Sink:]   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !431
 allocation intermediate:   %28 = load i64*, i64** %A, align 8, !dbg !431
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 3
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 3
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top15 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %32, i32 0, i32 1, !dbg !439
[Source:]   %top15 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %32, i32 0, i32 1, !dbg !439
StructType: allocation intermediate:   %32 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !438
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSOURCEGEP INSTRUCTION   %arrayidx16 = getelementptr inbounds i64, i64* %34, i64 2, !dbg !442
[Source:]   %arrayidx16 = getelementptr inbounds i64, i64* %34, i64 2, !dbg !442
 allocation intermediate:   %34 = load i64*, i64** %B, align 8, !dbg !442
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSINKGEP INSTRUCTION   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !444
[Sink:]   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !444
 allocation intermediate:   %36 = load i64*, i64** %A, align 8, !dbg !444
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !444
[Sink:]   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !444
 allocation intermediate:   %36 = load i64*, i64** %A, align 8, !dbg !444
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx19 = getelementptr inbounds i64, i64* %37, i64 1, !dbg !446
[Source:]   %arrayidx19 = getelementptr inbounds i64, i64* %37, i64 1, !dbg !446
 allocation intermediate:   %37 = load i64*, i64** %B, align 8, !dbg !446
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSINKGEP INSTRUCTION   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !447
[Sink:]   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !447
 allocation intermediate:   %39 = load i64*, i64** %A, align 8, !dbg !447
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !447
[Sink:]   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !447
 allocation intermediate:   %39 = load i64*, i64** %A, align 8, !dbg !447
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx22 = getelementptr inbounds i64, i64* %40, i64 0, !dbg !449
[Source:]   %arrayidx22 = getelementptr inbounds i64, i64* %40, i64 0, !dbg !449
 allocation intermediate:   %40 = load i64*, i64** %B, align 8, !dbg !449
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSINKGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !450
[Sink:]   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !450
 allocation intermediate:   %42 = load i64*, i64** %A, align 8, !dbg !450
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !450
[Sink:]   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !450
 allocation intermediate:   %42 = load i64*, i64** %A, align 8, !dbg !450
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top29 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %45, i32 0, i32 1, !dbg !461
[Source:]   %top29 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %45, i32 0, i32 1, !dbg !461
StructType: allocation intermediate:   %45 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !460
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSINKGEP INSTRUCTION   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !463
[Sink:]   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !463
StructType:::IS STRUCT TY:: allocation intermediate:   %47 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !462
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x6094a00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094a00:s0 -> Node0x608f450;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !463
[Sink:]   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !463
StructType:::IS STRUCT TY:: allocation intermediate:   %47 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !462
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x6094a00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094a00:s0 -> Node0x608f450;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %48, i32 0, i32 3, !dbg !466
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %48, i32 0, i32 3, !dbg !466
StructType: allocation intermediate:   %48 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !465
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSINKGEP INSTRUCTION   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !468
[Sink:]   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !468
StructType:::IS STRUCT TY:: allocation intermediate:   %50 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !467
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x6094a00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094a00:s0 -> Node0x608f450;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !468
[Sink:]   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !468
StructType:::IS STRUCT TY:: allocation intermediate:   %50 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !467
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x6094a00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094a00:s0 -> Node0x608f450;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on bn_init in context [BN_MONT_CTX_set ]
Creating ConsElem Map for :	Node0x6098870 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x6098870:s0 -> Node0x60989f0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60989f0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60989f0:s0 -> Node0x60bbb20;
Running on BN_get_flags in context [BN_MONT_CTX_set ]
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !366
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !366
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !365
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x61483b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x6150190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x6218cd0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x6218ea0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x6218fc0
Running on BN_set_flags in context [BN_MONT_CTX_set ]
Creating ConsElem Map for :	Node0x607bc60 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x607bc60:s0 -> Node0x607de70;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x607de70 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x607de70:s0 -> Node0x607d240;
Creating ConsElem Map for :	Node0x607bd20 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !367
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !367
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !366
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7c944d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7c945b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7c9bc10
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7db69f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7db6b80
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !367
[Sink:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !367
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !366
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 20
	Node0x607de70 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x607de70:s0 -> Node0x607d240;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 20
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !367
[Sink:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !367
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !366
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 20
	Node0x607de70 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x607de70:s0 -> Node0x607d240;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 20
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on BN_num_bits in context [BN_MONT_CTX_set ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !366
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !366
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !365
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x6610ef0
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !377
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !377
StructType: allocation intermediate:   %5 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !376
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x6610e80
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !376
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !376
Running on BN_set_word in context [BN_MONT_CTX_set ]
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !372
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !372
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !371
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !372
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !372
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !371
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x6676440
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x6676560
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x6676680
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69bd5a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x6a2efa0
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !375
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !375
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !376
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !375
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !375
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !376
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !380
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !380
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !379
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !380
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !380
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !379
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on BN_set_bit in context [BN_MONT_CTX_set ]
Creating ConsElem Map for :	Node0x609f1f0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x609f1f0:s0 -> Node0x60aeb50;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60aeb50 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60aeb50:s0 -> Node0x60b4340;
Creating ConsElem Map for :	Node0x609f2b0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x609f130 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x609f370 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x609f430 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 1, !dbg !384
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 1, !dbg !384
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !382
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7ad3b80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7ad3bb0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7db5b90
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7db5cb0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7db5dd0
DSOURCEGEP INSTRUCTION   %top6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 1, !dbg !399
[Source:]   %top6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 1, !dbg !399
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !397
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7ad3b80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7ad3bb0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7db5b90
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7db5cb0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7db5dd0
Creating ConsElem Map for :	Node0x609f4f0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %13, i32 0, i32 0, !dbg !412
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %13, i32 0, i32 0, !dbg !412
StructType: allocation intermediate:   %13 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !411
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7ad3b80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7ad3bb0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7db5b90
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7db5cb0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7db5dd0
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !411
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !411
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !411
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !411
DSINKGEP INSTRUCTION   %top10 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 1, !dbg !419
[Sink:]   %top10 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 1, !dbg !419
StructType:::IS STRUCT TY:: allocation intermediate:   %17 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !418
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x60aeb50 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60aeb50:s0 -> Node0x60b4340;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top10 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 1, !dbg !419
[Sink:]   %top10 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 1, !dbg !419
StructType:::IS STRUCT TY:: allocation intermediate:   %17 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !418
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x60aeb50 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60aeb50:s0 -> Node0x60b4340;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %d13 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %20, i32 0, i32 0, !dbg !426
[Source:]   %d13 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %20, i32 0, i32 0, !dbg !426
StructType: allocation intermediate:   %20 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !425
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7ad3b80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7ad3bb0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7db5b90
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7db5cb0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7db5dd0
DSOURCEGEP INSTRUCTION   %arrayidx14 = getelementptr inbounds i64, i64* %21, i64 %idxprom12, !dbg !425
[Source:]   %arrayidx14 = getelementptr inbounds i64, i64* %21, i64 %idxprom12, !dbg !425
DSINKGEP INSTRUCTION   %arrayidx14 = getelementptr inbounds i64, i64* %21, i64 %idxprom12, !dbg !425
[Sink:]   %arrayidx14 = getelementptr inbounds i64, i64* %21, i64 %idxprom12, !dbg !425
DSINKGEP INSTRUCTION   %arrayidx14 = getelementptr inbounds i64, i64* %21, i64 %idxprom12, !dbg !425
[Sink:]   %arrayidx14 = getelementptr inbounds i64, i64* %21, i64 %idxprom12, !dbg !425
Running on BN_mod_mul_montgomery in context [BN_to_montgomery ]
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %0), !dbg !376
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !375
REACHABLE SOURCE:   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !375
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !375
Using taint reachable signature for:   %call = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %1), !dbg !378
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !377
REACHABLE SOURCE:   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !377
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !377
Using taint reachable signature for:   %call4 = call i32 @BN_sqr(%struct.bignum_st* %5, %struct.bignum_st* %6, %struct.bignum_ctx* %7), !dbg !395
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !394
RSINKGEP INSTRUCTION   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !393
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %5 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !390
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !394
REACHABLE SOURCE:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !393
REACHABLE SOURCE:   %5 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !390
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !394
RSINKGEP INSTRUCTION   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !393
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %5 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !390
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call7 = call i32 @BN_mul(%struct.bignum_st* %8, %struct.bignum_st* %9, %struct.bignum_st* %10, %struct.bignum_ctx* %11), !dbg !405
RSINKGEP INSTRUCTION   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !404
RSINKGEP INSTRUCTION   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !403
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !402
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %8 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !399
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !404
REACHABLE SOURCE:   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !403
REACHABLE SOURCE:   %9 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !402
REACHABLE SOURCE:   %8 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !399
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !404
RSINKGEP INSTRUCTION   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !403
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !402
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %8 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !399
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %15), !dbg !418
RSINKGEP INSTRUCTION   %15 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !417
REACHABLE SOURCE:   %15 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !417
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %15 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !417
Running on BN_from_montgomery_word in context [BN_mod_mul_montgomery ]
Using taint reachable signature for:   %call19 = call i64 @bn_mul_add_words(i64* %31, i64* %32, i32 %33, i64 %mul18), !dbg !462
RSINKGEP INSTRUCTION   %31 = load i64*, i64** %rp, align 8, !dbg !455
RSINKGEP INSTRUCTION   %32 = load i64*, i64** %np, align 8, !dbg !457
REACHABLE SOURCE:   %31 = load i64*, i64** %rp, align 8, !dbg !455
REACHABLE SOURCE:   %32 = load i64*, i64** %np, align 8, !dbg !457
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %31 = load i64*, i64** %rp, align 8, !dbg !455
RSINKGEP INSTRUCTION   %32 = load i64*, i64** %np, align 8, !dbg !457
Using taint reachable signature for:   %call47 = call i64 @bn_sub_words(i64* %69, i64* %70, i64* %71, i32 %72), !dbg !523
RSINKGEP INSTRUCTION   %69 = load i64*, i64** %rp, align 8, !dbg !519
RSINKGEP INSTRUCTION   %70 = load i64*, i64** %ap, align 8, !dbg !520
RSINKGEP INSTRUCTION   %71 = load i64*, i64** %np, align 8, !dbg !521
REACHABLE SOURCE:   %69 = load i64*, i64** %rp, align 8, !dbg !519
REACHABLE SOURCE:   %70 = load i64*, i64** %ap, align 8, !dbg !520
REACHABLE SOURCE:   %71 = load i64*, i64** %np, align 8, !dbg !521
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %69 = load i64*, i64** %rp, align 8, !dbg !519
RSINKGEP INSTRUCTION   %70 = load i64*, i64** %ap, align 8, !dbg !520
RSINKGEP INSTRUCTION   %71 = load i64*, i64** %np, align 8, !dbg !521
Creating ConsElem Map for :	Node0x60906b0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60906b0:s0 -> Node0x60922b0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60922b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60922b0:s0 -> Node0x60b09c0;
Creating ConsElem Map for :	Node0x6090830 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x6090830:s0 -> Node0x60904f0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60904f0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60904f0:s0 -> Node0x60b09c0;
Creating ConsElem Map for :	Node0x60909b0 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x60909b0:s0 -> Node0x60922b0;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x60922b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60922b0:s0 -> Node0x60b09c0;
Creating ConsElem Map for :	Node0x6090b30 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x6090b30:s0 -> Node0x60922b0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60922b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60922b0:s0 -> Node0x60b09c0;
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 1, !dbg !391
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 1, !dbg !391
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %n, align 8, !dbg !390
=>  %n = alloca %struct.bignum_st*, align 8
FINAL:   %n = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7ef6170
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7ef61a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7ef67c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7ef68e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7ef6a00
Creating ConsElem Map for :	Node0x60914f0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSINKGEP INSTRUCTION   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !399
[Sink:]   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !399
StructType:::IS STRUCT TY:: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %ret.addr, align 8, !dbg !397
=>  %ret.addr = alloca %struct.bignum_st*, align 8
FINAL:   %ret.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x60922b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60922b0:s0 -> Node0x60b09c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !399
[Sink:]   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !399
StructType:::IS STRUCT TY:: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %ret.addr, align 8, !dbg !397
=>  %ret.addr = alloca %struct.bignum_st*, align 8
FINAL:   %ret.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x60922b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60922b0:s0 -> Node0x60b09c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Creating ConsElem Map for :	Node0x60905b0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x6091630 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 3, !dbg !413
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 3, !dbg !413
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %n, align 8, !dbg !412
=>  %n = alloca %struct.bignum_st*, align 8
FINAL:   %n = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7ef6170
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7ef61a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7ef67c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7ef68e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7ef6a00
DSOURCEGEP INSTRUCTION   %neg5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 3, !dbg !415
[Source:]   %neg5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 3, !dbg !415
StructType: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !414
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[16,20]0x7efed20
DSINKGEP INSTRUCTION   %neg5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 3, !dbg !415
[Sink:]   %neg5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 3, !dbg !415
StructType:::IS STRUCT TY:: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !414
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x60904f0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60904f0:s0 -> Node0x60b09c0;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 3, !dbg !415
[Sink:]   %neg5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 3, !dbg !415
StructType:::IS STRUCT TY:: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !414
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x60904f0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60904f0:s0 -> Node0x60b09c0;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !418
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !418
StructType: allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %n, align 8, !dbg !417
=>  %n = alloca %struct.bignum_st*, align 8
FINAL:   %n = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7ef6170
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7ef61a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7ef67c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7ef68e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7ef6a00
Creating ConsElem Map for :	Node0x6090e30 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x6090e30:s0 -> Node0x60b09c0;
EDGE: [0: tymap-size 1]:i64
	Node0x60b09c0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
DSOURCEGEP INSTRUCTION   %d6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %14, i32 0, i32 0, !dbg !421
[Source:]   %d6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %14, i32 0, i32 0, !dbg !421
StructType: allocation intermediate:   %14 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !420
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7efebd0
Creating ConsElem Map for :	Node0x6090fb0 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x6090fb0:s0 -> Node0x60b09c0;
EDGE: [0: tymap-size 1]:i64
	Node0x60b09c0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
DSOURCEGEP INSTRUCTION   %top7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 1, !dbg !425
[Source:]   %top7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 1, !dbg !425
StructType: allocation intermediate:   %17 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !424
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7efec40
Creating ConsElem Map for :	Node0x6091770 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %top9 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %20, i32 0, i32 1, !dbg !432
[Source:]   %top9 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %20, i32 0, i32 1, !dbg !432
StructType: allocation intermediate:   %20 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !431
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7efec40
DSINKGEP INSTRUCTION   %top12 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %26, i32 0, i32 1, !dbg !439
[Sink:]   %top12 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %26, i32 0, i32 1, !dbg !439
StructType:::IS STRUCT TY:: allocation intermediate:   %26 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !438
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x60904f0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60904f0:s0 -> Node0x60b09c0;
Trying to find element at offset 8
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top12 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %26, i32 0, i32 1, !dbg !439
[Sink:]   %top12 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %26, i32 0, i32 1, !dbg !439
StructType:::IS STRUCT TY:: allocation intermediate:   %26 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !438
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x60904f0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60904f0:s0 -> Node0x60b09c0;
Trying to find element at offset 8
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %arrayidx14 = getelementptr inbounds [2 x i64], [2 x i64]* %n013, i32 0, i64 0, !dbg !441
[Source:]   %arrayidx14 = getelementptr inbounds [2 x i64], [2 x i64]* %n013, i32 0, i64 0, !dbg !441
ArrayType: allocation intermediate:   %n013 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %27, i32 0, i32 4, !dbg !442
=>  %27 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !441
 allocation intermediate:   %27 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !441
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7ef6170
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7ef61a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7ef67c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7ef68e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7ef6a00
Creating ConsElem Map for :	Node0x6091130 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60913b0 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx17 = getelementptr inbounds i64, i64* %34, i64 0, !dbg !459
[Source:]   %arrayidx17 = getelementptr inbounds i64, i64* %34, i64 0, !dbg !459
 allocation intermediate:   %34 = load i64*, i64** %rp, align 8, !dbg !459
=>  %rp = alloca i64*, align 8
FINAL:   %rp = alloca i64*, align 8
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
Creating ConsElem Map for :	Node0x6091270 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx21 = getelementptr inbounds i64, i64* %40, i64 %idxprom20, !dbg !468
[Source:]   %arrayidx21 = getelementptr inbounds i64, i64* %40, i64 %idxprom20, !dbg !468
DSOURCEGEP INSTRUCTION   %arrayidx24 = getelementptr inbounds i64, i64* %44, i64 %idxprom23, !dbg !473
[Source:]   %arrayidx24 = getelementptr inbounds i64, i64* %44, i64 %idxprom23, !dbg !473
DSOURCEGEP INSTRUCTION   %arrayidx29 = getelementptr inbounds i64, i64* %49, i64 %idxprom28, !dbg !479
[Source:]   %arrayidx29 = getelementptr inbounds i64, i64* %49, i64 %idxprom28, !dbg !479
DSINKGEP INSTRUCTION   %arrayidx34 = getelementptr inbounds i64, i64* %54, i64 %idxprom33, !dbg !485
[Sink:]   %arrayidx34 = getelementptr inbounds i64, i64* %54, i64 %idxprom33, !dbg !485
DSINKGEP INSTRUCTION   %arrayidx34 = getelementptr inbounds i64, i64* %54, i64 %idxprom33, !dbg !485
[Sink:]   %arrayidx34 = getelementptr inbounds i64, i64* %54, i64 %idxprom33, !dbg !485
DSINKGEP INSTRUCTION   %top40 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %60, i32 0, i32 1, !dbg !500
[Sink:]   %top40 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %60, i32 0, i32 1, !dbg !500
StructType:::IS STRUCT TY:: allocation intermediate:   %60 = load %struct.bignum_st*, %struct.bignum_st** %ret.addr, align 8, !dbg !499
=>  %ret.addr = alloca %struct.bignum_st*, align 8
FINAL:   %ret.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x60922b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60922b0:s0 -> Node0x60b09c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top40 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %60, i32 0, i32 1, !dbg !500
[Sink:]   %top40 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %60, i32 0, i32 1, !dbg !500
StructType:::IS STRUCT TY:: allocation intermediate:   %60 = load %struct.bignum_st*, %struct.bignum_st** %ret.addr, align 8, !dbg !499
=>  %ret.addr = alloca %struct.bignum_st*, align 8
FINAL:   %ret.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x60922b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60922b0:s0 -> Node0x60b09c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %neg41 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %61, i32 0, i32 3, !dbg !503
[Source:]   %neg41 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %61, i32 0, i32 3, !dbg !503
StructType: allocation intermediate:   %61 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !502
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[16,20]0x7efed20
DSINKGEP INSTRUCTION   %neg42 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %63, i32 0, i32 3, !dbg !505
[Sink:]   %neg42 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %63, i32 0, i32 3, !dbg !505
StructType:::IS STRUCT TY:: allocation intermediate:   %63 = load %struct.bignum_st*, %struct.bignum_st** %ret.addr, align 8, !dbg !504
=>  %ret.addr = alloca %struct.bignum_st*, align 8
FINAL:   %ret.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x60922b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60922b0:s0 -> Node0x60b09c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg42 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %63, i32 0, i32 3, !dbg !505
[Sink:]   %neg42 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %63, i32 0, i32 3, !dbg !505
StructType:::IS STRUCT TY:: allocation intermediate:   %63 = load %struct.bignum_st*, %struct.bignum_st** %ret.addr, align 8, !dbg !504
=>  %ret.addr = alloca %struct.bignum_st*, align 8
FINAL:   %ret.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x60922b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60922b0:s0 -> Node0x60b09c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %d43 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %64, i32 0, i32 0, !dbg !508
[Source:]   %d43 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %64, i32 0, i32 0, !dbg !508
StructType: allocation intermediate:   %64 = load %struct.bignum_st*, %struct.bignum_st** %ret.addr, align 8, !dbg !507
=>  %ret.addr = alloca %struct.bignum_st*, align 8
FINAL:   %ret.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7ef6170
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7ef61a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7ef67c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7ef68e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7ef6a00
DSOURCEGEP INSTRUCTION   %d45 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %67, i32 0, i32 0, !dbg !512
[Source:]   %d45 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %67, i32 0, i32 0, !dbg !512
StructType: allocation intermediate:   %67 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !511
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7efebd0
Creating ConsElem Map for :	Node0x6090cb0 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x6090cb0:s0 -> Node0x60b09c0;
EDGE: [0: tymap-size 1]:i64
	Node0x60b09c0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x6091a30 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60918b0 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x60918b0:s0 -> Node0x60923f0;
EDGE: [0: tymap-size 1]:i64
	Node0x60923f0 [shape=record,shape=Mrecord,label="{0: i64,   array: R\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx61 = getelementptr inbounds i64, i64* %86, i64 %idxprom60, !dbg !564
[Source:]   %arrayidx61 = getelementptr inbounds i64, i64* %86, i64 %idxprom60, !dbg !564
Created 1 constraint variable(s) for node of size 8
Creating ConsElem Map for :	Node0x6091b70 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx64 = getelementptr inbounds i64, i64* %89, i64 %idxprom63, !dbg !568
[Source:]   %arrayidx64 = getelementptr inbounds i64, i64* %89, i64 %idxprom63, !dbg !568
Creating ConsElem Map for :	Node0x6091cb0 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx67 = getelementptr inbounds i64, i64* %92, i64 %idxprom66, !dbg !572
[Source:]   %arrayidx67 = getelementptr inbounds i64, i64* %92, i64 %idxprom66, !dbg !572
Creating ConsElem Map for :	Node0x6091df0 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSINKGEP INSTRUCTION   %arrayidx70 = getelementptr inbounds i64, i64* %95, i64 %idxprom69, !dbg !576
[Sink:]   %arrayidx70 = getelementptr inbounds i64, i64* %95, i64 %idxprom69, !dbg !576
DSINKGEP INSTRUCTION   %arrayidx70 = getelementptr inbounds i64, i64* %95, i64 %idxprom69, !dbg !576
[Sink:]   %arrayidx70 = getelementptr inbounds i64, i64* %95, i64 %idxprom69, !dbg !576
DSOURCEGEP INSTRUCTION   %arrayidx73 = getelementptr inbounds i64, i64* %97, i64 %idxprom72, !dbg !580
[Source:]   %arrayidx73 = getelementptr inbounds i64, i64* %97, i64 %idxprom72, !dbg !580
Creating ConsElem Map for :	Node0x6091f30 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSINKGEP INSTRUCTION   %arrayidx76 = getelementptr inbounds i64, i64* %100, i64 %idxprom75, !dbg !584
[Sink:]   %arrayidx76 = getelementptr inbounds i64, i64* %100, i64 %idxprom75, !dbg !584
DSINKGEP INSTRUCTION   %arrayidx76 = getelementptr inbounds i64, i64* %100, i64 %idxprom75, !dbg !584
[Sink:]   %arrayidx76 = getelementptr inbounds i64, i64* %100, i64 %idxprom75, !dbg !584
DSINKGEP INSTRUCTION   %arrayidx79 = getelementptr inbounds i64, i64* %103, i64 %idxprom78, !dbg !589
[Sink:]   %arrayidx79 = getelementptr inbounds i64, i64* %103, i64 %idxprom78, !dbg !589
DSINKGEP INSTRUCTION   %arrayidx79 = getelementptr inbounds i64, i64* %103, i64 %idxprom78, !dbg !589
[Sink:]   %arrayidx79 = getelementptr inbounds i64, i64* %103, i64 %idxprom78, !dbg !589
DSINKGEP INSTRUCTION   %arrayidx82 = getelementptr inbounds i64, i64* %105, i64 %idxprom81, !dbg !593
[Sink:]   %arrayidx82 = getelementptr inbounds i64, i64* %105, i64 %idxprom81, !dbg !593
DSINKGEP INSTRUCTION   %arrayidx82 = getelementptr inbounds i64, i64* %105, i64 %idxprom81, !dbg !593
[Sink:]   %arrayidx82 = getelementptr inbounds i64, i64* %105, i64 %idxprom81, !dbg !593
DSINKGEP INSTRUCTION   %arrayidx85 = getelementptr inbounds i64, i64* %108, i64 %idxprom84, !dbg !598
[Sink:]   %arrayidx85 = getelementptr inbounds i64, i64* %108, i64 %idxprom84, !dbg !598
DSINKGEP INSTRUCTION   %arrayidx85 = getelementptr inbounds i64, i64* %108, i64 %idxprom84, !dbg !598
[Sink:]   %arrayidx85 = getelementptr inbounds i64, i64* %108, i64 %idxprom84, !dbg !598
DSINKGEP INSTRUCTION   %arrayidx88 = getelementptr inbounds i64, i64* %110, i64 %idxprom87, !dbg !602
[Sink:]   %arrayidx88 = getelementptr inbounds i64, i64* %110, i64 %idxprom87, !dbg !602
DSINKGEP INSTRUCTION   %arrayidx88 = getelementptr inbounds i64, i64* %110, i64 %idxprom87, !dbg !602
[Sink:]   %arrayidx88 = getelementptr inbounds i64, i64* %110, i64 %idxprom87, !dbg !602
DSINKGEP INSTRUCTION   %arrayidx91 = getelementptr inbounds i64, i64* %113, i64 %idxprom90, !dbg !607
[Sink:]   %arrayidx91 = getelementptr inbounds i64, i64* %113, i64 %idxprom90, !dbg !607
DSINKGEP INSTRUCTION   %arrayidx91 = getelementptr inbounds i64, i64* %113, i64 %idxprom90, !dbg !607
[Sink:]   %arrayidx91 = getelementptr inbounds i64, i64* %113, i64 %idxprom90, !dbg !607
DSINKGEP INSTRUCTION   %arrayidx94 = getelementptr inbounds i64, i64* %116, i64 %idxprom93, !dbg !612
[Sink:]   %arrayidx94 = getelementptr inbounds i64, i64* %116, i64 %idxprom93, !dbg !612
DSINKGEP INSTRUCTION   %arrayidx94 = getelementptr inbounds i64, i64* %116, i64 %idxprom93, !dbg !612
[Sink:]   %arrayidx94 = getelementptr inbounds i64, i64* %116, i64 %idxprom93, !dbg !612
DSOURCEGEP INSTRUCTION   %arrayidx104 = getelementptr inbounds i64, i64* %122, i64 %idxprom103, !dbg !628
[Source:]   %arrayidx104 = getelementptr inbounds i64, i64* %122, i64 %idxprom103, !dbg !628
DSINKGEP INSTRUCTION   %arrayidx106 = getelementptr inbounds i64, i64* %125, i64 %idxprom105, !dbg !630
[Sink:]   %arrayidx106 = getelementptr inbounds i64, i64* %125, i64 %idxprom105, !dbg !630
DSINKGEP INSTRUCTION   %arrayidx106 = getelementptr inbounds i64, i64* %125, i64 %idxprom105, !dbg !630
[Sink:]   %arrayidx106 = getelementptr inbounds i64, i64* %125, i64 %idxprom105, !dbg !630
DSINKGEP INSTRUCTION   %arrayidx108 = getelementptr inbounds i64, i64* %127, i64 %idxprom107, !dbg !633
[Sink:]   %arrayidx108 = getelementptr inbounds i64, i64* %127, i64 %idxprom107, !dbg !633
DSINKGEP INSTRUCTION   %arrayidx108 = getelementptr inbounds i64, i64* %127, i64 %idxprom107, !dbg !633
[Sink:]   %arrayidx108 = getelementptr inbounds i64, i64* %127, i64 %idxprom107, !dbg !633
Running on BN_copy in context [BN_from_montgomery ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !381
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !381
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !380
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !387
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !387
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !386
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSOURCEGEP INSTRUCTION   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !390
[Source:]   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !390
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !389
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSOURCEGEP INSTRUCTION   %top5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !394
[Source:]   %top5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !394
StructType: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !392
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !413
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !413
 allocation intermediate:   %13 = load i64*, i64** %B, align 8, !dbg !413
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSOURCEGEP INSTRUCTION   %arrayidx7 = getelementptr inbounds i64, i64* %15, i64 1, !dbg !415
[Source:]   %arrayidx7 = getelementptr inbounds i64, i64* %15, i64 1, !dbg !415
 allocation intermediate:   %15 = load i64*, i64** %B, align 8, !dbg !415
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSOURCEGEP INSTRUCTION   %arrayidx8 = getelementptr inbounds i64, i64* %17, i64 2, !dbg !417
[Source:]   %arrayidx8 = getelementptr inbounds i64, i64* %17, i64 2, !dbg !417
 allocation intermediate:   %17 = load i64*, i64** %B, align 8, !dbg !417
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSOURCEGEP INSTRUCTION   %arrayidx9 = getelementptr inbounds i64, i64* %19, i64 3, !dbg !419
[Source:]   %arrayidx9 = getelementptr inbounds i64, i64* %19, i64 3, !dbg !419
 allocation intermediate:   %19 = load i64*, i64** %B, align 8, !dbg !419
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 3
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 3
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSINKGEP INSTRUCTION   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !422
[Sink:]   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !422
 allocation intermediate:   %22 = load i64*, i64** %A, align 8, !dbg !422
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !422
[Sink:]   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !422
 allocation intermediate:   %22 = load i64*, i64** %A, align 8, !dbg !422
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !425
[Sink:]   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !425
 allocation intermediate:   %24 = load i64*, i64** %A, align 8, !dbg !425
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !425
[Sink:]   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !425
 allocation intermediate:   %24 = load i64*, i64** %A, align 8, !dbg !425
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !428
[Sink:]   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !428
 allocation intermediate:   %26 = load i64*, i64** %A, align 8, !dbg !428
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !428
[Sink:]   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !428
 allocation intermediate:   %26 = load i64*, i64** %A, align 8, !dbg !428
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !431
[Sink:]   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !431
 allocation intermediate:   %28 = load i64*, i64** %A, align 8, !dbg !431
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 3
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 3
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !431
[Sink:]   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !431
 allocation intermediate:   %28 = load i64*, i64** %A, align 8, !dbg !431
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 3
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 3
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top15 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %32, i32 0, i32 1, !dbg !439
[Source:]   %top15 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %32, i32 0, i32 1, !dbg !439
StructType: allocation intermediate:   %32 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !438
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSOURCEGEP INSTRUCTION   %arrayidx16 = getelementptr inbounds i64, i64* %34, i64 2, !dbg !442
[Source:]   %arrayidx16 = getelementptr inbounds i64, i64* %34, i64 2, !dbg !442
 allocation intermediate:   %34 = load i64*, i64** %B, align 8, !dbg !442
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSINKGEP INSTRUCTION   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !444
[Sink:]   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !444
 allocation intermediate:   %36 = load i64*, i64** %A, align 8, !dbg !444
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !444
[Sink:]   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !444
 allocation intermediate:   %36 = load i64*, i64** %A, align 8, !dbg !444
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx19 = getelementptr inbounds i64, i64* %37, i64 1, !dbg !446
[Source:]   %arrayidx19 = getelementptr inbounds i64, i64* %37, i64 1, !dbg !446
 allocation intermediate:   %37 = load i64*, i64** %B, align 8, !dbg !446
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSINKGEP INSTRUCTION   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !447
[Sink:]   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !447
 allocation intermediate:   %39 = load i64*, i64** %A, align 8, !dbg !447
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !447
[Sink:]   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !447
 allocation intermediate:   %39 = load i64*, i64** %A, align 8, !dbg !447
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx22 = getelementptr inbounds i64, i64* %40, i64 0, !dbg !449
[Source:]   %arrayidx22 = getelementptr inbounds i64, i64* %40, i64 0, !dbg !449
 allocation intermediate:   %40 = load i64*, i64** %B, align 8, !dbg !449
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSINKGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !450
[Sink:]   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !450
 allocation intermediate:   %42 = load i64*, i64** %A, align 8, !dbg !450
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !450
[Sink:]   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !450
 allocation intermediate:   %42 = load i64*, i64** %A, align 8, !dbg !450
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top29 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %45, i32 0, i32 1, !dbg !461
[Source:]   %top29 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %45, i32 0, i32 1, !dbg !461
StructType: allocation intermediate:   %45 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !460
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSINKGEP INSTRUCTION   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !463
[Sink:]   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !463
StructType:::IS STRUCT TY:: allocation intermediate:   %47 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !462
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x6094a00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094a00:s0 -> Node0x608f450;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !463
[Sink:]   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !463
StructType:::IS STRUCT TY:: allocation intermediate:   %47 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !462
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x6094a00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094a00:s0 -> Node0x608f450;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %48, i32 0, i32 3, !dbg !466
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %48, i32 0, i32 3, !dbg !466
StructType: allocation intermediate:   %48 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !465
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSINKGEP INSTRUCTION   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !468
[Sink:]   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !468
StructType:::IS STRUCT TY:: allocation intermediate:   %50 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !467
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x6094a00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094a00:s0 -> Node0x608f450;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !468
[Sink:]   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !468
StructType:::IS STRUCT TY:: allocation intermediate:   %50 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !467
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x6094a00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094a00:s0 -> Node0x608f450;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on BN_from_montgomery_word in context [BN_from_montgomery ]
Using taint reachable signature for:   %call19 = call i64 @bn_mul_add_words(i64* %31, i64* %32, i32 %33, i64 %mul18), !dbg !462
RSINKGEP INSTRUCTION   %31 = load i64*, i64** %rp, align 8, !dbg !455
RSINKGEP INSTRUCTION   %32 = load i64*, i64** %np, align 8, !dbg !457
REACHABLE SOURCE:   %31 = load i64*, i64** %rp, align 8, !dbg !455
REACHABLE SOURCE:   %32 = load i64*, i64** %np, align 8, !dbg !457
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %31 = load i64*, i64** %rp, align 8, !dbg !455
RSINKGEP INSTRUCTION   %32 = load i64*, i64** %np, align 8, !dbg !457
Using taint reachable signature for:   %call47 = call i64 @bn_sub_words(i64* %69, i64* %70, i64* %71, i32 %72), !dbg !523
RSINKGEP INSTRUCTION   %69 = load i64*, i64** %rp, align 8, !dbg !519
RSINKGEP INSTRUCTION   %70 = load i64*, i64** %ap, align 8, !dbg !520
RSINKGEP INSTRUCTION   %71 = load i64*, i64** %np, align 8, !dbg !521
REACHABLE SOURCE:   %69 = load i64*, i64** %rp, align 8, !dbg !519
REACHABLE SOURCE:   %70 = load i64*, i64** %ap, align 8, !dbg !520
REACHABLE SOURCE:   %71 = load i64*, i64** %np, align 8, !dbg !521
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %69 = load i64*, i64** %rp, align 8, !dbg !519
RSINKGEP INSTRUCTION   %70 = load i64*, i64** %ap, align 8, !dbg !520
RSINKGEP INSTRUCTION   %71 = load i64*, i64** %np, align 8, !dbg !521
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 1, !dbg !391
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 1, !dbg !391
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %n, align 8, !dbg !390
=>  %n = alloca %struct.bignum_st*, align 8
FINAL:   %n = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7ef6170
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7ef61a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7ef67c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7ef68e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7ef6a00
DSINKGEP INSTRUCTION   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !399
[Sink:]   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !399
StructType:::IS STRUCT TY:: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %ret.addr, align 8, !dbg !397
=>  %ret.addr = alloca %struct.bignum_st*, align 8
FINAL:   %ret.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x60922b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60922b0:s0 -> Node0x60b09c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !399
[Sink:]   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !399
StructType:::IS STRUCT TY:: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %ret.addr, align 8, !dbg !397
=>  %ret.addr = alloca %struct.bignum_st*, align 8
FINAL:   %ret.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x60922b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60922b0:s0 -> Node0x60b09c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 3, !dbg !413
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 3, !dbg !413
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %n, align 8, !dbg !412
=>  %n = alloca %struct.bignum_st*, align 8
FINAL:   %n = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7ef6170
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7ef61a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7ef67c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7ef68e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7ef6a00
DSOURCEGEP INSTRUCTION   %neg5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 3, !dbg !415
[Source:]   %neg5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 3, !dbg !415
StructType: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !414
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[16,20]0x7efed20
DSINKGEP INSTRUCTION   %neg5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 3, !dbg !415
[Sink:]   %neg5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 3, !dbg !415
StructType:::IS STRUCT TY:: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !414
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x60904f0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60904f0:s0 -> Node0x60b09c0;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 3, !dbg !415
[Sink:]   %neg5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 3, !dbg !415
StructType:::IS STRUCT TY:: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !414
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x60904f0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60904f0:s0 -> Node0x60b09c0;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !418
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !418
StructType: allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %n, align 8, !dbg !417
=>  %n = alloca %struct.bignum_st*, align 8
FINAL:   %n = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7ef6170
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7ef61a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7ef67c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7ef68e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7ef6a00
DSOURCEGEP INSTRUCTION   %d6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %14, i32 0, i32 0, !dbg !421
[Source:]   %d6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %14, i32 0, i32 0, !dbg !421
StructType: allocation intermediate:   %14 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !420
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7efebd0
DSOURCEGEP INSTRUCTION   %top7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 1, !dbg !425
[Source:]   %top7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 1, !dbg !425
StructType: allocation intermediate:   %17 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !424
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7efec40
DSOURCEGEP INSTRUCTION   %top9 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %20, i32 0, i32 1, !dbg !432
[Source:]   %top9 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %20, i32 0, i32 1, !dbg !432
StructType: allocation intermediate:   %20 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !431
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x7efec40
DSINKGEP INSTRUCTION   %top12 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %26, i32 0, i32 1, !dbg !439
[Sink:]   %top12 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %26, i32 0, i32 1, !dbg !439
StructType:::IS STRUCT TY:: allocation intermediate:   %26 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !438
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x60904f0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60904f0:s0 -> Node0x60b09c0;
Trying to find element at offset 8
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top12 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %26, i32 0, i32 1, !dbg !439
[Sink:]   %top12 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %26, i32 0, i32 1, !dbg !439
StructType:::IS STRUCT TY:: allocation intermediate:   %26 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !438
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x60904f0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60904f0:s0 -> Node0x60b09c0;
Trying to find element at offset 8
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %arrayidx14 = getelementptr inbounds [2 x i64], [2 x i64]* %n013, i32 0, i64 0, !dbg !441
[Source:]   %arrayidx14 = getelementptr inbounds [2 x i64], [2 x i64]* %n013, i32 0, i64 0, !dbg !441
ArrayType: allocation intermediate:   %n013 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %27, i32 0, i32 4, !dbg !442
=>  %27 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !441
 allocation intermediate:   %27 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !441
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7ef6170
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7ef61a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7ef67c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7ef68e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7ef6a00
DSOURCEGEP INSTRUCTION   %arrayidx17 = getelementptr inbounds i64, i64* %34, i64 0, !dbg !459
[Source:]   %arrayidx17 = getelementptr inbounds i64, i64* %34, i64 0, !dbg !459
 allocation intermediate:   %34 = load i64*, i64** %rp, align 8, !dbg !459
=>  %rp = alloca i64*, align 8
FINAL:   %rp = alloca i64*, align 8
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
DSOURCEGEP INSTRUCTION   %arrayidx21 = getelementptr inbounds i64, i64* %40, i64 %idxprom20, !dbg !468
[Source:]   %arrayidx21 = getelementptr inbounds i64, i64* %40, i64 %idxprom20, !dbg !468
DSOURCEGEP INSTRUCTION   %arrayidx24 = getelementptr inbounds i64, i64* %44, i64 %idxprom23, !dbg !473
[Source:]   %arrayidx24 = getelementptr inbounds i64, i64* %44, i64 %idxprom23, !dbg !473
DSOURCEGEP INSTRUCTION   %arrayidx29 = getelementptr inbounds i64, i64* %49, i64 %idxprom28, !dbg !479
[Source:]   %arrayidx29 = getelementptr inbounds i64, i64* %49, i64 %idxprom28, !dbg !479
DSINKGEP INSTRUCTION   %arrayidx34 = getelementptr inbounds i64, i64* %54, i64 %idxprom33, !dbg !485
[Sink:]   %arrayidx34 = getelementptr inbounds i64, i64* %54, i64 %idxprom33, !dbg !485
DSINKGEP INSTRUCTION   %arrayidx34 = getelementptr inbounds i64, i64* %54, i64 %idxprom33, !dbg !485
[Sink:]   %arrayidx34 = getelementptr inbounds i64, i64* %54, i64 %idxprom33, !dbg !485
DSINKGEP INSTRUCTION   %top40 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %60, i32 0, i32 1, !dbg !500
[Sink:]   %top40 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %60, i32 0, i32 1, !dbg !500
StructType:::IS STRUCT TY:: allocation intermediate:   %60 = load %struct.bignum_st*, %struct.bignum_st** %ret.addr, align 8, !dbg !499
=>  %ret.addr = alloca %struct.bignum_st*, align 8
FINAL:   %ret.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x60922b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60922b0:s0 -> Node0x60b09c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top40 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %60, i32 0, i32 1, !dbg !500
[Sink:]   %top40 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %60, i32 0, i32 1, !dbg !500
StructType:::IS STRUCT TY:: allocation intermediate:   %60 = load %struct.bignum_st*, %struct.bignum_st** %ret.addr, align 8, !dbg !499
=>  %ret.addr = alloca %struct.bignum_st*, align 8
FINAL:   %ret.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x60922b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60922b0:s0 -> Node0x60b09c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %neg41 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %61, i32 0, i32 3, !dbg !503
[Source:]   %neg41 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %61, i32 0, i32 3, !dbg !503
StructType: allocation intermediate:   %61 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !502
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[16,20]0x7efed20
DSINKGEP INSTRUCTION   %neg42 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %63, i32 0, i32 3, !dbg !505
[Sink:]   %neg42 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %63, i32 0, i32 3, !dbg !505
StructType:::IS STRUCT TY:: allocation intermediate:   %63 = load %struct.bignum_st*, %struct.bignum_st** %ret.addr, align 8, !dbg !504
=>  %ret.addr = alloca %struct.bignum_st*, align 8
FINAL:   %ret.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x60922b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60922b0:s0 -> Node0x60b09c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg42 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %63, i32 0, i32 3, !dbg !505
[Sink:]   %neg42 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %63, i32 0, i32 3, !dbg !505
StructType:::IS STRUCT TY:: allocation intermediate:   %63 = load %struct.bignum_st*, %struct.bignum_st** %ret.addr, align 8, !dbg !504
=>  %ret.addr = alloca %struct.bignum_st*, align 8
FINAL:   %ret.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x60922b0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60922b0:s0 -> Node0x60b09c0;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %d43 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %64, i32 0, i32 0, !dbg !508
[Source:]   %d43 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %64, i32 0, i32 0, !dbg !508
StructType: allocation intermediate:   %64 = load %struct.bignum_st*, %struct.bignum_st** %ret.addr, align 8, !dbg !507
=>  %ret.addr = alloca %struct.bignum_st*, align 8
FINAL:   %ret.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7ef6170
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7ef61a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7ef67c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7ef68e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7ef6a00
DSOURCEGEP INSTRUCTION   %d45 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %67, i32 0, i32 0, !dbg !512
[Source:]   %d45 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %67, i32 0, i32 0, !dbg !512
StructType: allocation intermediate:   %67 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !511
=>  %r.addr = alloca %struct.bignum_st*, align 8
FINAL:   %r.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x7efebd0
DSOURCEGEP INSTRUCTION   %arrayidx61 = getelementptr inbounds i64, i64* %86, i64 %idxprom60, !dbg !564
[Source:]   %arrayidx61 = getelementptr inbounds i64, i64* %86, i64 %idxprom60, !dbg !564
DSOURCEGEP INSTRUCTION   %arrayidx64 = getelementptr inbounds i64, i64* %89, i64 %idxprom63, !dbg !568
[Source:]   %arrayidx64 = getelementptr inbounds i64, i64* %89, i64 %idxprom63, !dbg !568
DSOURCEGEP INSTRUCTION   %arrayidx67 = getelementptr inbounds i64, i64* %92, i64 %idxprom66, !dbg !572
[Source:]   %arrayidx67 = getelementptr inbounds i64, i64* %92, i64 %idxprom66, !dbg !572
DSINKGEP INSTRUCTION   %arrayidx70 = getelementptr inbounds i64, i64* %95, i64 %idxprom69, !dbg !576
[Sink:]   %arrayidx70 = getelementptr inbounds i64, i64* %95, i64 %idxprom69, !dbg !576
DSINKGEP INSTRUCTION   %arrayidx70 = getelementptr inbounds i64, i64* %95, i64 %idxprom69, !dbg !576
[Sink:]   %arrayidx70 = getelementptr inbounds i64, i64* %95, i64 %idxprom69, !dbg !576
DSOURCEGEP INSTRUCTION   %arrayidx73 = getelementptr inbounds i64, i64* %97, i64 %idxprom72, !dbg !580
[Source:]   %arrayidx73 = getelementptr inbounds i64, i64* %97, i64 %idxprom72, !dbg !580
DSINKGEP INSTRUCTION   %arrayidx76 = getelementptr inbounds i64, i64* %100, i64 %idxprom75, !dbg !584
[Sink:]   %arrayidx76 = getelementptr inbounds i64, i64* %100, i64 %idxprom75, !dbg !584
DSINKGEP INSTRUCTION   %arrayidx76 = getelementptr inbounds i64, i64* %100, i64 %idxprom75, !dbg !584
[Sink:]   %arrayidx76 = getelementptr inbounds i64, i64* %100, i64 %idxprom75, !dbg !584
DSINKGEP INSTRUCTION   %arrayidx79 = getelementptr inbounds i64, i64* %103, i64 %idxprom78, !dbg !589
[Sink:]   %arrayidx79 = getelementptr inbounds i64, i64* %103, i64 %idxprom78, !dbg !589
DSINKGEP INSTRUCTION   %arrayidx79 = getelementptr inbounds i64, i64* %103, i64 %idxprom78, !dbg !589
[Sink:]   %arrayidx79 = getelementptr inbounds i64, i64* %103, i64 %idxprom78, !dbg !589
DSINKGEP INSTRUCTION   %arrayidx82 = getelementptr inbounds i64, i64* %105, i64 %idxprom81, !dbg !593
[Sink:]   %arrayidx82 = getelementptr inbounds i64, i64* %105, i64 %idxprom81, !dbg !593
DSINKGEP INSTRUCTION   %arrayidx82 = getelementptr inbounds i64, i64* %105, i64 %idxprom81, !dbg !593
[Sink:]   %arrayidx82 = getelementptr inbounds i64, i64* %105, i64 %idxprom81, !dbg !593
DSINKGEP INSTRUCTION   %arrayidx85 = getelementptr inbounds i64, i64* %108, i64 %idxprom84, !dbg !598
[Sink:]   %arrayidx85 = getelementptr inbounds i64, i64* %108, i64 %idxprom84, !dbg !598
DSINKGEP INSTRUCTION   %arrayidx85 = getelementptr inbounds i64, i64* %108, i64 %idxprom84, !dbg !598
[Sink:]   %arrayidx85 = getelementptr inbounds i64, i64* %108, i64 %idxprom84, !dbg !598
DSINKGEP INSTRUCTION   %arrayidx88 = getelementptr inbounds i64, i64* %110, i64 %idxprom87, !dbg !602
[Sink:]   %arrayidx88 = getelementptr inbounds i64, i64* %110, i64 %idxprom87, !dbg !602
DSINKGEP INSTRUCTION   %arrayidx88 = getelementptr inbounds i64, i64* %110, i64 %idxprom87, !dbg !602
[Sink:]   %arrayidx88 = getelementptr inbounds i64, i64* %110, i64 %idxprom87, !dbg !602
DSINKGEP INSTRUCTION   %arrayidx91 = getelementptr inbounds i64, i64* %113, i64 %idxprom90, !dbg !607
[Sink:]   %arrayidx91 = getelementptr inbounds i64, i64* %113, i64 %idxprom90, !dbg !607
DSINKGEP INSTRUCTION   %arrayidx91 = getelementptr inbounds i64, i64* %113, i64 %idxprom90, !dbg !607
[Sink:]   %arrayidx91 = getelementptr inbounds i64, i64* %113, i64 %idxprom90, !dbg !607
DSINKGEP INSTRUCTION   %arrayidx94 = getelementptr inbounds i64, i64* %116, i64 %idxprom93, !dbg !612
[Sink:]   %arrayidx94 = getelementptr inbounds i64, i64* %116, i64 %idxprom93, !dbg !612
DSINKGEP INSTRUCTION   %arrayidx94 = getelementptr inbounds i64, i64* %116, i64 %idxprom93, !dbg !612
[Sink:]   %arrayidx94 = getelementptr inbounds i64, i64* %116, i64 %idxprom93, !dbg !612
DSOURCEGEP INSTRUCTION   %arrayidx104 = getelementptr inbounds i64, i64* %122, i64 %idxprom103, !dbg !628
[Source:]   %arrayidx104 = getelementptr inbounds i64, i64* %122, i64 %idxprom103, !dbg !628
DSINKGEP INSTRUCTION   %arrayidx106 = getelementptr inbounds i64, i64* %125, i64 %idxprom105, !dbg !630
[Sink:]   %arrayidx106 = getelementptr inbounds i64, i64* %125, i64 %idxprom105, !dbg !630
DSINKGEP INSTRUCTION   %arrayidx106 = getelementptr inbounds i64, i64* %125, i64 %idxprom105, !dbg !630
[Sink:]   %arrayidx106 = getelementptr inbounds i64, i64* %125, i64 %idxprom105, !dbg !630
DSINKGEP INSTRUCTION   %arrayidx108 = getelementptr inbounds i64, i64* %127, i64 %idxprom107, !dbg !633
[Sink:]   %arrayidx108 = getelementptr inbounds i64, i64* %127, i64 %idxprom107, !dbg !633
DSINKGEP INSTRUCTION   %arrayidx108 = getelementptr inbounds i64, i64* %127, i64 %idxprom107, !dbg !633
[Sink:]   %arrayidx108 = getelementptr inbounds i64, i64* %127, i64 %idxprom107, !dbg !633
Running on BN_clear_free in context [BN_MONT_CTX_free ]
Using taint reachable signature for:   call void @OPENSSL_cleanse(i8* %5, i64 %mul), !dbg !381
RSINKGEP INSTRUCTION   %5 = bitcast i64* %4 to i8*, !dbg !375
REACHABLE SOURCE:   %5 = bitcast i64* %4 to i8*, !dbg !375
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %5 = bitcast i64* %4 to i8*, !dbg !375
Using taint reachable signature for:   call void @OPENSSL_cleanse(i8* %12, i64 24), !dbg !393
RSINKGEP INSTRUCTION   %12 = bitcast %struct.bignum_st* %11 to i8*, !dbg !392
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %12 = bitcast %struct.bignum_st* %11 to i8*, !dbg !392
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %12 = bitcast %struct.bignum_st* %11 to i8*, !dbg !392
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   call void @CRYPTO_free(i8* %15, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 195), !dbg !397
RSINKGEP INSTRUCTION   %15 = bitcast %struct.bignum_st* %14 to i8*, !dbg !397
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Creating ConsElem Map for :	Node0x607fb90 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
REACHABLE SOURCE:   %15 = bitcast %struct.bignum_st* %14 to i8*, !dbg !397
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x607fb90 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %15 = bitcast %struct.bignum_st* %14 to i8*, !dbg !397
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Creating ConsElem Map for :	Node0x609a3f0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x609a3f0:s0 -> Node0x6099830;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x6099830 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6099830:s0 -> Node0x60b2c80;
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 0, !dbg !372
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 0, !dbg !372
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !370
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x8017c30
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x8017d90
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x85e9940
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x85e9a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x85e9b40
DSOURCEGEP INSTRUCTION   %d3 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !377
[Source:]   %d3 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !377
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x8017c30
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x8017d90
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x85e9940
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x85e9a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x85e9b40
DSOURCEGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 2, !dbg !379
[Source:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 2, !dbg !379
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !378
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x8017c30
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x8017d90
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x85e9940
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x85e9a60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x85e9b40
Creating ConsElem Map for :	Node0x609a530 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Running on BN_is_odd in context [BN_mod_exp_mont_consttime ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !364
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !364
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !363
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[8,12]0x60da890
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !369
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !369
StructType: allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !367
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x621f490
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %3, i64 0, !dbg !370
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %3, i64 0, !dbg !370
 allocation intermediate:   %3 = load i64*, i64** %d, align 8, !dbg !369
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !369
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !369
=>  %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !367
 allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !367
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x621f490
Running on BN_num_bits in context [BN_mod_exp_mont_consttime ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !366
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !366
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !365
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x6610ef0
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !377
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !377
StructType: allocation intermediate:   %5 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !376
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x6610e80
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !376
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !376
Running on BN_is_one in context [BN_mod_exp_mont_consttime ]
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !368
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !368
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !366
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[16,20]0x61f5e50
Running on BN_set_word in context [BN_mod_exp_mont_consttime ]
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !372
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !372
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !371
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !372
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !372
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !371
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x6676440
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x6676560
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x6676680
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69bd5a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x6a2efa0
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !375
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !375
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !376
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !375
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !375
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !376
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !380
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !380
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !379
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !380
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !380
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !379
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on BN_MONT_CTX_new in context [BN_mod_exp_mont_consttime ]
Using taint reachable signature for:   %call = call i8* @CRYPTO_malloc(i64 104, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0), i32 217), !dbg !363
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
	Node0x6099530 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str38 = private unnamed_addr constant [10 x i8] c\"bn_mont.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 5, !dbg !372
[Sink:]   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 5, !dbg !372
StructType:::IS STRUCT TY:: allocation intermediate:   %2 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ret, align 8, !dbg !371
=>  %ret = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %ret = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 96
	Node0x6097590 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6097590:s0 -> Node0x60966b0;
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Tainting at offset: 96
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 5, !dbg !372
[Sink:]   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 5, !dbg !372
StructType:::IS STRUCT TY:: allocation intermediate:   %2 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %ret, align 8, !dbg !371
=>  %ret = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %ret = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 96
	Node0x6097590 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6097590:s0 -> Node0x60966b0;
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Adding 6 elements
Tainting at offset: 96
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on BN_MONT_CTX_set in context [BN_mod_exp_mont_consttime ]
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %1), !dbg !379
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !378
REACHABLE SOURCE:   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !378
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !378
Using taint reachable signature for:   %call1 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %2), !dbg !382
RSINKGEP INSTRUCTION   %2 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !380
REACHABLE SOURCE:   %2 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !380
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %2 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !380
Using taint reachable signature for:   %call25 = call %struct.bignum_st* @BN_mod_inverse(%struct.bignum_st* %16, %struct.bignum_st* %17, %struct.bignum_st* %tmod, %struct.bignum_ctx* %18), !dbg !448
RSINKGEP INSTRUCTION   %16 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !444
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !447
RSINKGEP INSTRUCTION   %17 = load %struct.bignum_st*, %struct.bignum_st** %R, align 8, !dbg !446
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %tmod = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %16 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !444
REACHABLE SOURCE:   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !447
REACHABLE SOURCE:   %17 = load %struct.bignum_st*, %struct.bignum_st** %R, align 8, !dbg !446
REACHABLE SOURCE:   %tmod = alloca %struct.bignum_st, align 8
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %16 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !444
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !447
RSINKGEP INSTRUCTION   %17 = load %struct.bignum_st*, %struct.bignum_st** %R, align 8, !dbg !446
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %tmod = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call29 = call i32 @BN_lshift(%struct.bignum_st* %19, %struct.bignum_st* %20, i32 64), !dbg !455
RSINKGEP INSTRUCTION   %19 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !452
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %20 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !454
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %19 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !452
REACHABLE SOURCE:   %20 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !454
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %19 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !452
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %20 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !454
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call36 = call i32 @BN_sub_word(%struct.bignum_st* %22, i64 1), !dbg !465
RSINKGEP INSTRUCTION   %22 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !462
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %22 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !462
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %22 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !462
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call45 = call i32 @BN_div(%struct.bignum_st* %24, %struct.bignum_st* null, %struct.bignum_st* %25, %struct.bignum_st* %tmod, %struct.bignum_ctx* %26), !dbg !479
RSINKGEP INSTRUCTION   %24 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !475
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION %struct.bignum_st* null
RSINKGEP INSTRUCTION   %26 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !478
RSINKGEP INSTRUCTION   %25 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !477
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %tmod = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %24 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !475
REACHABLE SOURCE: %struct.bignum_st* null
REACHABLE SOURCE:   %26 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !478
REACHABLE SOURCE:   %25 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !477
REACHABLE SOURCE:   %tmod = alloca %struct.bignum_st, align 8
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %24 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !475
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION %struct.bignum_st* null
RSINKGEP INSTRUCTION   %26 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !478
RSINKGEP INSTRUCTION   %25 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !477
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %tmod = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call69 = call i32 @BN_div(%struct.bignum_st* null, %struct.bignum_st* %RR66, %struct.bignum_st* %RR67, %struct.bignum_st* %N68, %struct.bignum_ctx* %41), !dbg !511
RSINKGEP INSTRUCTION %struct.bignum_st* null
RSINKGEP INSTRUCTION   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !511
[Sink:]   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !511
StructType:::IS STRUCT TY:: allocation intermediate:   %38 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !511
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !511
[Sink:]   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !511
StructType:::IS STRUCT TY:: allocation intermediate:   %39 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !511
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !511
[Sink:]   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !511
StructType:::IS STRUCT TY:: allocation intermediate:   %40 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !511
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 2
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %41 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !511
REACHABLE SOURCE: %struct.bignum_st* null
REACHABLE SOURCE:   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !511
REACHABLE SOURCE:   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !511
REACHABLE SOURCE:   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !511
REACHABLE SOURCE:   %41 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !511
RSOURCEGEP INSTRUCTION   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !511
[Source:]   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !511
StructType: allocation intermediate:   %38 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !511
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x6c70660
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x6c70660
RSOURCEGEP INSTRUCTION   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !511
[Source:]   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !511
StructType: allocation intermediate:   %39 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !511
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x6c70660
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x6c70660
RSOURCEGEP INSTRUCTION   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !511
[Source:]   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !511
StructType: allocation intermediate:   %40 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !511
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x6c70660
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x6c70660
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION %struct.bignum_st* null
RSINKGEP INSTRUCTION   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !511
[Sink:]   %RR66 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %38, i32 0, i32 1, !dbg !511
StructType:::IS STRUCT TY:: allocation intermediate:   %38 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !511
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !511
[Sink:]   %RR67 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %39, i32 0, i32 1, !dbg !511
StructType:::IS STRUCT TY:: allocation intermediate:   %39 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !511
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !511
[Sink:]   %N68 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %40, i32 0, i32 2, !dbg !511
StructType:::IS STRUCT TY:: allocation intermediate:   %40 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !511
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 2
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %41 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !511
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %42), !dbg !518
RSINKGEP INSTRUCTION   %42 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !517
REACHABLE SOURCE:   %42 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !517
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %42 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !517
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %N8, i32 0, i32 3, !dbg !399
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %N8, i32 0, i32 3, !dbg !399
StructType:::IS STRUCT TY:: allocation intermediate:   %N8 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %6, i32 0, i32 2, !dbg !398
=>  %6 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !397
 allocation intermediate:   %6 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !397
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 16
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %N8, i32 0, i32 3, !dbg !399
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %N8, i32 0, i32 3, !dbg !399
StructType:::IS STRUCT TY:: allocation intermediate:   %N8 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %6, i32 0, i32 2, !dbg !398
=>  %6 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !397
 allocation intermediate:   %6 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !397
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 16
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 0, !dbg !408
[Sink:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 0, !dbg !408
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 0, !dbg !408
[Sink:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 0, !dbg !408
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 2, !dbg !410
[Sink:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 2, !dbg !410
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 12
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 2, !dbg !410
[Sink:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 2, !dbg !410
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 12
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg9 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 3, !dbg !412
[Sink:]   %neg9 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 3, !dbg !412
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg9 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 3, !dbg !412
[Sink:]   %neg9 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 3, !dbg !412
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %ri = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %9, i32 0, i32 0, !dbg !426
[Sink:]   %ri = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %9, i32 0, i32 0, !dbg !426
StructType:::IS STRUCT TY:: allocation intermediate:   %9 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !425
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 0
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %ri = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %9, i32 0, i32 0, !dbg !426
[Sink:]   %ri = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %9, i32 0, i32 0, !dbg !426
StructType:::IS STRUCT TY:: allocation intermediate:   %9 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !425
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 0
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %d20 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !435
[Source:]   %d20 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !435
StructType: allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %mod.addr, align 8, !dbg !434
=>  %mod.addr = alloca %struct.bignum_st*, align 8
FINAL:   %mod.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x6c53880
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !434
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !434
 allocation intermediate:   %13 = load i64*, i64** %d20, align 8, !dbg !435
=>  %d20 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !435
 allocation intermediate:   %d20 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !435
=>  %12 = load %struct.bignum_st*, %struct.bignum_st** %mod.addr, align 8, !dbg !434
 allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %mod.addr, align 8, !dbg !434
=>  %mod.addr = alloca %struct.bignum_st*, align 8
FINAL:   %mod.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x6c53880
DSINKGEP INSTRUCTION   %arrayidx21 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !436
[Sink:]   %arrayidx21 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !436
ArrayType:FINAL:   %buf = alloca [2 x i64], align 16
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx21 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !436
[Sink:]   %arrayidx21 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !436
ArrayType:FINAL:   %buf = alloca [2 x i64], align 16
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx22 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 1, !dbg !438
[Sink:]   %arrayidx22 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 1, !dbg !438
ArrayType:FINAL:   %buf = alloca [2 x i64], align 16
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx22 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 1, !dbg !438
[Sink:]   %arrayidx22 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 1, !dbg !438
ArrayType:FINAL:   %buf = alloca [2 x i64], align 16
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !440
[Source:]   %arrayidx23 = getelementptr inbounds [2 x i64], [2 x i64]* %buf, i32 0, i64 0, !dbg !440
ArrayType:FINAL:   %buf = alloca [2 x i64], align 16
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 1, !dbg !442
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 1, !dbg !442
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 1, !dbg !442
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmod, i32 0, i32 1, !dbg !442
StructType:::IS STRUCT TY::FINAL:   %tmod = alloca %struct.bignum_st, align 8
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %top49 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %27, i32 0, i32 1, !dbg !483
[Source:]   %top49 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %27, i32 0, i32 1, !dbg !483
StructType: allocation intermediate:   %27 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !482
=>  %Ri = alloca %struct.bignum_st*, align 8
FINAL:   %Ri = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x6766b10
DSOURCEGEP INSTRUCTION   %d51 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %29, i32 0, i32 0, !dbg !488
[Source:]   %d51 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %29, i32 0, i32 0, !dbg !488
StructType: allocation intermediate:   %29 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !486
=>  %Ri = alloca %struct.bignum_st*, align 8
FINAL:   %Ri = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x6766aa0
DSOURCEGEP INSTRUCTION   %arrayidx52 = getelementptr inbounds i64, i64* %30, i64 0, !dbg !489
[Source:]   %arrayidx52 = getelementptr inbounds i64, i64* %30, i64 0, !dbg !489
 allocation intermediate:   %30 = load i64*, i64** %d51, align 8, !dbg !488
=>  %d51 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %29, i32 0, i32 0, !dbg !488
 allocation intermediate:   %d51 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %29, i32 0, i32 0, !dbg !488
=>  %29 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !486
 allocation intermediate:   %29 = load %struct.bignum_st*, %struct.bignum_st** %Ri, align 8, !dbg !486
=>  %Ri = alloca %struct.bignum_st*, align 8
FINAL:   %Ri = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x6766aa0
DSINKGEP INSTRUCTION   %arrayidx54 = getelementptr inbounds [2 x i64], [2 x i64]* %n0, i32 0, i64 0, !dbg !496
[Sink:]   %arrayidx54 = getelementptr inbounds [2 x i64], [2 x i64]* %n0, i32 0, i64 0, !dbg !496
ArrayType: allocation intermediate:   %n0 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %32, i32 0, i32 4, !dbg !495
=>  %32 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !492
 allocation intermediate:   %32 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !492
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 0
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %arrayidx54 = getelementptr inbounds [2 x i64], [2 x i64]* %n0, i32 0, i64 0, !dbg !496
[Sink:]   %arrayidx54 = getelementptr inbounds [2 x i64], [2 x i64]* %n0, i32 0, i64 0, !dbg !496
ArrayType: allocation intermediate:   %n0 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %32, i32 0, i32 4, !dbg !495
=>  %32 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !492
 allocation intermediate:   %32 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !492
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 0
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %arrayidx56 = getelementptr inbounds [2 x i64], [2 x i64]* %n055, i32 0, i64 1, !dbg !498
[Sink:]   %arrayidx56 = getelementptr inbounds [2 x i64], [2 x i64]* %n055, i32 0, i64 1, !dbg !498
ArrayType: allocation intermediate:   %n055 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %33, i32 0, i32 4, !dbg !499
=>  %33 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !498
 allocation intermediate:   %33 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !498
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 1
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %arrayidx56 = getelementptr inbounds [2 x i64], [2 x i64]* %n055, i32 0, i64 1, !dbg !498
[Sink:]   %arrayidx56 = getelementptr inbounds [2 x i64], [2 x i64]* %n055, i32 0, i64 1, !dbg !498
ArrayType: allocation intermediate:   %n055 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %33, i32 0, i32 4, !dbg !499
=>  %33 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !498
 allocation intermediate:   %33 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !498
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 1
	Node0x609ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x609ca80:s0 -> Node0x6099630;
Adding 1 elements
Tainting at offset: 1
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %ri60 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %36, i32 0, i32 0, !dbg !506
[Source:]   %ri60 = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %36, i32 0, i32 0, !dbg !506
StructType: allocation intermediate:   %36 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !505
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x6c70660
Running on BN_value_one in context [BN_mod_exp_mont_consttime ]
Running on BN_to_montgomery in context [BN_mod_exp_mont_consttime ]
Running on BN_ucmp in context [BN_mod_exp_mont_consttime ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !376
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !376
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x6a2def0
DSOURCEGEP INSTRUCTION   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 1, !dbg !378
[Source:]   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 1, !dbg !378
StructType: allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !377
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x6cc3460
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x6cc3540
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x6cc3660
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x6cc3780
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x741ae80
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !388
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !388
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !387
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x6a2dec0
DSOURCEGEP INSTRUCTION   %d2 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !391
[Source:]   %d2 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !391
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !390
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x6cc3460
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x6cc3540
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x6cc3660
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x6cc3780
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x741ae80
DSOURCEGEP INSTRUCTION   %top3 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !395
[Source:]   %top3 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !395
StructType: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !393
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x6a2def0
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !407
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !407
DSOURCEGEP INSTRUCTION   %arrayidx7 = getelementptr inbounds i64, i64* %17, i64 %idxprom6, !dbg !410
[Source:]   %arrayidx7 = getelementptr inbounds i64, i64* %17, i64 %idxprom6, !dbg !410
Running on MOD_EXP_CTIME_COPY_TO_PREBUF in context [BN_mod_exp_mont_consttime ]
Creating ConsElem Map for :	Node0x60ae490 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60ae490:s0 -> Node0x60ae250;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60ae250 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60ae250:s0 -> Node0x60b3540;
Creating ConsElem Map for :	Node0x60ae550 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60ae610 [shape=record,shape=Mrecord,label="{0: i8*,  : SMR\n|{<s0>0}}"];
	Node0x60ae610:s0 -> Node0x60b3540;
EDGE: [0: tymap-size 1]:i8
	Node0x60b3540 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x60ae6d0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60ae790 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60ae9d0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60aea90 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x60aea90:s0 -> Node0x60b3540;
EDGE: [0: tymap-size 1]:i64
	Node0x60b3540 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
DSOURCEGEP INSTRUCTION   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !386
[Source:]   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !386
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !385
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[8,12]0x876ba90
DSOURCEGEP INSTRUCTION   %top2 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !390
[Source:]   %top2 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !390
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !389
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[8,12]0x876ba90
Creating ConsElem Map for :	Node0x60ae850 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60ae910 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !408
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !408
StructType: allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !407
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[0,8]0x876ba60
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %13, i64 %idxprom, !dbg !407
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %13, i64 %idxprom, !dbg !407
DSINKGEP INSTRUCTION   %arrayidx5 = getelementptr inbounds i64, i64* %16, i64 %idxprom4, !dbg !410
[Sink:]   %arrayidx5 = getelementptr inbounds i64, i64* %16, i64 %idxprom4, !dbg !410
DSINKGEP INSTRUCTION   %arrayidx5 = getelementptr inbounds i64, i64* %16, i64 %idxprom4, !dbg !410
[Sink:]   %arrayidx5 = getelementptr inbounds i64, i64* %16, i64 %idxprom4, !dbg !410
Running on BN_mod_mul_montgomery in context [BN_mod_exp_mont_consttime ]
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %0), !dbg !376
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !375
REACHABLE SOURCE:   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !375
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !375
Using taint reachable signature for:   %call = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %1), !dbg !378
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !377
REACHABLE SOURCE:   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !377
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !377
Using taint reachable signature for:   %call4 = call i32 @BN_sqr(%struct.bignum_st* %5, %struct.bignum_st* %6, %struct.bignum_ctx* %7), !dbg !395
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !394
RSINKGEP INSTRUCTION   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !393
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %5 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !390
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !394
REACHABLE SOURCE:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !393
REACHABLE SOURCE:   %5 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !390
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !394
RSINKGEP INSTRUCTION   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !393
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %5 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !390
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call7 = call i32 @BN_mul(%struct.bignum_st* %8, %struct.bignum_st* %9, %struct.bignum_st* %10, %struct.bignum_ctx* %11), !dbg !405
RSINKGEP INSTRUCTION   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !404
RSINKGEP INSTRUCTION   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !403
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !402
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %8 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !399
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !404
REACHABLE SOURCE:   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !403
REACHABLE SOURCE:   %9 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !402
REACHABLE SOURCE:   %8 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !399
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !404
RSINKGEP INSTRUCTION   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !403
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !402
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %8 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !399
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %15), !dbg !418
RSINKGEP INSTRUCTION   %15 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !417
REACHABLE SOURCE:   %15 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !417
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %15 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !417
Running on BN_is_bit_set in context [BN_mod_exp_mont_consttime ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 1, !dbg !382
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 1, !dbg !382
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !380
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  20: i32,  : CRE[8,12]0x69bbc80
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 0, !dbg !389
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 0, !dbg !389
StructType: allocation intermediate:   %7 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !388
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  20: i32,  : CRE[0,8]0x69bbce0
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %8, i64 %idxprom, !dbg !388
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %8, i64 %idxprom, !dbg !388
Running on MOD_EXP_CTIME_COPY_FROM_PREBUF in context [BN_mod_exp_mont_consttime ]
Creating ConsElem Map for :	Node0x60af540 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60af540:s0 -> Node0x60af240;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60af240 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60af240:s0 -> Node0x60c0870;
Creating ConsElem Map for :	Node0x60af680 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60af7c0 [shape=record,shape=Mrecord,label="{0: i8*,  : SMR\n|{<s0>0}}"];
	Node0x60af7c0:s0 -> Node0x60c0870;
EDGE: [0: tymap-size 1]:i8
	Node0x60c0870 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x60af940 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60afa80 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60afe40 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60aff80 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x60aff80:s0 -> Node0x60c0870;
EDGE: [0: tymap-size 1]:i64
	Node0x60c0870 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x60af480 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60afbc0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60b0100 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60afd00 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %11, i64 %idxprom, !dbg !420
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %11, i64 %idxprom, !dbg !420
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %19, i32 0, i32 0, !dbg !435
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %19, i32 0, i32 0, !dbg !435
StructType: allocation intermediate:   %19 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !434
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[0,8]0x893f0b0
DSINKGEP INSTRUCTION   %arrayidx10 = getelementptr inbounds i64, i64* %20, i64 %idxprom9, !dbg !434
[Sink:]   %arrayidx10 = getelementptr inbounds i64, i64* %20, i64 %idxprom9, !dbg !434
DSINKGEP INSTRUCTION   %arrayidx10 = getelementptr inbounds i64, i64* %20, i64 %idxprom9, !dbg !434
[Sink:]   %arrayidx10 = getelementptr inbounds i64, i64* %20, i64 %idxprom9, !dbg !434
Creating ConsElem Map for :	Node0x60b0240 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60b0380 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60b04c0 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60b0600 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60b0740 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60b0880 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx45 = getelementptr inbounds i64, i64* %39, i64 %idxprom44, !dbg !517
[Source:]   %arrayidx45 = getelementptr inbounds i64, i64* %39, i64 %idxprom44, !dbg !517
DSOURCEGEP INSTRUCTION   %arrayidx50 = getelementptr inbounds i64, i64* %44, i64 %idxprom49, !dbg !524
[Source:]   %arrayidx50 = getelementptr inbounds i64, i64* %44, i64 %idxprom49, !dbg !524
DSOURCEGEP INSTRUCTION   %arrayidx56 = getelementptr inbounds i64, i64* %49, i64 %idxprom55, !dbg !532
[Source:]   %arrayidx56 = getelementptr inbounds i64, i64* %49, i64 %idxprom55, !dbg !532
DSOURCEGEP INSTRUCTION   %arrayidx62 = getelementptr inbounds i64, i64* %54, i64 %idxprom61, !dbg !540
[Source:]   %arrayidx62 = getelementptr inbounds i64, i64* %54, i64 %idxprom61, !dbg !540
DSOURCEGEP INSTRUCTION   %d75 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %63, i32 0, i32 0, !dbg !558
[Source:]   %d75 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %63, i32 0, i32 0, !dbg !558
StructType: allocation intermediate:   %63 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !557
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[0,8]0x893f0b0
DSINKGEP INSTRUCTION   %arrayidx76 = getelementptr inbounds i64, i64* %64, i64 %idxprom74, !dbg !557
[Sink:]   %arrayidx76 = getelementptr inbounds i64, i64* %64, i64 %idxprom74, !dbg !557
DSINKGEP INSTRUCTION   %arrayidx76 = getelementptr inbounds i64, i64* %64, i64 %idxprom74, !dbg !557
[Sink:]   %arrayidx76 = getelementptr inbounds i64, i64* %64, i64 %idxprom74, !dbg !557
DSINKGEP INSTRUCTION   %top83 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %69, i32 0, i32 1, !dbg !567
[Sink:]   %top83 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %69, i32 0, i32 1, !dbg !567
StructType:::IS STRUCT TY:: allocation intermediate:   %69 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !566
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x60af240 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60af240:s0 -> Node0x60c0870;
Trying to find element at offset 8
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top83 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %69, i32 0, i32 1, !dbg !567
[Sink:]   %top83 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %69, i32 0, i32 1, !dbg !567
StructType:::IS STRUCT TY:: allocation intermediate:   %69 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !566
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x60af240 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60af240:s0 -> Node0x60c0870;
Trying to find element at offset 8
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on BN_from_montgomery in context [BN_mod_exp_mont_consttime ]
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %0), !dbg !374
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !373
REACHABLE SOURCE:   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !373
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !373
Using taint reachable signature for:   %call = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %1), !dbg !377
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !375
REACHABLE SOURCE:   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !375
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !375
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %7), !dbg !392
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !391
REACHABLE SOURCE:   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !391
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !391
Running on BN_MONT_CTX_free in context [BN_mod_exp_mont_consttime ]
Using taint reachable signature for:   call void @CRYPTO_free(i8* %7, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0), i32 244), !dbg !382
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
RSINKGEP INSTRUCTION   %7 = bitcast %struct.bn_mont_ctx_st* %6 to i8*, !dbg !382
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE: i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
REACHABLE SOURCE:   %7 = bitcast %struct.bn_mont_ctx_st* %6 to i8*, !dbg !382
	Node0x6099530 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str38 = private unnamed_addr constant [10 x i8] c\"bn_mont.c\\00\", align 1\n|{<s0>0}}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str38, i32 0, i32 0)
RSINKGEP INSTRUCTION   %7 = bitcast %struct.bn_mont_ctx_st* %6 to i8*, !dbg !382
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %4, i32 0, i32 5, !dbg !379
[Source:]   %flags = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %4, i32 0, i32 5, !dbg !379
StructType: allocation intermediate:   %4 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !377
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 96
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 96
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,4]0x68847c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[56,80]0x6f08e40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[32,56]0x6f09260
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,32]0x6f09290
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[80,96]0x6f09320
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[96,100]0x6f095f0
Running on bn_expand2 in context [bn_wexpand ]
Using taint reachable signature for:   call void @OPENSSL_cleanse(i8* %10, i64 %mul), !dbg !391
RSINKGEP INSTRUCTION   %10 = bitcast i64* %9 to i8*, !dbg !385
REACHABLE SOURCE:   %10 = bitcast i64* %9 to i8*, !dbg !385
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %10 = bitcast i64* %9 to i8*, !dbg !385
Creating ConsElem Map for :	Node0x607ce00 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x607ce00:s0 -> Node0x607bf50;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x607bf50 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x607bf50:s0 -> Node0x6078f90;
Creating ConsElem Map for :	Node0x607cf80 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !368
[Source:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !368
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !367
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x8901880
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x89018b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x8901ac0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x8901be0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x8969f20
Creating ConsElem Map for :	Node0x607d0c0 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x607d0c0:s0 -> Node0x6078f90;
EDGE: [0: tymap-size 1]:i64
	Node0x6078f90 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x607cc80 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x607cc80:s0 -> Node0x607bf50;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x607bf50 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x607bf50:s0 -> Node0x6078f90;
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !383
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !383
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !381
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x8901880
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x89018b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x8901ac0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x8901be0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x8969f20
DSOURCEGEP INSTRUCTION   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !387
[Source:]   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !387
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !385
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x8901880
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x89018b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x8901ac0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x8901be0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x8969f20
DSOURCEGEP INSTRUCTION   %dmax5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %11, i32 0, i32 2, !dbg !389
[Source:]   %dmax5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %11, i32 0, i32 2, !dbg !389
StructType: allocation intermediate:   %11 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !388
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x8901880
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x89018b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x8901ac0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x8901be0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x8969f20
DSINKGEP INSTRUCTION   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !397
[Sink:]   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !397
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !396
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x607bf50 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x607bf50:s0 -> Node0x6078f90;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !397
[Sink:]   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !397
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !396
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x607bf50 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x607bf50:s0 -> Node0x6078f90;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !401
[Sink:]   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !401
StructType:::IS STRUCT TY:: allocation intermediate:   %17 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !400
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 12
	Node0x607bf50 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x607bf50:s0 -> Node0x6078f90;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 12
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !401
[Sink:]   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !401
StructType:::IS STRUCT TY:: allocation intermediate:   %17 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !400
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 12
	Node0x607bf50 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x607bf50:s0 -> Node0x6078f90;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 12
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on bn_init in context [BN_RECP_CTX_init ]
Running on bn_wexpand in context [BN_copy ]
DSOURCEGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !367
[Source:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !367
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !366
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x6fbfe60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7488a70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x74936e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x74938f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7493a10
Running on BN_get_flags in context [BN_copy ]
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !366
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !366
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !365
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x61483b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x6150190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x6218cd0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x6218ea0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x6218fc0
Running on BN_set_flags in context [BN_copy ]
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !367
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !367
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !366
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7c944d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7c945b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7c9bc10
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7db69f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7db6b80
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !367
[Sink:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !367
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !366
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 20
	Node0x607de70 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x607de70:s0 -> Node0x607d240;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 20
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !367
[Sink:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 4, !dbg !367
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !366
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 20
	Node0x607de70 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x607de70:s0 -> Node0x607d240;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 20
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on BN_copy in context [BN_RECP_CTX_set ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !381
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !381
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !380
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !387
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !387
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !386
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSOURCEGEP INSTRUCTION   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !390
[Source:]   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !390
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !389
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSOURCEGEP INSTRUCTION   %top5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !394
[Source:]   %top5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !394
StructType: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !392
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !413
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !413
 allocation intermediate:   %13 = load i64*, i64** %B, align 8, !dbg !413
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSOURCEGEP INSTRUCTION   %arrayidx7 = getelementptr inbounds i64, i64* %15, i64 1, !dbg !415
[Source:]   %arrayidx7 = getelementptr inbounds i64, i64* %15, i64 1, !dbg !415
 allocation intermediate:   %15 = load i64*, i64** %B, align 8, !dbg !415
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSOURCEGEP INSTRUCTION   %arrayidx8 = getelementptr inbounds i64, i64* %17, i64 2, !dbg !417
[Source:]   %arrayidx8 = getelementptr inbounds i64, i64* %17, i64 2, !dbg !417
 allocation intermediate:   %17 = load i64*, i64** %B, align 8, !dbg !417
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSOURCEGEP INSTRUCTION   %arrayidx9 = getelementptr inbounds i64, i64* %19, i64 3, !dbg !419
[Source:]   %arrayidx9 = getelementptr inbounds i64, i64* %19, i64 3, !dbg !419
 allocation intermediate:   %19 = load i64*, i64** %B, align 8, !dbg !419
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 3
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 3
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSINKGEP INSTRUCTION   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !422
[Sink:]   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !422
 allocation intermediate:   %22 = load i64*, i64** %A, align 8, !dbg !422
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !422
[Sink:]   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !422
 allocation intermediate:   %22 = load i64*, i64** %A, align 8, !dbg !422
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !425
[Sink:]   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !425
 allocation intermediate:   %24 = load i64*, i64** %A, align 8, !dbg !425
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !425
[Sink:]   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !425
 allocation intermediate:   %24 = load i64*, i64** %A, align 8, !dbg !425
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !428
[Sink:]   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !428
 allocation intermediate:   %26 = load i64*, i64** %A, align 8, !dbg !428
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !428
[Sink:]   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !428
 allocation intermediate:   %26 = load i64*, i64** %A, align 8, !dbg !428
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !431
[Sink:]   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !431
 allocation intermediate:   %28 = load i64*, i64** %A, align 8, !dbg !431
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 3
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 3
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !431
[Sink:]   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !431
 allocation intermediate:   %28 = load i64*, i64** %A, align 8, !dbg !431
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 3
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 3
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top15 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %32, i32 0, i32 1, !dbg !439
[Source:]   %top15 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %32, i32 0, i32 1, !dbg !439
StructType: allocation intermediate:   %32 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !438
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSOURCEGEP INSTRUCTION   %arrayidx16 = getelementptr inbounds i64, i64* %34, i64 2, !dbg !442
[Source:]   %arrayidx16 = getelementptr inbounds i64, i64* %34, i64 2, !dbg !442
 allocation intermediate:   %34 = load i64*, i64** %B, align 8, !dbg !442
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSINKGEP INSTRUCTION   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !444
[Sink:]   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !444
 allocation intermediate:   %36 = load i64*, i64** %A, align 8, !dbg !444
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !444
[Sink:]   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !444
 allocation intermediate:   %36 = load i64*, i64** %A, align 8, !dbg !444
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx19 = getelementptr inbounds i64, i64* %37, i64 1, !dbg !446
[Source:]   %arrayidx19 = getelementptr inbounds i64, i64* %37, i64 1, !dbg !446
 allocation intermediate:   %37 = load i64*, i64** %B, align 8, !dbg !446
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSINKGEP INSTRUCTION   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !447
[Sink:]   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !447
 allocation intermediate:   %39 = load i64*, i64** %A, align 8, !dbg !447
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !447
[Sink:]   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !447
 allocation intermediate:   %39 = load i64*, i64** %A, align 8, !dbg !447
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx22 = getelementptr inbounds i64, i64* %40, i64 0, !dbg !449
[Source:]   %arrayidx22 = getelementptr inbounds i64, i64* %40, i64 0, !dbg !449
 allocation intermediate:   %40 = load i64*, i64** %B, align 8, !dbg !449
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSINKGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !450
[Sink:]   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !450
 allocation intermediate:   %42 = load i64*, i64** %A, align 8, !dbg !450
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !450
[Sink:]   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !450
 allocation intermediate:   %42 = load i64*, i64** %A, align 8, !dbg !450
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top29 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %45, i32 0, i32 1, !dbg !461
[Source:]   %top29 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %45, i32 0, i32 1, !dbg !461
StructType: allocation intermediate:   %45 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !460
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSINKGEP INSTRUCTION   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !463
[Sink:]   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !463
StructType:::IS STRUCT TY:: allocation intermediate:   %47 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !462
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x6094a00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094a00:s0 -> Node0x608f450;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !463
[Sink:]   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !463
StructType:::IS STRUCT TY:: allocation intermediate:   %47 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !462
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x6094a00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094a00:s0 -> Node0x608f450;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %48, i32 0, i32 3, !dbg !466
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %48, i32 0, i32 3, !dbg !466
StructType: allocation intermediate:   %48 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !465
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSINKGEP INSTRUCTION   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !468
[Sink:]   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !468
StructType:::IS STRUCT TY:: allocation intermediate:   %50 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !467
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x6094a00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094a00:s0 -> Node0x608f450;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !468
[Sink:]   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !468
StructType:::IS STRUCT TY:: allocation intermediate:   %50 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !467
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x6094a00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094a00:s0 -> Node0x608f450;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on BN_set_word in context [BN_RECP_CTX_set ]
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !372
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !372
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !371
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !372
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !372
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !371
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x6676440
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x6676560
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x6676680
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69bd5a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x6a2efa0
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !375
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !375
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !376
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !375
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !375
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !376
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !380
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !380
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !379
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !380
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !380
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !379
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on BN_num_bits in context [BN_RECP_CTX_set ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !366
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !366
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !365
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x6610ef0
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !377
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !377
StructType: allocation intermediate:   %5 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !376
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x6610e80
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !376
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !376
Running on BN_div_recp in context [BN_mod_mul_reciprocal ]
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %0), !dbg !386
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !385
REACHABLE SOURCE:   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !385
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !385
Using taint reachable signature for:   %call = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %1), !dbg !388
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !387
REACHABLE SOURCE:   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !387
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !387
Using taint reachable signature for:   %call1 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %2), !dbg !391
RSINKGEP INSTRUCTION   %2 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !390
REACHABLE SOURCE:   %2 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !390
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %2 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !390
Using taint reachable signature for:   %call2 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %5), !dbg !401
RSINKGEP INSTRUCTION   %5 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !400
REACHABLE SOURCE:   %5 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !400
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %5 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !400
Using taint reachable signature for:   %call6 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %8), !dbg !411
RSINKGEP INSTRUCTION   %8 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !410
REACHABLE SOURCE:   %8 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !410
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %8 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !410
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %18), !dbg !446
RSINKGEP INSTRUCTION   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !444
REACHABLE SOURCE:   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !444
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !444
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %19), !dbg !449
RSINKGEP INSTRUCTION   %19 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !448
REACHABLE SOURCE:   %19 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !448
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %19 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !448
Using taint reachable signature for:   %call39 = call i32 @BN_rshift(%struct.bignum_st* %36, %struct.bignum_st* %37, i32 %39), !dbg !493
RSINKGEP INSTRUCTION   %37 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !490
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %36 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !488
Creating ConsElem Map for :	Node0x60c1e70 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
REACHABLE SOURCE:   %37 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !490
REACHABLE SOURCE:   %36 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !488
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c1e70 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %37 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !490
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %36 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !488
Using taint reachable signature for:   %call44 = call i32 @BN_mul(%struct.bignum_st* %40, %struct.bignum_st* %41, %struct.bignum_st* %Nr43, %struct.bignum_ctx* %43), !dbg !502
RSINKGEP INSTRUCTION   %41 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !498
RSINKGEP INSTRUCTION   %40 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !496
RSINKGEP INSTRUCTION   %43 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !501
RSINKGEP INSTRUCTION   %Nr43 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %42, i32 0, i32 1, !dbg !500
[Sink:]   %Nr43 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %42, i32 0, i32 1, !dbg !500
StructType:::IS STRUCT TY:: allocation intermediate:   %42 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !499
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Tainting at offset: 1
Created 1 constraint variable(s) for node of size 1
	Node0x60be070 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60be070:s0 -> Node0x60bf3f0;
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x60c1f70 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
REACHABLE SOURCE:   %41 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !498
REACHABLE SOURCE:   %40 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !496
REACHABLE SOURCE:   %43 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !501
REACHABLE SOURCE:   %Nr43 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %42, i32 0, i32 1, !dbg !500
	Node0x60c1e70 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x60c1f70 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSOURCEGEP INSTRUCTION   %Nr43 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %42, i32 0, i32 1, !dbg !500
[Source:]   %Nr43 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %42, i32 0, i32 1, !dbg !500
StructType: allocation intermediate:   %42 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !499
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Trying to find element at offset 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x8dd55e0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x8dd55e0
RSINKGEP INSTRUCTION   %41 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !498
RSINKGEP INSTRUCTION   %40 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !496
RSINKGEP INSTRUCTION   %43 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !501
RSINKGEP INSTRUCTION   %Nr43 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %42, i32 0, i32 1, !dbg !500
[Sink:]   %Nr43 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %42, i32 0, i32 1, !dbg !500
StructType:::IS STRUCT TY:: allocation intermediate:   %42 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !499
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Tainting at offset: 1
	Node0x60be070 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60be070:s0 -> Node0x60bf3f0;
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call49 = call i32 @BN_rshift(%struct.bignum_st* %44, %struct.bignum_st* %45, i32 %sub), !dbg !512
RSINKGEP INSTRUCTION   %44 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !505
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %45 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !507
REACHABLE SOURCE:   %44 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !505
REACHABLE SOURCE:   %45 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !507
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c1f70 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %44 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !505
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %45 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !507
Using taint reachable signature for:   %call54 = call i32 @BN_mul(%struct.bignum_st* %50, %struct.bignum_st* %N53, %struct.bignum_st* %52, %struct.bignum_ctx* %53), !dbg !524
RSINKGEP INSTRUCTION   %50 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !518
RSINKGEP INSTRUCTION   %53 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !523
RSINKGEP INSTRUCTION   %N53 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %51, i32 0, i32 0, !dbg !521
[Sink:]   %N53 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %51, i32 0, i32 0, !dbg !521
StructType:::IS STRUCT TY:: allocation intermediate:   %51 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !520
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Tainting at offset: 0
	Node0x60be070 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60be070:s0 -> Node0x60bf3f0;
Adding 1 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %52 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !522
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %50 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !518
REACHABLE SOURCE:   %53 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !523
REACHABLE SOURCE:   %N53 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %51, i32 0, i32 0, !dbg !521
REACHABLE SOURCE:   %52 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !522
	Node0x60c1f70 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSOURCEGEP INSTRUCTION   %N53 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %51, i32 0, i32 0, !dbg !521
[Source:]   %N53 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %51, i32 0, i32 0, !dbg !521
StructType: allocation intermediate:   %51 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !520
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x8dd55e0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x8dd55e0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %50 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !518
RSINKGEP INSTRUCTION   %53 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !523
RSINKGEP INSTRUCTION   %N53 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %51, i32 0, i32 0, !dbg !521
[Sink:]   %N53 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %51, i32 0, i32 0, !dbg !521
StructType:::IS STRUCT TY:: allocation intermediate:   %51 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !520
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Tainting at offset: 0
	Node0x60be070 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60be070:s0 -> Node0x60bf3f0;
Adding 1 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %52 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !522
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call58 = call i32 @BN_usub(%struct.bignum_st* %54, %struct.bignum_st* %55, %struct.bignum_st* %56), !dbg !531
RSINKGEP INSTRUCTION   %56 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !530
RSINKGEP INSTRUCTION   %54 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !527
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %55 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !529
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %56 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !530
REACHABLE SOURCE:   %54 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !527
REACHABLE SOURCE:   %55 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !529
	Node0x60c1f70 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %56 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !530
RSINKGEP INSTRUCTION   %54 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !527
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %55 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !529
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   call void @ERR_put_error(i32 3, i32 130, i32 101, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str47, i32 0, i32 0), i32 154), !dbg !551
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str47, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str47, i32 0, i32 0)
	Node0x60c2070 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str47 = private unnamed_addr constant [10 x i8] c\"bn_recp.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str47, i32 0, i32 0)
Using taint reachable signature for:   %call70 = call i32 @BN_usub(%struct.bignum_st* %61, %struct.bignum_st* %62, %struct.bignum_st* %N69), !dbg !559
RSINKGEP INSTRUCTION   %61 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !554
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %62 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !556
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %N69 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %63, i32 0, i32 0, !dbg !558
[Sink:]   %N69 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %63, i32 0, i32 0, !dbg !558
StructType:::IS STRUCT TY:: allocation intermediate:   %63 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !557
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Tainting at offset: 0
	Node0x60be070 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60be070:s0 -> Node0x60bf3f0;
Adding 1 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %61 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !554
REACHABLE SOURCE:   %62 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !556
REACHABLE SOURCE:   %N69 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %63, i32 0, i32 0, !dbg !558
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSOURCEGEP INSTRUCTION   %N69 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %63, i32 0, i32 0, !dbg !558
[Source:]   %N69 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %63, i32 0, i32 0, !dbg !558
StructType: allocation intermediate:   %63 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !557
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x8dd55e0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x8dd55e0
RSINKGEP INSTRUCTION   %61 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !554
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %62 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !556
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %N69 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %63, i32 0, i32 0, !dbg !558
[Sink:]   %N69 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %63, i32 0, i32 0, !dbg !558
StructType:::IS STRUCT TY:: allocation intermediate:   %63 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !557
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Tainting at offset: 0
	Node0x60be070 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60be070:s0 -> Node0x60bf3f0;
Adding 1 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   %call74 = call i32 @BN_add_word(%struct.bignum_st* %64, i64 1), !dbg !564
RSINKGEP INSTRUCTION   %64 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !562
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE:   %64 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !562
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION   %64 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !562
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %74), !dbg !590
RSINKGEP INSTRUCTION   %74 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !589
REACHABLE SOURCE:   %74 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !589
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %74 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !589
Creating ConsElem Map for :	Node0x60c0d30 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60c0d30:s0 -> Node0x60c0470;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60c0470 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x60c0470:s0 -> Node0x60c23f0;
Creating ConsElem Map for :	Node0x60c0eb0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60c0eb0:s0 -> Node0x60c06b0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60c06b0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60c06b0:s0 -> Node0x60c2170;
Creating ConsElem Map for :	Node0x60c1030 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60c1030:s0 -> Node0x60c06b0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60c06b0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60c06b0:s0 -> Node0x60c2170;
Creating ConsElem Map for :	Node0x60c11b0 [shape=record,shape=Mrecord,label="{0: %struct.bn_recp_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x60c11b0:s0 -> Node0x60be070;
EDGE: [0: tymap-size 1]:%struct.bn_recp_ctx_st = type { %struct.bignum_st, %struct.bignum_st, i32, i32, i32 }
	Node0x60be070 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60be070:s0 -> Node0x60bf3f0;
Creating ConsElem Map for :	Node0x60c1330 [shape=record,shape=Mrecord,label="{0: %struct.bignum_ctx*,  : SMR\n|{<s0>0}}"];
	Node0x60c1330:s0 -> Node0x60c0af0;
EDGE: [0: tymap-size 1]:%struct.bignum_ctx = type opaque
	Node0x60c0af0 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x60c1730 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60c1870 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60c1870:s0 -> Node0x60c1e70;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60c1e70 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x60c19f0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60c19f0:s0 -> Node0x60c1f70;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60c1f70 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x60c1b70 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60c1b70:s0 -> Node0x60c0470;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60c0470 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x60c0470:s0 -> Node0x60c23f0;
Creating ConsElem Map for :	Node0x60c1cf0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60c1cf0:s0 -> Node0x60c06b0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60c06b0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60c06b0:s0 -> Node0x60c2170;
Creating ConsElem Map for :	Node0x60c0bf0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60c14b0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %num_bits = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %21, i32 0, i32 2, !dbg !455
[Source:]   %num_bits = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %21, i32 0, i32 2, !dbg !455
StructType: allocation intermediate:   %21 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !454
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Trying to find element at offset 48
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 48
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x8dd55e0
Creating ConsElem Map for :	Node0x60c15f0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %shift = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %27, i32 0, i32 3, !dbg !469
[Source:]   %shift = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %27, i32 0, i32 3, !dbg !469
StructType: allocation intermediate:   %27 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !468
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Trying to find element at offset 52
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 52
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x8dd55e0
DSINKGEP INSTRUCTION   %shift32 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %33, i32 0, i32 3, !dbg !480
[Sink:]   %shift32 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %33, i32 0, i32 3, !dbg !480
StructType:::IS STRUCT TY:: allocation intermediate:   %33 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !479
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Tainting at offset: 52
	Node0x60be070 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60be070:s0 -> Node0x60bf3f0;
Adding 1 elements
Tainting at offset: 52
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %shift32 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %33, i32 0, i32 3, !dbg !480
[Sink:]   %shift32 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %33, i32 0, i32 3, !dbg !480
StructType:::IS STRUCT TY:: allocation intermediate:   %33 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !479
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Tainting at offset: 52
	Node0x60be070 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60be070:s0 -> Node0x60bf3f0;
Adding 1 elements
Tainting at offset: 52
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %shift34 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %34, i32 0, i32 3, !dbg !484
[Source:]   %shift34 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %34, i32 0, i32 3, !dbg !484
StructType: allocation intermediate:   %34 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !482
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Trying to find element at offset 52
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 52
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x8dd55e0
DSOURCEGEP INSTRUCTION   %num_bits38 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %38, i32 0, i32 2, !dbg !492
[Source:]   %num_bits38 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %38, i32 0, i32 2, !dbg !492
StructType: allocation intermediate:   %38 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !491
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Trying to find element at offset 48
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 48
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x8dd55e0
DSOURCEGEP INSTRUCTION   %num_bits48 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %47, i32 0, i32 2, !dbg !510
[Source:]   %num_bits48 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %47, i32 0, i32 2, !dbg !510
StructType: allocation intermediate:   %47 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !509
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Trying to find element at offset 48
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 48
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x8dd55e0
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %49, i32 0, i32 3, !dbg !516
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %49, i32 0, i32 3, !dbg !516
StructType:::IS STRUCT TY:: allocation intermediate:   %49 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !515
=>  %d = alloca %struct.bignum_st*, align 8
FINAL:   %d = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x60c0470 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x60c0470:s0 -> Node0x60c23f0;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %49, i32 0, i32 3, !dbg !516
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %49, i32 0, i32 3, !dbg !516
StructType:::IS STRUCT TY:: allocation intermediate:   %49 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !515
=>  %d = alloca %struct.bignum_st*, align 8
FINAL:   %d = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x60c0470 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x60c0470:s0 -> Node0x60c23f0;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg62 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %57, i32 0, i32 3, !dbg !535
[Sink:]   %neg62 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %57, i32 0, i32 3, !dbg !535
StructType:::IS STRUCT TY:: allocation intermediate:   %57 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !534
=>  %r = alloca %struct.bignum_st*, align 8
FINAL:   %r = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x60c06b0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60c06b0:s0 -> Node0x60c2170;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg62 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %57, i32 0, i32 3, !dbg !535
[Sink:]   %neg62 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %57, i32 0, i32 3, !dbg !535
StructType:::IS STRUCT TY:: allocation intermediate:   %57 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !534
=>  %r = alloca %struct.bignum_st*, align 8
FINAL:   %r = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x60c06b0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60c06b0:s0 -> Node0x60c2170;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %neg80 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %66, i32 0, i32 3, !dbg !572
[Source:]   %neg80 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %66, i32 0, i32 3, !dbg !572
StructType: allocation intermediate:   %66 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !570
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[16,20]0x8dace30
DSINKGEP INSTRUCTION   %neg81 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %68, i32 0, i32 3, !dbg !576
[Sink:]   %neg81 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %68, i32 0, i32 3, !dbg !576
StructType:::IS STRUCT TY:: allocation intermediate:   %68 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !573
=>  %r = alloca %struct.bignum_st*, align 8
FINAL:   %r = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x60c06b0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60c06b0:s0 -> Node0x60c2170;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg81 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %68, i32 0, i32 3, !dbg !576
[Sink:]   %neg81 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %68, i32 0, i32 3, !dbg !576
StructType:::IS STRUCT TY:: allocation intermediate:   %68 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !573
=>  %r = alloca %struct.bignum_st*, align 8
FINAL:   %r = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x60c06b0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x60c06b0:s0 -> Node0x60c2170;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %neg82 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %69, i32 0, i32 3, !dbg !579
[Source:]   %neg82 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %69, i32 0, i32 3, !dbg !579
StructType: allocation intermediate:   %69 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !578
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[16,20]0x8dace30
DSOURCEGEP INSTRUCTION   %neg84 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %N83, i32 0, i32 3, !dbg !582
[Source:]   %neg84 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %N83, i32 0, i32 3, !dbg !582
StructType: allocation intermediate:   %N83 = getelementptr inbounds %struct.bn_recp_ctx_st, %struct.bn_recp_ctx_st* %71, i32 0, i32 0, !dbg !581
=>  %71 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !580
 allocation intermediate:   %71 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp.addr, align 8, !dbg !580
=>  %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
FINAL:   %recp.addr = alloca %struct.bn_recp_ctx_st*, align 8
Trying to find element at offset 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x8dd55e0
DSINKGEP INSTRUCTION   %neg85 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %73, i32 0, i32 3, !dbg !585
[Sink:]   %neg85 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %73, i32 0, i32 3, !dbg !585
StructType:::IS STRUCT TY:: allocation intermediate:   %73 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !584
=>  %d = alloca %struct.bignum_st*, align 8
FINAL:   %d = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x60c0470 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x60c0470:s0 -> Node0x60c23f0;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg85 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %73, i32 0, i32 3, !dbg !585
[Sink:]   %neg85 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %73, i32 0, i32 3, !dbg !585
StructType:::IS STRUCT TY:: allocation intermediate:   %73 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !584
=>  %d = alloca %struct.bignum_st*, align 8
FINAL:   %d = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x60c0470 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x60c0470:s0 -> Node0x60c23f0;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on BN_free in context [BN_RECP_CTX_free ]
Using taint reachable signature for:   call void @CRYPTO_free(i8* %6, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 206), !dbg !379
RSINKGEP INSTRUCTION   %6 = bitcast %struct.bignum_st* %5 to i8*, !dbg !379
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE:   %6 = bitcast %struct.bignum_st* %5 to i8*, !dbg !379
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x607fb90 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %6 = bitcast %struct.bignum_st* %5 to i8*, !dbg !379
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Creating ConsElem Map for :	Node0x60bb8e0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60bb8e0:s0 -> Node0x60baf20;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60baf20 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60baf20:s0 -> Node0x609a670;
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 4, !dbg !376
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 4, !dbg !376
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !374
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x8d9ad40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x8d9af80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x8d9b0a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x8d9b1c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x8da3590
DSOURCEGEP INSTRUCTION   %flags5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 4, !dbg !382
[Source:]   %flags5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 4, !dbg !382
StructType: allocation intermediate:   %7 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !380
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x8d9ad40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x8d9af80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x8d9b0a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x8d9b1c0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x8da3590
DSINKGEP INSTRUCTION   %flags5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 4, !dbg !382
[Sink:]   %flags5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 4, !dbg !382
StructType:::IS STRUCT TY:: allocation intermediate:   %7 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !380
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 20
	Node0x60baf20 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60baf20:s0 -> Node0x609a670;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 20
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %flags5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 4, !dbg !382
[Sink:]   %flags5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 4, !dbg !382
StructType:::IS STRUCT TY:: allocation intermediate:   %7 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !380
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 20
	Node0x60baf20 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60baf20:s0 -> Node0x609a670;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 20
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %9, i32 0, i32 0, !dbg !385
[Sink:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %9, i32 0, i32 0, !dbg !385
StructType:::IS STRUCT TY:: allocation intermediate:   %9 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !384
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x60baf20 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60baf20:s0 -> Node0x609a670;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %9, i32 0, i32 0, !dbg !385
[Sink:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %9, i32 0, i32 0, !dbg !385
StructType:::IS STRUCT TY:: allocation intermediate:   %9 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !384
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x60baf20 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60baf20:s0 -> Node0x609a670;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on bn_expand2 in context [bn_expand ]
Using taint reachable signature for:   call void @OPENSSL_cleanse(i8* %10, i64 %mul), !dbg !391
RSINKGEP INSTRUCTION   %10 = bitcast i64* %9 to i8*, !dbg !385
REACHABLE SOURCE:   %10 = bitcast i64* %9 to i8*, !dbg !385
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %10 = bitcast i64* %9 to i8*, !dbg !385
DSOURCEGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !368
[Source:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !368
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !367
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x8901880
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x89018b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x8901ac0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x8901be0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x8969f20
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !383
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !383
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !381
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x8901880
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x89018b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x8901ac0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x8901be0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x8969f20
DSOURCEGEP INSTRUCTION   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !387
[Source:]   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !387
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !385
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x8901880
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x89018b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x8901ac0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x8901be0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x8969f20
DSOURCEGEP INSTRUCTION   %dmax5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %11, i32 0, i32 2, !dbg !389
[Source:]   %dmax5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %11, i32 0, i32 2, !dbg !389
StructType: allocation intermediate:   %11 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !388
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x8901880
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x89018b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x8901ac0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x8901be0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x8969f20
DSINKGEP INSTRUCTION   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !397
[Sink:]   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !397
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !396
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x607bf50 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x607bf50:s0 -> Node0x6078f90;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !397
[Sink:]   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !397
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !396
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x607bf50 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x607bf50:s0 -> Node0x6078f90;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !401
[Sink:]   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !401
StructType:::IS STRUCT TY:: allocation intermediate:   %17 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !400
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 12
	Node0x607bf50 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x607bf50:s0 -> Node0x6078f90;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 12
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !401
[Sink:]   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !401
StructType:::IS STRUCT TY:: allocation intermediate:   %17 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !400
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 12
	Node0x607bf50 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x607bf50:s0 -> Node0x6078f90;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 12
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on bn_init in context [BN_MONT_CTX_init ]
Running on bn_wexpand in context [BN_set_bit ]
DSOURCEGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !367
[Source:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !367
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !366
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x6fbfe60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7488a70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x74936e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x74938f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7493a10
Running on bn_wexpand in context [BN_from_montgomery_word ]
DSOURCEGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !367
[Source:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !367
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !366
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x6fbfe60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7488a70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x74936e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x74938f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7493a10
Running on bn_correct_top in context [BN_from_montgomery_word ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !368
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !368
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !367
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x73284b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x73284e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x73286f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7328810
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x74baae0
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !377
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !377
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !376
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x73284b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x73284e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x73286f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7328810
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x74baae0
DSINKGEP INSTRUCTION   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !399
[Sink:]   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !399
StructType:::IS STRUCT TY:: allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !398
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x608f310 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x608f310:s0 -> Node0x6090370;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !399
[Sink:]   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !399
StructType:::IS STRUCT TY:: allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !398
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x608f310 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x608f310:s0 -> Node0x6090370;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %top6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %13, i32 0, i32 1, !dbg !404
[Source:]   %top6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %13, i32 0, i32 1, !dbg !404
StructType: allocation intermediate:   %13 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !402
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x73284b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x73284e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x73286f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7328810
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x74baae0
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !408
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !408
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !407
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x608f310 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x608f310:s0 -> Node0x6090370;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !408
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !408
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !407
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x608f310 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x608f310:s0 -> Node0x6090370;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on BN_get_flags in context [BN_clear_free ]
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !366
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !366
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !365
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x61483b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x6150190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x6218cd0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x6218ea0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x6218fc0
Running on bn_free_d in context [BN_clear_free ]
Using taint reachable signature for:   call void @CRYPTO_secure_free(i8* %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 174), !dbg !367
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
RSINKGEP INSTRUCTION   %3 = bitcast i64* %2 to i8*, !dbg !367
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE:   %3 = bitcast i64* %2 to i8*, !dbg !367
	Node0x607fb90 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
RSINKGEP INSTRUCTION   %3 = bitcast i64* %2 to i8*, !dbg !367
Using taint reachable signature for:   call void @CRYPTO_free(i8* %6, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 176), !dbg !368
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
RSINKGEP INSTRUCTION   %6 = bitcast i64* %5 to i8*, !dbg !368
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE:   %6 = bitcast i64* %5 to i8*, !dbg !368
	Node0x607fb90 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
RSINKGEP INSTRUCTION   %6 = bitcast i64* %5 to i8*, !dbg !368
Creating ConsElem Map for :	Node0x607dff0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x607dff0:s0 -> Node0x607fdd0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x607fdd0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x607fdd0:s0 -> Node0x607ead0;
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 0, !dbg !367
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 0, !dbg !367
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !367
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x90b0140
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x90b0170
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x90b0380
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x90b04a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x90b05c0
DSOURCEGEP INSTRUCTION   %d1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !368
[Source:]   %d1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !368
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !368
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x90b0140
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x90b0170
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x90b0380
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x90b04a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x90b05c0
Running on bn_wexpand in context [MOD_EXP_CTIME_COPY_FROM_PREBUF ]
DSOURCEGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !367
[Source:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !367
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !366
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 12
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x6fbfe60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7488a70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x74936e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x74938f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7493a10
Running on constant_time_eq_int in context [MOD_EXP_CTIME_COPY_FROM_PREBUF ]
Creating ConsElem Map for :	Node0x60b1b10 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60b1c90 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Running on bn_correct_top in context [MOD_EXP_CTIME_COPY_FROM_PREBUF ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !368
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !368
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !367
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x73284b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x73284e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x73286f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7328810
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x74baae0
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !377
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !377
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !376
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x73284b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x73284e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x73286f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7328810
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x74baae0
DSINKGEP INSTRUCTION   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !399
[Sink:]   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !399
StructType:::IS STRUCT TY:: allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !398
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x608f310 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x608f310:s0 -> Node0x6090370;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !399
[Sink:]   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !399
StructType:::IS STRUCT TY:: allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !398
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x608f310 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x608f310:s0 -> Node0x6090370;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %top6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %13, i32 0, i32 1, !dbg !404
[Source:]   %top6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %13, i32 0, i32 1, !dbg !404
StructType: allocation intermediate:   %13 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !402
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x73284b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x73284e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x73286f0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7328810
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x74baae0
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !408
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !408
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !407
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x608f310 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x608f310:s0 -> Node0x6090370;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !408
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !408
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !407
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x608f310 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x608f310:s0 -> Node0x6090370;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on bn_expand_internal in context [bn_expand2 ]
Using taint reachable signature for:   call void @ERR_put_error(i32 3, i32 120, i32 114, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 255), !dbg !377
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
	Node0x607fb90 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Using taint reachable signature for:   call void @ERR_put_error(i32 3, i32 120, i32 105, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 259), !dbg !384
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
	Node0x607fb90 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Using taint reachable signature for:   %call6 = call i8* @CRYPTO_secure_zalloc(i64 %mul, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 263), !dbg !391
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
	Node0x607fb90 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Using taint reachable signature for:   %call9 = call i8* @CRYPTO_zalloc(i64 %mul8, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 265), !dbg !395
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
	Node0x607fb90 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Using taint reachable signature for:   call void @ERR_put_error(i32 3, i32 120, i32 65, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 267), !dbg !402
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
	Node0x607fb90 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Creating ConsElem Map for :	Node0x607ee10 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x607ee10:s0 -> Node0x607ca80;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x607ca80 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x607ca80:s0 -> Node0x6081ed0;
Creating ConsElem Map for :	Node0x607ef90 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x607f250 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x607f250:s0 -> Node0x6081ed0;
EDGE: [0: tymap-size 1]:i64
	Node0x6081ed0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x607ec90 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x607ec90:s0 -> Node0x6081ed0;
EDGE: [0: tymap-size 1]:i64
	Node0x6081ed0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x607f0d0 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x607f0d0:s0 -> Node0x6081ed0;
EDGE: [0: tymap-size 1]:i64
	Node0x6081ed0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !406
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !406
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !405
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x91f86b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x91f87d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x9200450
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x9200480
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x9200aa0
Creating ConsElem Map for :	Node0x607f3d0 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x607f3d0:s0 -> Node0x6081ed0;
EDGE: [0: tymap-size 1]:i64
	Node0x6081ed0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %11, i32 0, i32 1, !dbg !415
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %11, i32 0, i32 1, !dbg !415
StructType: allocation intermediate:   %11 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !412
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x91f86b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x91f87d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x9200450
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x9200480
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x9200aa0
Creating ConsElem Map for :	Node0x607f550 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %14, i64 0, !dbg !434
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %14, i64 0, !dbg !434
 allocation intermediate:   %14 = load i64*, i64** %B, align 8, !dbg !434
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
Creating ConsElem Map for :	Node0x607f690 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx20 = getelementptr inbounds i64, i64* %16, i64 1, !dbg !436
[Source:]   %arrayidx20 = getelementptr inbounds i64, i64* %16, i64 1, !dbg !436
 allocation intermediate:   %16 = load i64*, i64** %B, align 8, !dbg !436
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
Creating ConsElem Map for :	Node0x607f7d0 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx21 = getelementptr inbounds i64, i64* %18, i64 2, !dbg !438
[Source:]   %arrayidx21 = getelementptr inbounds i64, i64* %18, i64 2, !dbg !438
 allocation intermediate:   %18 = load i64*, i64** %B, align 8, !dbg !438
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
Creating ConsElem Map for :	Node0x607f910 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx22 = getelementptr inbounds i64, i64* %20, i64 3, !dbg !440
[Source:]   %arrayidx22 = getelementptr inbounds i64, i64* %20, i64 3, !dbg !440
 allocation intermediate:   %20 = load i64*, i64** %B, align 8, !dbg !440
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 3
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
Creating ConsElem Map for :	Node0x607fa50 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSINKGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds i64, i64* %23, i64 0, !dbg !443
[Sink:]   %arrayidx23 = getelementptr inbounds i64, i64* %23, i64 0, !dbg !443
 allocation intermediate:   %23 = load i64*, i64** %A, align 8, !dbg !443
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
Created 1 constraint variable(s) for node of size 1
	Node0x6081ed0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds i64, i64* %23, i64 0, !dbg !443
[Sink:]   %arrayidx23 = getelementptr inbounds i64, i64* %23, i64 0, !dbg !443
 allocation intermediate:   %23 = load i64*, i64** %A, align 8, !dbg !443
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x6081ed0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx24 = getelementptr inbounds i64, i64* %25, i64 1, !dbg !446
[Sink:]   %arrayidx24 = getelementptr inbounds i64, i64* %25, i64 1, !dbg !446
 allocation intermediate:   %25 = load i64*, i64** %A, align 8, !dbg !446
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x6081ed0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx24 = getelementptr inbounds i64, i64* %25, i64 1, !dbg !446
[Sink:]   %arrayidx24 = getelementptr inbounds i64, i64* %25, i64 1, !dbg !446
 allocation intermediate:   %25 = load i64*, i64** %A, align 8, !dbg !446
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x6081ed0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx25 = getelementptr inbounds i64, i64* %27, i64 2, !dbg !449
[Sink:]   %arrayidx25 = getelementptr inbounds i64, i64* %27, i64 2, !dbg !449
 allocation intermediate:   %27 = load i64*, i64** %A, align 8, !dbg !449
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x6081ed0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx25 = getelementptr inbounds i64, i64* %27, i64 2, !dbg !449
[Sink:]   %arrayidx25 = getelementptr inbounds i64, i64* %27, i64 2, !dbg !449
 allocation intermediate:   %27 = load i64*, i64** %A, align 8, !dbg !449
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x6081ed0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx26 = getelementptr inbounds i64, i64* %29, i64 3, !dbg !452
[Sink:]   %arrayidx26 = getelementptr inbounds i64, i64* %29, i64 3, !dbg !452
 allocation intermediate:   %29 = load i64*, i64** %A, align 8, !dbg !452
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 3
	Node0x6081ed0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 3
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx26 = getelementptr inbounds i64, i64* %29, i64 3, !dbg !452
[Sink:]   %arrayidx26 = getelementptr inbounds i64, i64* %29, i64 3, !dbg !452
 allocation intermediate:   %29 = load i64*, i64** %A, align 8, !dbg !452
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 3
	Node0x6081ed0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 3
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top28 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %33, i32 0, i32 1, !dbg !460
[Source:]   %top28 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %33, i32 0, i32 1, !dbg !460
StructType: allocation intermediate:   %33 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !459
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x91f86b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x91f87d0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x9200450
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x9200480
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x9200aa0
DSOURCEGEP INSTRUCTION   %arrayidx29 = getelementptr inbounds i64, i64* %35, i64 2, !dbg !463
[Source:]   %arrayidx29 = getelementptr inbounds i64, i64* %35, i64 2, !dbg !463
 allocation intermediate:   %35 = load i64*, i64** %B, align 8, !dbg !463
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x92a2600
DSINKGEP INSTRUCTION   %arrayidx30 = getelementptr inbounds i64, i64* %37, i64 2, !dbg !465
[Sink:]   %arrayidx30 = getelementptr inbounds i64, i64* %37, i64 2, !dbg !465
 allocation intermediate:   %37 = load i64*, i64** %A, align 8, !dbg !465
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x6081ed0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx30 = getelementptr inbounds i64, i64* %37, i64 2, !dbg !465
[Sink:]   %arrayidx30 = getelementptr inbounds i64, i64* %37, i64 2, !dbg !465
 allocation intermediate:   %37 = load i64*, i64** %A, align 8, !dbg !465
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x6081ed0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx32 = getelementptr inbounds i64, i64* %38, i64 1, !dbg !467
[Source:]   %arrayidx32 = getelementptr inbounds i64, i64* %38, i64 1, !dbg !467
 allocation intermediate:   %38 = load i64*, i64** %B, align 8, !dbg !467
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x92a2600
DSINKGEP INSTRUCTION   %arrayidx33 = getelementptr inbounds i64, i64* %40, i64 1, !dbg !468
[Sink:]   %arrayidx33 = getelementptr inbounds i64, i64* %40, i64 1, !dbg !468
 allocation intermediate:   %40 = load i64*, i64** %A, align 8, !dbg !468
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x6081ed0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx33 = getelementptr inbounds i64, i64* %40, i64 1, !dbg !468
[Sink:]   %arrayidx33 = getelementptr inbounds i64, i64* %40, i64 1, !dbg !468
 allocation intermediate:   %40 = load i64*, i64** %A, align 8, !dbg !468
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x6081ed0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx35 = getelementptr inbounds i64, i64* %41, i64 0, !dbg !470
[Source:]   %arrayidx35 = getelementptr inbounds i64, i64* %41, i64 0, !dbg !470
 allocation intermediate:   %41 = load i64*, i64** %B, align 8, !dbg !470
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x92a2600
DSINKGEP INSTRUCTION   %arrayidx36 = getelementptr inbounds i64, i64* %43, i64 0, !dbg !471
[Sink:]   %arrayidx36 = getelementptr inbounds i64, i64* %43, i64 0, !dbg !471
 allocation intermediate:   %43 = load i64*, i64** %A, align 8, !dbg !471
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x6081ed0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx36 = getelementptr inbounds i64, i64* %43, i64 0, !dbg !471
[Sink:]   %arrayidx36 = getelementptr inbounds i64, i64* %43, i64 0, !dbg !471
 allocation intermediate:   %43 = load i64*, i64** %A, align 8, !dbg !471
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x6081ed0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Running on bn_free_d in context [bn_expand2 ]
Using taint reachable signature for:   call void @CRYPTO_secure_free(i8* %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 174), !dbg !367
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
RSINKGEP INSTRUCTION   %3 = bitcast i64* %2 to i8*, !dbg !367
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE:   %3 = bitcast i64* %2 to i8*, !dbg !367
	Node0x607fb90 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
RSINKGEP INSTRUCTION   %3 = bitcast i64* %2 to i8*, !dbg !367
Using taint reachable signature for:   call void @CRYPTO_free(i8* %6, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 176), !dbg !368
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
RSINKGEP INSTRUCTION   %6 = bitcast i64* %5 to i8*, !dbg !368
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE:   %6 = bitcast i64* %5 to i8*, !dbg !368
	Node0x607fb90 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
RSINKGEP INSTRUCTION   %6 = bitcast i64* %5 to i8*, !dbg !368
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 0, !dbg !367
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 0, !dbg !367
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !367
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x90b0140
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x90b0170
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x90b0380
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x90b04a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x90b05c0
DSOURCEGEP INSTRUCTION   %d1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !368
[Source:]   %d1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !368
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !368
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x90b0140
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x90b0170
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x90b0380
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x90b04a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x90b05c0
Running on BN_ucmp in context [BN_div_recp ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !376
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !376
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x6a2def0
DSOURCEGEP INSTRUCTION   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 1, !dbg !378
[Source:]   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 1, !dbg !378
StructType: allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !377
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x6cc3460
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x6cc3540
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x6cc3660
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x6cc3780
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x741ae80
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !388
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !388
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !387
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x6a2dec0
DSOURCEGEP INSTRUCTION   %d2 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !391
[Source:]   %d2 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !391
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !390
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x6cc3460
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x6cc3540
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x6cc3660
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x6cc3780
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x741ae80
DSOURCEGEP INSTRUCTION   %top3 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !395
[Source:]   %top3 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !395
StructType: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !393
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x6a2def0
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !407
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !407
DSOURCEGEP INSTRUCTION   %arrayidx7 = getelementptr inbounds i64, i64* %17, i64 %idxprom6, !dbg !410
[Source:]   %arrayidx7 = getelementptr inbounds i64, i64* %17, i64 %idxprom6, !dbg !410
Running on BN_set_word in context [BN_div_recp ]
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !372
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !372
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !371
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !372
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !372
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !371
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x6676440
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x6676560
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x6676680
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69bd5a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x6a2efa0
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !375
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !375
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !376
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !375
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !375
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !376
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !376
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !375
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !380
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !380
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !379
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !380
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !380
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !379
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x6094dc0 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094dc0:s0 -> Node0x6098b30;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on BN_copy in context [BN_div_recp ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !381
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !381
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !380
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !387
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !387
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !386
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSOURCEGEP INSTRUCTION   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !390
[Source:]   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !390
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !389
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSOURCEGEP INSTRUCTION   %top5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !394
[Source:]   %top5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !394
StructType: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !392
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !413
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %13, i64 0, !dbg !413
 allocation intermediate:   %13 = load i64*, i64** %B, align 8, !dbg !413
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSOURCEGEP INSTRUCTION   %arrayidx7 = getelementptr inbounds i64, i64* %15, i64 1, !dbg !415
[Source:]   %arrayidx7 = getelementptr inbounds i64, i64* %15, i64 1, !dbg !415
 allocation intermediate:   %15 = load i64*, i64** %B, align 8, !dbg !415
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSOURCEGEP INSTRUCTION   %arrayidx8 = getelementptr inbounds i64, i64* %17, i64 2, !dbg !417
[Source:]   %arrayidx8 = getelementptr inbounds i64, i64* %17, i64 2, !dbg !417
 allocation intermediate:   %17 = load i64*, i64** %B, align 8, !dbg !417
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSOURCEGEP INSTRUCTION   %arrayidx9 = getelementptr inbounds i64, i64* %19, i64 3, !dbg !419
[Source:]   %arrayidx9 = getelementptr inbounds i64, i64* %19, i64 3, !dbg !419
 allocation intermediate:   %19 = load i64*, i64** %B, align 8, !dbg !419
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 3
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 3
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSINKGEP INSTRUCTION   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !422
[Sink:]   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !422
 allocation intermediate:   %22 = load i64*, i64** %A, align 8, !dbg !422
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !422
[Sink:]   %arrayidx10 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !422
 allocation intermediate:   %22 = load i64*, i64** %A, align 8, !dbg !422
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !425
[Sink:]   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !425
 allocation intermediate:   %24 = load i64*, i64** %A, align 8, !dbg !425
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !425
[Sink:]   %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 1, !dbg !425
 allocation intermediate:   %24 = load i64*, i64** %A, align 8, !dbg !425
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !428
[Sink:]   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !428
 allocation intermediate:   %26 = load i64*, i64** %A, align 8, !dbg !428
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !428
[Sink:]   %arrayidx12 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !428
 allocation intermediate:   %26 = load i64*, i64** %A, align 8, !dbg !428
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !431
[Sink:]   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !431
 allocation intermediate:   %28 = load i64*, i64** %A, align 8, !dbg !431
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 3
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 3
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !431
[Sink:]   %arrayidx13 = getelementptr inbounds i64, i64* %28, i64 3, !dbg !431
 allocation intermediate:   %28 = load i64*, i64** %A, align 8, !dbg !431
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 3
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 3
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top15 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %32, i32 0, i32 1, !dbg !439
[Source:]   %top15 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %32, i32 0, i32 1, !dbg !439
StructType: allocation intermediate:   %32 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !438
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSOURCEGEP INSTRUCTION   %arrayidx16 = getelementptr inbounds i64, i64* %34, i64 2, !dbg !442
[Source:]   %arrayidx16 = getelementptr inbounds i64, i64* %34, i64 2, !dbg !442
 allocation intermediate:   %34 = load i64*, i64** %B, align 8, !dbg !442
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 2
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSINKGEP INSTRUCTION   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !444
[Sink:]   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !444
 allocation intermediate:   %36 = load i64*, i64** %A, align 8, !dbg !444
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !444
[Sink:]   %arrayidx17 = getelementptr inbounds i64, i64* %36, i64 2, !dbg !444
 allocation intermediate:   %36 = load i64*, i64** %A, align 8, !dbg !444
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 2
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx19 = getelementptr inbounds i64, i64* %37, i64 1, !dbg !446
[Source:]   %arrayidx19 = getelementptr inbounds i64, i64* %37, i64 1, !dbg !446
 allocation intermediate:   %37 = load i64*, i64** %B, align 8, !dbg !446
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 1
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSINKGEP INSTRUCTION   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !447
[Sink:]   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !447
 allocation intermediate:   %39 = load i64*, i64** %A, align 8, !dbg !447
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !447
[Sink:]   %arrayidx20 = getelementptr inbounds i64, i64* %39, i64 1, !dbg !447
 allocation intermediate:   %39 = load i64*, i64** %A, align 8, !dbg !447
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 1
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx22 = getelementptr inbounds i64, i64* %40, i64 0, !dbg !449
[Source:]   %arrayidx22 = getelementptr inbounds i64, i64* %40, i64 0, !dbg !449
 allocation intermediate:   %40 = load i64*, i64** %B, align 8, !dbg !449
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x61a5b80
CONSTRAINING: COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0::0x76670a0
DSINKGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !450
[Sink:]   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !450
 allocation intermediate:   %42 = load i64*, i64** %A, align 8, !dbg !450
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !450
[Sink:]   %arrayidx23 = getelementptr inbounds i64, i64* %42, i64 0, !dbg !450
 allocation intermediate:   %42 = load i64*, i64** %A, align 8, !dbg !450
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x608f450 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
Tainting at offset: 0
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top29 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %45, i32 0, i32 1, !dbg !461
[Source:]   %top29 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %45, i32 0, i32 1, !dbg !461
StructType: allocation intermediate:   %45 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !460
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSINKGEP INSTRUCTION   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !463
[Sink:]   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !463
StructType:::IS STRUCT TY:: allocation intermediate:   %47 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !462
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x6094a00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094a00:s0 -> Node0x608f450;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !463
[Sink:]   %top30 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %47, i32 0, i32 1, !dbg !463
StructType:::IS STRUCT TY:: allocation intermediate:   %47 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !462
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x6094a00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094a00:s0 -> Node0x608f450;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %48, i32 0, i32 3, !dbg !466
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %48, i32 0, i32 3, !dbg !466
StructType: allocation intermediate:   %48 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !465
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 16
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x69baca0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x69bae70
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x69bb420
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x76fe200
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x76fe320
DSINKGEP INSTRUCTION   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !468
[Sink:]   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !468
StructType:::IS STRUCT TY:: allocation intermediate:   %50 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !467
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x6094a00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094a00:s0 -> Node0x608f450;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !468
[Sink:]   %neg31 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %50, i32 0, i32 3, !dbg !468
StructType:::IS STRUCT TY:: allocation intermediate:   %50 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !467
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x6094a00 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x6094a00:s0 -> Node0x608f450;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 16
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Running on BN_num_bits in context [BN_div_recp ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !366
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !366
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !365
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x6610ef0
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !377
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !377
StructType: allocation intermediate:   %5 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !376
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x6610e80
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !376
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !376
Running on BN_reciprocal in context [BN_div_recp ]
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %0), !dbg !374
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !373
REACHABLE SOURCE:   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !373
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !373
Using taint reachable signature for:   %call = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %1), !dbg !377
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !375
REACHABLE SOURCE:   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !375
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !375
Using taint reachable signature for:   %call4 = call i32 @BN_div(%struct.bignum_st* %4, %struct.bignum_st* null, %struct.bignum_st* %5, %struct.bignum_st* %6, %struct.bignum_ctx* %7), !dbg !393
RSINKGEP INSTRUCTION %struct.bignum_st* null
RSINKGEP INSTRUCTION   %4 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !388
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !392
RSINKGEP INSTRUCTION   %6 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !391
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %5 = load %struct.bignum_st*, %struct.bignum_st** %t, align 8, !dbg !390
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
REACHABLE SOURCE: %struct.bignum_st* null
REACHABLE SOURCE:   %4 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !388
REACHABLE SOURCE:   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !392
REACHABLE SOURCE:   %6 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !391
REACHABLE SOURCE:   %5 = load %struct.bignum_st*, %struct.bignum_st** %t, align 8, !dbg !390
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
RSINKGEP INSTRUCTION %struct.bignum_st* null
RSINKGEP INSTRUCTION   %4 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !388
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %7 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !392
RSINKGEP INSTRUCTION   %6 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !391
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %5 = load %struct.bignum_st*, %struct.bignum_st** %t, align 8, !dbg !390
Added child elem: 	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %9), !dbg !400
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !399
REACHABLE SOURCE:   %9 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !399
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !399
Creating ConsElem Map for :	Node0x60c5700 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60c5700:s0 -> Node0x60c5400;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Creating ConsElem Map for :	Node0x60c57c0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60c57c0:s0 -> Node0x60c5400;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Creating ConsElem Map for :	Node0x60c5880 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60c5940 [shape=record,shape=Mrecord,label="{0: %struct.bignum_ctx*,  : SMR\n|{<s0>0}}"];
	Node0x60c5940:s0 -> Node0x60c5640;
EDGE: [0: tymap-size 1]:%struct.bignum_ctx = type opaque
	Node0x60c5640 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x60c5a00 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60c5ac0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x60c5ac0:s0 -> Node0x60c5b80;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x60c5b80 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x60c5b80:s0 -> Node0x60c5c40;
Running on BN_is_zero in context [BN_div_recp ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !364
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !364
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !363
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[8,12]0x6eba550
Running on BN_get_flags in context [BN_free ]
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !366
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !366
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !365
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x61483b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x6150190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x6218cd0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x6218ea0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x6218fc0
Running on bn_free_d in context [BN_free ]
Using taint reachable signature for:   call void @CRYPTO_secure_free(i8* %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 174), !dbg !367
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
RSINKGEP INSTRUCTION   %3 = bitcast i64* %2 to i8*, !dbg !367
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE:   %3 = bitcast i64* %2 to i8*, !dbg !367
	Node0x607fb90 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
RSINKGEP INSTRUCTION   %3 = bitcast i64* %2 to i8*, !dbg !367
Using taint reachable signature for:   call void @CRYPTO_free(i8* %6, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 176), !dbg !368
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
RSINKGEP INSTRUCTION   %6 = bitcast i64* %5 to i8*, !dbg !368
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE:   %6 = bitcast i64* %5 to i8*, !dbg !368
	Node0x607fb90 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
	Node0x60c2530 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE2\n@BN_value_one.data_one = internal constant i64 1, align 8\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
RSINKGEP INSTRUCTION   %6 = bitcast i64* %5 to i8*, !dbg !368
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 0, !dbg !367
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 0, !dbg !367
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !367
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x90b0140
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x90b0170
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x90b0380
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x90b04a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x90b05c0
DSOURCEGEP INSTRUCTION   %d1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !368
[Source:]   %d1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !368
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !368
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x90b0140
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x90b0170
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x90b0380
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x90b04a0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x90b05c0
Running on BN_get_flags in context [bn_free_d ]
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !366
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !366
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !365
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x61483b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x6150190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x6218cd0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x6218ea0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x6218fc0
Running on constant_time_eq in context [constant_time_eq_int ]
Creating ConsElem Map for :	Node0x60b1f20 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x60b20a0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Running on BN_get_flags in context [bn_expand_internal ]
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !366
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !366
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !365
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 20
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x61483b0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x6150190
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x6218cd0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x6218ea0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x6218fc0
Running on BN_set_bit in context [BN_reciprocal ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 1, !dbg !384
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 1, !dbg !384
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !382
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7ad3b80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7ad3bb0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7db5b90
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7db5cb0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7db5dd0
DSOURCEGEP INSTRUCTION   %top6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 1, !dbg !399
[Source:]   %top6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 1, !dbg !399
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !397
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 8
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7ad3b80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7ad3bb0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7db5b90
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7db5cb0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7db5dd0
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %13, i32 0, i32 0, !dbg !412
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %13, i32 0, i32 0, !dbg !412
StructType: allocation intermediate:   %13 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !411
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7ad3b80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7ad3bb0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7db5b90
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7db5cb0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7db5dd0
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !411
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !411
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !411
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !411
DSINKGEP INSTRUCTION   %top10 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 1, !dbg !419
[Sink:]   %top10 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 1, !dbg !419
StructType:::IS STRUCT TY:: allocation intermediate:   %17 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !418
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x60aeb50 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60aeb50:s0 -> Node0x60b4340;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSINKGEP INSTRUCTION   %top10 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 1, !dbg !419
[Sink:]   %top10 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 1, !dbg !419
StructType:::IS STRUCT TY:: allocation intermediate:   %17 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !418
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x60aeb50 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60aeb50:s0 -> Node0x60b4340;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Tainting at offset: 8
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
Adding 5 elements
DSOURCEGEP INSTRUCTION   %d13 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %20, i32 0, i32 0, !dbg !426
[Source:]   %d13 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %20, i32 0, i32 0, !dbg !426
StructType: allocation intermediate:   %20 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !425
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
Trying to find element at offset 0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2::0x613d980
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3::0x613da60
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4::0x613db40
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0::0x614a9e0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1::0x614ac00
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[0,8]0x7ad3b80
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[8,12]0x7ad3bb0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[12,16]0x7db5b90
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[16,20]0x7db5cb0
CONSTRAINING: COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC[20,24]0x7db5dd0
DSOURCEGEP INSTRUCTION   %arrayidx14 = getelementptr inbounds i64, i64* %21, i64 %idxprom12, !dbg !425
[Source:]   %arrayidx14 = getelementptr inbounds i64, i64* %21, i64 %idxprom12, !dbg !425
DSINKGEP INSTRUCTION   %arrayidx14 = getelementptr inbounds i64, i64* %21, i64 %idxprom12, !dbg !425
[Sink:]   %arrayidx14 = getelementptr inbounds i64, i64* %21, i64 %idxprom12, !dbg !425
DSINKGEP INSTRUCTION   %arrayidx14 = getelementptr inbounds i64, i64* %21, i64 %idxprom12, !dbg !425
[Sink:]   %arrayidx14 = getelementptr inbounds i64, i64* %21, i64 %idxprom12, !dbg !425
Running on constant_time_is_zero in context [constant_time_eq ]
Creating ConsElem Map for :	Node0x60b2330 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Running on constant_time_msb in context [constant_time_is_zero ]
Creating ConsElem Map for :	Node0x60b2680 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Running on bn2binpad in context []
Trying to constrain p at 0 for value : p
%struct.bignum_st* %p
%struct.bignum_st* %p
 has 5 elements.
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
FOUND 6 elements from the locsForValue
Number of elements to constrain: 6
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2:: : addr 0x613d980
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3:: : addr 0x613da60
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4:: : addr 0x613db40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:: : addr 0x614a9e0
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1:: : addr 0x614ac00
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:: : addr 0x61a5b80
Trying to constrain p at 0 for value : p
%struct.bignum_st* %p
%struct.bignum_st* %p
 has 5 elements.
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
FOUND 6 elements from the locsForValue
Number of elements to constrain: 6
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2:: : addr 0x613d980
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3:: : addr 0x613da60
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4:: : addr 0x613db40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:: : addr 0x614a9e0
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1:: : addr 0x614ac00
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:: : addr 0x61a5b80
Trying to constrain p at 0 for value : p
%struct.bignum_st* %p
%struct.bignum_st* %p
 has 5 elements.
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
FOUND 6 elements from the locsForValue
Number of elements to constrain: 6
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2:: : addr 0x613d980
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3:: : addr 0x613da60
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4:: : addr 0x613db40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:: : addr 0x614a9e0
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1:: : addr 0x614ac00
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:: : addr 0x61a5b80
Trying to constrain p at 0 for value : p
%struct.bignum_st* %p
%struct.bignum_st* %p
 has 5 elements.
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
FOUND 6 elements from the locsForValue
Number of elements to constrain: 6
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2:: : addr 0x613d980
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3:: : addr 0x613da60
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4:: : addr 0x613db40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:: : addr 0x614a9e0
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1:: : addr 0x614ac00
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:: : addr 0x61a5b80
Trying to constrain p at 0 for value : p
%struct.bignum_st* %p
%struct.bignum_st* %p
 has 5 elements.
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
FOUND 6 elements from the locsForValue
Number of elements to constrain: 6
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2:: : addr 0x613d980
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3:: : addr 0x613da60
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4:: : addr 0x613db40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:: : addr 0x614a9e0
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1:: : addr 0x614ac00
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:: : addr 0x61a5b80
DONE
Trying to constrain m at 0 for value : m
%struct.bignum_st* %m
%struct.bignum_st* %m
 has 5 elements.
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
FOUND 6 elements from the locsForValue
Number of elements to constrain: 6
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2:: : addr 0x613d980
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3:: : addr 0x613da60
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4:: : addr 0x613db40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:: : addr 0x614a9e0
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1:: : addr 0x614ac00
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:: : addr 0x61a5b80
Trying to constrain m at 0 for value : m
%struct.bignum_st* %m
%struct.bignum_st* %m
 has 5 elements.
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
FOUND 6 elements from the locsForValue
Number of elements to constrain: 6
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2:: : addr 0x613d980
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3:: : addr 0x613da60
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4:: : addr 0x613db40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:: : addr 0x614a9e0
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1:: : addr 0x614ac00
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:: : addr 0x61a5b80
Trying to constrain m at 0 for value : m
%struct.bignum_st* %m
%struct.bignum_st* %m
 has 5 elements.
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
FOUND 6 elements from the locsForValue
Number of elements to constrain: 6
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2:: : addr 0x613d980
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3:: : addr 0x613da60
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4:: : addr 0x613db40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:: : addr 0x614a9e0
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1:: : addr 0x614ac00
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:: : addr 0x61a5b80
Trying to constrain m at 0 for value : m
%struct.bignum_st* %m
%struct.bignum_st* %m
 has 5 elements.
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
FOUND 6 elements from the locsForValue
Number of elements to constrain: 6
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2:: : addr 0x613d980
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3:: : addr 0x613da60
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4:: : addr 0x613db40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:: : addr 0x614a9e0
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1:: : addr 0x614ac00
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:: : addr 0x61a5b80
Trying to constrain m at 0 for value : m
%struct.bignum_st* %m
%struct.bignum_st* %m
 has 5 elements.
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
FOUND 6 elements from the locsForValue
Number of elements to constrain: 6
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2:: : addr 0x613d980
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3:: : addr 0x613da60
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4:: : addr 0x613db40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:: : addr 0x614a9e0
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1:: : addr 0x614ac00
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:: : addr 0x61a5b80
Trying to constrain m at 0 for value : m
  %m = alloca i64, align 8
  %m = alloca i64, align 8
 has 1 elements.
	Node0x6091a30 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Trying to find element at offset 0
FOUND 1 elements from the locsForValue
Number of elements to constrain: 1
0: i64,  : SCMR: elem 0:default: : addr 0x815eec0
Trying to constrain m at 0 for value : m
%struct.bignum_st* %m
%struct.bignum_st* %m
 has 5 elements.
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
FOUND 6 elements from the locsForValue
Number of elements to constrain: 6
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2:: : addr 0x613d980
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3:: : addr 0x613da60
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4:: : addr 0x613db40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:: : addr 0x614a9e0
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1:: : addr 0x614ac00
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:: : addr 0x61a5b80
Trying to constrain m at 0 for value : m
%struct.bignum_st* %m
%struct.bignum_st* %m
 has 5 elements.
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
FOUND 6 elements from the locsForValue
Number of elements to constrain: 6
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2:: : addr 0x613d980
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3:: : addr 0x613da60
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4:: : addr 0x613db40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:: : addr 0x614a9e0
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1:: : addr 0x614ac00
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:: : addr 0x61a5b80
DONE
Trying to constrain p at 0 for value : p
%struct.bignum_st* %p
%struct.bignum_st* %p
 has 5 elements.
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
FOUND 6 elements from the locsForValue
Number of elements to constrain: 6
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2:: : addr 0x613d980
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3:: : addr 0x613da60
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4:: : addr 0x613db40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:: : addr 0x614a9e0
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1:: : addr 0x614ac00
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:: : addr 0x61a5b80
Trying to constrain p at 0 for value : p
%struct.bignum_st* %p
%struct.bignum_st* %p
 has 5 elements.
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
FOUND 6 elements from the locsForValue
Number of elements to constrain: 6
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2:: : addr 0x613d980
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3:: : addr 0x613da60
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4:: : addr 0x613db40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:: : addr 0x614a9e0
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1:: : addr 0x614ac00
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:: : addr 0x61a5b80
Trying to constrain p at 0 for value : p
%struct.bignum_st* %p
%struct.bignum_st* %p
 has 5 elements.
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
FOUND 6 elements from the locsForValue
Number of elements to constrain: 6
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2:: : addr 0x613d980
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3:: : addr 0x613da60
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4:: : addr 0x613db40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:: : addr 0x614a9e0
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1:: : addr 0x614ac00
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:: : addr 0x61a5b80
Trying to constrain p at 0 for value : p
%struct.bignum_st* %p
%struct.bignum_st* %p
 has 5 elements.
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
FOUND 6 elements from the locsForValue
Number of elements to constrain: 6
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2:: : addr 0x613d980
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3:: : addr 0x613da60
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4:: : addr 0x613db40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:: : addr 0x614a9e0
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1:: : addr 0x614ac00
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:: : addr 0x61a5b80
Trying to constrain p at 0 for value : p
%struct.bignum_st* %p
%struct.bignum_st* %p
 has 5 elements.
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
FOUND 6 elements from the locsForValue
Number of elements to constrain: 6
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2:: : addr 0x613d980
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3:: : addr 0x613da60
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4:: : addr 0x613db40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:: : addr 0x614a9e0
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1:: : addr 0x614ac00
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:: : addr 0x61a5b80
DONE
Trying to constrain m at 0 for value : m
%struct.bignum_st* %m
%struct.bignum_st* %m
 has 5 elements.
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
FOUND 6 elements from the locsForValue
Number of elements to constrain: 6
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2:: : addr 0x613d980
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3:: : addr 0x613da60
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4:: : addr 0x613db40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:: : addr 0x614a9e0
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1:: : addr 0x614ac00
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:: : addr 0x61a5b80
Trying to constrain m at 0 for value : m
%struct.bignum_st* %m
%struct.bignum_st* %m
 has 5 elements.
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
FOUND 6 elements from the locsForValue
Number of elements to constrain: 6
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2:: : addr 0x613d980
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3:: : addr 0x613da60
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4:: : addr 0x613db40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:: : addr 0x614a9e0
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1:: : addr 0x614ac00
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:: : addr 0x61a5b80
Trying to constrain m at 0 for value : m
%struct.bignum_st* %m
%struct.bignum_st* %m
 has 5 elements.
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
FOUND 6 elements from the locsForValue
Number of elements to constrain: 6
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2:: : addr 0x613d980
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3:: : addr 0x613da60
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4:: : addr 0x613db40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:: : addr 0x614a9e0
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1:: : addr 0x614ac00
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:: : addr 0x61a5b80
Trying to constrain m at 0 for value : m
%struct.bignum_st* %m
%struct.bignum_st* %m
 has 5 elements.
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
FOUND 6 elements from the locsForValue
Number of elements to constrain: 6
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2:: : addr 0x613d980
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3:: : addr 0x613da60
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4:: : addr 0x613db40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:: : addr 0x614a9e0
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1:: : addr 0x614ac00
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:: : addr 0x61a5b80
Trying to constrain m at 0 for value : m
%struct.bignum_st* %m
%struct.bignum_st* %m
 has 5 elements.
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
FOUND 6 elements from the locsForValue
Number of elements to constrain: 6
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2:: : addr 0x613d980
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3:: : addr 0x613da60
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4:: : addr 0x613db40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:: : addr 0x614a9e0
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1:: : addr 0x614ac00
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:: : addr 0x61a5b80
Trying to constrain m at 0 for value : m
  %m = alloca i64, align 8
  %m = alloca i64, align 8
 has 1 elements.
	Node0x6091a30 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Trying to find element at offset 0
FOUND 1 elements from the locsForValue
Number of elements to constrain: 1
0: i64,  : SCMR: elem 0:default: : addr 0x815eec0
Trying to constrain m at 0 for value : m
%struct.bignum_st* %m
%struct.bignum_st* %m
 has 5 elements.
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
FOUND 6 elements from the locsForValue
Number of elements to constrain: 6
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2:: : addr 0x613d980
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3:: : addr 0x613da60
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4:: : addr 0x613db40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:: : addr 0x614a9e0
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1:: : addr 0x614ac00
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:: : addr 0x61a5b80
Trying to constrain m at 0 for value : m
%struct.bignum_st* %m
%struct.bignum_st* %m
 has 5 elements.
	Node0x60c5400 [shape=record,shape=Mrecord,label="{COLLAPSED: SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8 + 1 EC\n|{<s0>0}}"];
	Node0x60c5400:s0 -> Node0x60c2530;
FOUND 6 elements from the locsForValue
Number of elements to constrain: 6
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 2:: : addr 0x613d980
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 3:: : addr 0x613da60
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 4:: : addr 0x613db40
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 0:: : addr 0x614a9e0
COLLAPSED: SGCMRE@BN_value_one.const_one = internal constant %struct.bignum_st { i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 }, align 8 + 1 EC: elem 1:: : addr 0x614ac00
COLLAPSED: SGCMRE2@BN_value_one.data_one = internal constant i64 1, align 8: elem 0:: : addr 0x61a5b80
DONE
#--------------Results------------------
bn_exp.c line 144
bn_exp.c line 146
bn_exp.c line 147
bn_exp.c line 148
bn_exp.c line 149
bn_exp.c line 146
bn_exp.c line 1124
bn_exp.c line 1123
bn_exp.c line 1133
bn_exp.c line 1137
bn_exp.c line 1141
bn_exp.c line 1143
bn_exp.c line 1151
bn_exp.c line 1161
bn_exp.c line 1161
bn_exp.c line 1161
bn_exp.c line 1167
bn_exp.c line 1179
bn_exp.c line 1182
bn_exp.c line 1188
bn_exp.c line 1188
bn_exp.c line 1200
bn_exp.c line 1202
bn_exp.c line 1208
bn_exp.c line 1208
bn_exp.c line 1218
bn_exp.c line 1224
bn_exp.c line 1224
bn_exp.c line 318
bn_exp.c line 319
bn_exp.c line 317
bn_exp.c line 327
bn_exp.c line 332
bn_exp.c line 334
bn_exp.c line 347
bn_exp.c line 347
bn_exp.c line 347
bn_exp.c line 357
bn_exp.c line 363
bn_exp.c line 363
bn_exp.c line 364
bn_exp.c line 369
bn_exp.c line 377
bn_exp.c line 377
bn_exp.c line 377
bn_exp.c line 378
bn_exp.c line 382
bn_exp.c line 383
bn_exp.c line 398
bn_exp.c line 399
bn_exp.c line 403
bn_exp.c line 416
bn_exp.c line 421
bn_exp.c line 434
bn_exp.c line 435
bn_exp.c line 437
bn_exp.c line 448
bn_exp.c line 461
bn_exp.c line 182
bn_exp.c line 183
bn_exp.c line 181
bn_exp.c line 190
bn_exp.c line 192
bn_exp.c line 204
bn_exp.c line 204
bn_exp.c line 208
bn_exp.c line 210
bn_exp.c line 220
bn_exp.c line 222
bn_exp.c line 228
bn_exp.c line 228
bn_exp.c line 228
bn_exp.c line 229
bn_exp.c line 233
bn_exp.c line 234
bn_exp.c line 251
bn_exp.c line 255
bn_exp.c line 268
bn_exp.c line 269
bn_exp.c line 271
bn_exp.c line 282
bn_exp.c line 295
bn_exp.c line 621
bn_exp.c line 629
bn_exp.c line 631
bn_exp.c line 649
bn_exp.c line 685
bn_exp.c line 685
bn_exp.c line 685
bn_exp.c line 709
bn_exp.c line 712
bn_exp.c line 717
bn_exp.c line 726
bn_exp.c line 740
bn_exp.c line 743
bn_exp.c line 752
bn_exp.c line 752
bn_exp.c line 753
bn_exp.c line 1023
bn_exp.c line 1029
bn_exp.c line 1040
bn_exp.c line 1050
bn_exp.c line 1054
bn_exp.c line 1089
bn_exp.c line 522
bn_exp.c line 525
bn_exp.c line 540
bn_exp.c line 543
bn_exp.c line 544
bn_exp.c line 547
bn_exp.c line 566
bn_exp.c line 569
bn_lib.c line 111
bn_lib.c line 112
bn_lib.c line 113
bn_lib.c line 118
bn_lib.c line 143
bn_lib.c line 144
bn_lib.c line 152
bn_lib.c line 166
bn_lib.c line 184
bn_lib.c line 187
bn_lib.c line 189
bn_lib.c line 194
bn_lib.c line 203
bn_lib.c line 205
bn_lib.c line 330
bn_lib.c line 332
bn_lib.c line 334
bn_lib.c line 373
bn_lib.c line 375
bn_lib.c line 381
bn_lib.c line 409
bn_lib.c line 1027
bn_lib.c line 475
bn_lib.c line 1035
bn_lib.c line 1036
bn_lib.c line 1038
bn_lib.c line 1043
bn_lib.c line 641
bn_lib.c line 645
bn_lib.c line 648
bn_lib.c line 705
bn_lib.c line 710
bn_lib.c line 711
bn_lib.c line 713
bn_lib.c line 746
bn_lib.c line 750
bn_lib.c line 926
bn_lib.c line 926
bn_lib.c line 936
bn_lib.c line 946
bn_lib.c line 173
bn_lib.c line 254
bn_lib.c line 258
bn_lib.c line 262
bn_lib.c line 266
bn_lib.c line 274
bn_lib.c line 275
include/bn_lcl.h line 679
bn_mont.c line 48
bn_mont.c line 52
bn_mont.c line 53
bn_mont.c line 56
bn_mont.c line 174
bn_mont.c line 174
bn_mont.c line 217
bn_mont.c line 237
bn_mont.c line 243
bn_mont.c line 252
bn_mont.c line 256
bn_mont.c line 259
bn_mont.c line 273
bn_mont.c line 329
bn_mont.c line 331
bn_mont.c line 333
bn_mont.c line 334
bn_mont.c line 341
bn_mont.c line 346
bn_mont.c line 375
bn_mont.c line 83
bn_mont.c line 89
bn_mont.c line 98
bn_mont.c line 104
bn_mont.c line 112
bn_mont.c line 135
bn_mont.c line 151
bn_recp.c line 40
bn_recp.c line 46
bn_recp.c line 62
bn_recp.c line 64
bn_recp.c line 65
bn_recp.c line 66
bn_recp.c line 69
bn_recp.c line 96
bn_recp.c line 100
bn_recp.c line 100
bn_recp.c line 100
bn_recp.c line 100
bn_recp.c line 103
bn_recp.c line 105
bn_recp.c line 121
bn_recp.c line 125
bn_recp.c line 128
bn_recp.c line 137
bn_recp.c line 139
bn_recp.c line 141
bn_recp.c line 145
bn_recp.c line 147
bn_recp.c line 152
bn_recp.c line 153
bn_recp.c line 157
bn_recp.c line 159
bn_recp.c line 163
bn_recp.c line 185
bn_recp.c line 191
#--------------Statistics----------------
:: Tainted Branches: 216
:: Branch Instructions: 1054
:: Conditional Branches: 429
:: Vulnerable Branches: 20.49% [216/1054]
