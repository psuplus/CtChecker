Args: ../../../..//Debug+Asserts/bin/opt -load ../../../..//projects/poolalloc/Debug+Asserts/lib/LLVMDataStructure.so -load ../../../..//projects/llvm-deps/Debug+Asserts/lib/Constraints.so -load ../../../..//projects/llvm-deps/Debug+Asserts/lib/sourcesinkanalysis.so -load ../../../..//projects/llvm-deps/Debug+Asserts/lib/pointstointerface.so -load ../../../..//projects/llvm-deps/Debug+Asserts/lib/Deps.so -load ../../../..//projects/llvm-deps/Debug+Asserts/lib/Security.so -vulnerablebranch -debug 

Features:+64bit,+sse2
CPU:generic

Subtarget features: SSELevel 3, 3DNowLevel 0, 64bit 1
Merged 13 call nodes.
Merged 5 call nodes.
Merged 6 call nodes.
Merged 4 call nodes.
Merged 6 call nodes.
Merged 5 call nodes.
Merged 1 call nodes.
Attempting to merge two chunks of the same node together!
Merged 3 call nodes.
Removing llvm.dbg.declare from bn_free_d
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand
Removing llvm.dbg.declare from bn_expand
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from BN_GENCB_get_arg
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_free
Removing llvm.dbg.declare from BN_GENCB_new
Removing llvm.dbg.declare from BN_with_flags
Removing llvm.dbg.declare from BN_with_flags
Removing llvm.dbg.declare from BN_with_flags
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_is_negative
Removing llvm.dbg.declare from BN_is_odd
Removing llvm.dbg.declare from BN_is_word
Removing llvm.dbg.declare from BN_is_word
Removing llvm.dbg.declare from BN_is_one
Removing llvm.dbg.declare from BN_abs_is_word
Removing llvm.dbg.declare from BN_abs_is_word
Removing llvm.dbg.declare from BN_zero_ex
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from BN_set_negative
Removing llvm.dbg.declare from BN_set_negative
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_bn2bin
Removing llvm.dbg.declare from BN_bn2bin
Removing llvm.dbg.declare from BN_bn2binpad
Removing llvm.dbg.declare from BN_bn2binpad
Removing llvm.dbg.declare from BN_bn2binpad
Removing llvm.dbg.declare from bn_correct_top
Removing llvm.dbg.declare from bn_correct_top
Removing llvm.dbg.declare from bn_correct_top
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_set_word
Removing llvm.dbg.declare from BN_set_word
Removing llvm.dbg.declare from BN_get_word
Removing llvm.dbg.declare from BN_clear
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_set_flags
Removing llvm.dbg.declare from BN_set_flags
Removing llvm.dbg.declare from bn_wexpand
Removing llvm.dbg.declare from bn_wexpand
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_dup
Removing llvm.dbg.declare from BN_dup
Removing llvm.dbg.declare from bn_expand2
Removing llvm.dbg.declare from bn_expand2
Removing llvm.dbg.declare from bn_expand2
Removing llvm.dbg.declare from BN_secure_new
Removing llvm.dbg.declare from BN_new
Removing llvm.dbg.declare from bn_init
Removing llvm.dbg.declare from BN_free
Removing llvm.dbg.declare from BN_get_flags
Removing llvm.dbg.declare from BN_get_flags
Removing llvm.dbg.declare from BN_clear_free
Removing llvm.dbg.declare from BN_clear_free
Removing llvm.dbg.declare from BN_is_zero
Removing llvm.dbg.declare from BN_num_bits
Removing llvm.dbg.declare from BN_num_bits
Removing llvm.dbg.declare from BN_num_bits_word
Removing llvm.dbg.declare from BN_get_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from constant_time_eq_int
Removing llvm.dbg.declare from constant_time_eq_int
Removing llvm.dbg.declare from constant_time_eq
Removing llvm.dbg.declare from constant_time_eq
Removing llvm.dbg.declare from constant_time_is_zero
Removing llvm.dbg.declare from constant_time_msb
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from bn_free_d
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand_internal
Removing llvm.dbg.declare from bn_expand
Removing llvm.dbg.declare from bn_expand
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from bn2binpad
Removing llvm.dbg.declare from BN_GENCB_get_arg
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_set_old
Removing llvm.dbg.declare from BN_GENCB_free
Removing llvm.dbg.declare from BN_GENCB_new
Removing llvm.dbg.declare from BN_with_flags
Removing llvm.dbg.declare from BN_with_flags
Removing llvm.dbg.declare from BN_with_flags
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_to_montgomery
Removing llvm.dbg.declare from BN_is_negative
Removing llvm.dbg.declare from BN_is_odd
Removing llvm.dbg.declare from BN_is_word
Removing llvm.dbg.declare from BN_is_word
Removing llvm.dbg.declare from BN_is_one
Removing llvm.dbg.declare from BN_abs_is_word
Removing llvm.dbg.declare from BN_abs_is_word
Removing llvm.dbg.declare from BN_zero_ex
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_security_bits
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from BN_consttime_swap
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_part_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from bn_cmp_words
Removing llvm.dbg.declare from BN_set_negative
Removing llvm.dbg.declare from BN_set_negative
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_mask_bits
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_is_bit_set
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_clear_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_set_bit
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_cmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_ucmp
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_bn2lebinpad
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_lebin2bn
Removing llvm.dbg.declare from BN_bn2bin
Removing llvm.dbg.declare from BN_bn2bin
Removing llvm.dbg.declare from BN_bn2binpad
Removing llvm.dbg.declare from BN_bn2binpad
Removing llvm.dbg.declare from BN_bn2binpad
Removing llvm.dbg.declare from bn_correct_top
Removing llvm.dbg.declare from bn_correct_top
Removing llvm.dbg.declare from bn_correct_top
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_bin2bn
Removing llvm.dbg.declare from BN_set_word
Removing llvm.dbg.declare from BN_set_word
Removing llvm.dbg.declare from BN_get_word
Removing llvm.dbg.declare from BN_clear
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_swap
Removing llvm.dbg.declare from BN_set_flags
Removing llvm.dbg.declare from BN_set_flags
Removing llvm.dbg.declare from bn_wexpand
Removing llvm.dbg.declare from bn_wexpand
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_copy
Removing llvm.dbg.declare from BN_dup
Removing llvm.dbg.declare from BN_dup
Removing llvm.dbg.declare from bn_expand2
Removing llvm.dbg.declare from bn_expand2
Removing llvm.dbg.declare from bn_expand2
Removing llvm.dbg.declare from BN_secure_new
Removing llvm.dbg.declare from BN_new
Removing llvm.dbg.declare from bn_init
Removing llvm.dbg.declare from BN_free
Removing llvm.dbg.declare from BN_get_flags
Removing llvm.dbg.declare from BN_get_flags
Removing llvm.dbg.declare from BN_clear_free
Removing llvm.dbg.declare from BN_clear_free
Removing llvm.dbg.declare from BN_is_zero
Removing llvm.dbg.declare from BN_num_bits
Removing llvm.dbg.declare from BN_num_bits
Removing llvm.dbg.declare from BN_num_bits_word
Removing llvm.dbg.declare from BN_get_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from BN_set_params
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_TO_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from MOD_EXP_CTIME_COPY_FROM_PREBUF
Removing llvm.dbg.declare from constant_time_eq_int
Removing llvm.dbg.declare from constant_time_eq_int
Removing llvm.dbg.declare from constant_time_eq
Removing llvm.dbg.declare from constant_time_eq
Removing llvm.dbg.declare from constant_time_is_zero
Removing llvm.dbg.declare from constant_time_msb
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_simple
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_mont_consttime
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_recp
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp_mont_word
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_mod_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Removing llvm.dbg.declare from BN_exp
Visiting single node SCC #: 3 fn: BN_get_flags
  [BU] Calculating graph for: BN_get_flags
  [BU] Done inlining: BN_get_flags [3+0]
Visiting single node SCC #: 6 fn: bn_free_d
  [BU] Calculating graph for: bn_free_d
    Inlining graph for BN_get_flags[3+0] into 'bn_free_d' [4+0]
  [BU] Done inlining: bn_free_d [4+0]
Visiting single node SCC #: 7 fn: bn_expand_internal
  [BU] Calculating graph for: bn_expand_internal
    Inlining graph for BN_get_flags[3+0] into 'bn_expand_internal' [15+0]
  [BU] Done inlining: bn_expand_internal [15+0]
Visiting single node SCC #: 5 fn: bn_expand2
  [BU] Calculating graph for: bn_expand2
    Inlining graph for bn_free_d[4+0] into 'bn_expand2' [6+0]
    Inlining graph for bn_expand_internal[15+0] into 'bn_expand2' [6+0]
  [BU] Done inlining: bn_expand2 [6+0]
Visiting single node SCC #: 4 fn: bn_wexpand
  [BU] Calculating graph for: bn_wexpand
    Inlining graph for bn_expand2[6+0] into 'bn_wexpand' [3+0]
  [BU] Done inlining: bn_wexpand [4+0]
Visiting single node SCC #: 8 fn: BN_set_flags
  [BU] Calculating graph for: BN_set_flags
  [BU] Done inlining: BN_set_flags [3+0]
Visiting single node SCC #: 2 fn: BN_copy
  [BU] Calculating graph for: BN_copy
    Inlining graph for BN_get_flags[3+0] into 'BN_copy' [15+0]
    Inlining graph for bn_wexpand[4+0] into 'BN_copy' [15+0]
    Inlining graph for BN_set_flags[3+0] into 'BN_copy' [14+0]
  [BU] Done inlining: BN_copy [14+0]
Visiting single node SCC #: 9 fn: BN_is_odd
  [BU] Calculating graph for: BN_is_odd
  [BU] Done inlining: BN_is_odd [3+0]
Visiting single node SCC #: 11 fn: BN_num_bits_word
  [BU] Calculating graph for: BN_num_bits_word
  [BU] Done inlining: BN_num_bits_word [3+0]
Visiting single node SCC #: 12 fn: BN_is_zero
  [BU] Calculating graph for: BN_is_zero
  [BU] Done inlining: BN_is_zero [2+0]
Visiting single node SCC #: 10 fn: BN_num_bits
  [BU] Calculating graph for: BN_num_bits
    Inlining graph for BN_is_zero[2+0] into 'BN_num_bits' [5+0]
  [BU] Done inlining: BN_num_bits [5+0]
Visiting single node SCC #: 14 fn: bn_expand
  [BU] Calculating graph for: bn_expand
    Inlining graph for bn_expand2[6+0] into 'bn_expand' [4+0]
  [BU] Done inlining: bn_expand [5+0]
Visiting single node SCC #: 13 fn: BN_set_word
  [BU] Calculating graph for: BN_set_word
    Inlining graph for bn_expand[5+0] into 'BN_set_word' [6+0]
  [BU] Done inlining: BN_set_word [5+0]
Visiting single node SCC #: 15 fn: BN_is_bit_set
  [BU] Calculating graph for: BN_is_bit_set
  [BU] Done inlining: BN_is_bit_set [7+0]
Visiting single node SCC #: 1 fn: BN_exp
  [BU] Calculating graph for: BN_exp
    Inlining graph for BN_copy[14+0] into 'BN_exp' [18+0]
    Inlining graph for BN_copy[14+0] into 'BN_exp' [19+0]
    Inlining graph for BN_copy[14+0] into 'BN_exp' [19+0]
    Inlining graph for BN_is_odd[3+0] into 'BN_exp' [18+0]
    Inlining graph for BN_num_bits[5+0] into 'BN_exp' [19+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_exp' [19+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_exp' [19+0]
    Inlining graph for BN_set_word[5+0] into 'BN_exp' [19+0]
    Inlining graph for BN_is_bit_set[7+0] into 'BN_exp' [19+0]
  [BU] Done inlining: BN_exp [19+0]
Visiting single node SCC #: 19 fn: BN_abs_is_word
  [BU] Calculating graph for: BN_abs_is_word
  [BU] Done inlining: BN_abs_is_word [4+0]
Visiting single node SCC #: 18 fn: BN_is_one
  [BU] Calculating graph for: BN_is_one
    Inlining graph for BN_abs_is_word[4+0] into 'BN_is_one' [2+0]
  [BU] Done inlining: BN_is_one [3+0]
Visiting single node SCC #: 20 fn: BN_to_montgomery
  [BU] Calculating graph for: BN_to_montgomery
  [BU] Done inlining: BN_to_montgomery [8+0]
Visiting single node SCC #: 17 fn: BN_mod_exp_mont_word
  [BU] Calculating graph for: BN_mod_exp_mont_word
    Inlining graph for BN_is_one[3+0] into 'BN_mod_exp_mont_word' [27+0]
    Inlining graph for BN_is_odd[3+0] into 'BN_mod_exp_mont_word' [27+0]
    Inlining graph for BN_to_montgomery[8+0] into 'BN_mod_exp_mont_word' [27+0]
    Inlining graph for BN_num_bits[5+0] into 'BN_mod_exp_mont_word' [27+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_mont_word' [28+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_mont_word' [28+0]
    Inlining graph for BN_set_word[5+0] into 'BN_mod_exp_mont_word' [28+0]
    Inlining graph for BN_set_word[5+0] into 'BN_mod_exp_mont_word' [29+0]
    Inlining graph for BN_is_bit_set[7+0] into 'BN_mod_exp_mont_word' [30+0]
  [BU] Done inlining: BN_mod_exp_mont_word [30+0]
Visiting single node SCC #: 23 fn: MOD_EXP_CTIME_COPY_TO_PREBUF
  [BU] Calculating graph for: MOD_EXP_CTIME_COPY_TO_PREBUF
  [BU] Done inlining: MOD_EXP_CTIME_COPY_TO_PREBUF [12+0]
Visiting single node SCC #: 28 fn: constant_time_msb
  [BU] Calculating graph for: constant_time_msb
  [BU] Done inlining: constant_time_msb [1+0]
Visiting single node SCC #: 27 fn: constant_time_is_zero
  [BU] Calculating graph for: constant_time_is_zero
  [BU] Done inlining: constant_time_is_zero [1+0]
Visiting single node SCC #: 26 fn: constant_time_eq
  [BU] Calculating graph for: constant_time_eq
  [BU] Done inlining: constant_time_eq [2+0]
Visiting single node SCC #: 25 fn: constant_time_eq_int
  [BU] Calculating graph for: constant_time_eq_int
  [BU] Done inlining: constant_time_eq_int [2+0]
Visiting single node SCC #: 29 fn: bn_correct_top
  [BU] Calculating graph for: bn_correct_top
  [BU] Done inlining: bn_correct_top [5+0]
Visiting single node SCC #: 24 fn: MOD_EXP_CTIME_COPY_FROM_PREBUF
  [BU] Calculating graph for: MOD_EXP_CTIME_COPY_FROM_PREBUF
    Inlining graph for bn_wexpand[4+0] into 'MOD_EXP_CTIME_COPY_FROM_PREBUF' [21+0]
    Inlining graph for bn_correct_top[5+0] into 'MOD_EXP_CTIME_COPY_FROM_PREBUF' [20+0]
  [BU] Done inlining: MOD_EXP_CTIME_COPY_FROM_PREBUF [20+0]
Visiting single node SCC #: 30 fn: BN_value_one
  [BU] Calculating graph for: BN_value_one
  [BU] Done inlining: BN_value_one [2+0]
Visiting single node SCC #: 31 fn: BN_ucmp
  [BU] Calculating graph for: BN_ucmp
  [BU] Done inlining: BN_ucmp [12+0]
Visiting single node SCC #: 22 fn: BN_mod_exp_mont_consttime
  [BU] Calculating graph for: BN_mod_exp_mont_consttime
    Inlining graph for BN_is_one[3+0] into 'BN_mod_exp_mont_consttime' [30+0]
    Inlining graph for BN_is_odd[3+0] into 'BN_mod_exp_mont_consttime' [30+0]
    Inlining graph for BN_to_montgomery[8+0] into 'BN_mod_exp_mont_consttime' [30+0]
    Inlining graph for BN_to_montgomery[8+0] into 'BN_mod_exp_mont_consttime' [30+0]
    Inlining graph for BN_to_montgomery[8+0] into 'BN_mod_exp_mont_consttime' [30+0]
    Inlining graph for MOD_EXP_CTIME_COPY_TO_PREBUF[12+0] into 'BN_mod_exp_mont_consttime' [30+0]
    Inlining graph for MOD_EXP_CTIME_COPY_TO_PREBUF[12+0] into 'BN_mod_exp_mont_consttime' [30+0]
    Inlining graph for MOD_EXP_CTIME_COPY_FROM_PREBUF[20+0] into 'BN_mod_exp_mont_consttime' [30+0]
    Inlining graph for MOD_EXP_CTIME_COPY_FROM_PREBUF[20+0] into 'BN_mod_exp_mont_consttime' [30+0]
    Inlining graph for BN_value_one[2+0] into 'BN_mod_exp_mont_consttime' [30+0]
    Inlining graph for BN_num_bits[5+0] into 'BN_mod_exp_mont_consttime' [31+0]
    Inlining graph for BN_set_word[5+0] into 'BN_mod_exp_mont_consttime' [32+0]
    Inlining graph for BN_ucmp[12+0] into 'BN_mod_exp_mont_consttime' [33+0]
    Inlining graph for BN_is_bit_set[7+0] into 'BN_mod_exp_mont_consttime' [34+0]
  [BU] Done inlining: BN_mod_exp_mont_consttime [34+0]
Visiting single node SCC #: 21 fn: BN_mod_exp_mont
  [BU] Calculating graph for: BN_mod_exp_mont
    Inlining graph for BN_mod_exp_mont_consttime[34+0] into 'BN_mod_exp_mont' [34+0]
    Inlining graph for BN_is_one[3+0] into 'BN_mod_exp_mont' [37+0]
    Inlining graph for BN_is_odd[3+0] into 'BN_mod_exp_mont' [37+0]
    Inlining graph for BN_to_montgomery[8+0] into 'BN_mod_exp_mont' [37+0]
    Inlining graph for BN_to_montgomery[8+0] into 'BN_mod_exp_mont' [37+0]
    Inlining graph for BN_value_one[2+0] into 'BN_mod_exp_mont' [37+0]
    Inlining graph for BN_num_bits[5+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_is_zero[2+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for bn_wexpand[4+0] into 'BN_mod_exp_mont' [38+0]
    Inlining graph for BN_set_word[5+0] into 'BN_mod_exp_mont' [37+0]
    Inlining graph for bn_correct_top[5+0] into 'BN_mod_exp_mont' [37+0]
    Inlining graph for BN_ucmp[12+0] into 'BN_mod_exp_mont' [37+0]
    Inlining graph for BN_is_bit_set[7+0] into 'BN_mod_exp_mont' [37+0]
  [BU] Done inlining: BN_mod_exp_mont [37+0]
Visiting single node SCC #: 32 fn: BN_mod_exp_recp
  [BU] Calculating graph for: BN_mod_exp_recp
    Inlining graph for BN_copy[14+0] into 'BN_mod_exp_recp' [27+0]
    Inlining graph for BN_is_one[3+0] into 'BN_mod_exp_recp' [28+0]
    Inlining graph for BN_num_bits[5+0] into 'BN_mod_exp_recp' [28+0]
    Inlining graph for BN_is_zero[2+0] into 'BN_mod_exp_recp' [29+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_recp' [29+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_recp' [29+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_recp' [29+0]
    Inlining graph for BN_set_word[5+0] into 'BN_mod_exp_recp' [29+0]
    Inlining graph for BN_is_bit_set[7+0] into 'BN_mod_exp_recp' [30+0]
  [BU] Done inlining: BN_mod_exp_recp [30+0]
Visiting single node SCC #: 16 fn: BN_mod_exp
  [BU] Calculating graph for: BN_mod_exp
    Inlining graph for BN_mod_exp_mont_word[30+0] into 'BN_mod_exp' [13+0]
    Inlining graph for BN_mod_exp_mont[37+0] into 'BN_mod_exp' [17+0]
    Inlining graph for BN_mod_exp_recp[30+0] into 'BN_mod_exp' [18+0]
    Inlining graph for BN_is_odd[3+0] into 'BN_mod_exp' [18+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp' [18+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp' [18+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp' [18+0]
  [BU] Done inlining: BN_mod_exp [16+0]
Visiting single node SCC #: 33 fn: BN_mod_exp_simple
  [BU] Calculating graph for: BN_mod_exp_simple
    Inlining graph for BN_is_one[3+0] into 'BN_mod_exp_simple' [25+0]
    Inlining graph for BN_num_bits[5+0] into 'BN_mod_exp_simple' [26+0]
    Inlining graph for BN_is_zero[2+0] into 'BN_mod_exp_simple' [27+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_simple' [27+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_simple' [27+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_mod_exp_simple' [27+0]
    Inlining graph for BN_set_word[5+0] into 'BN_mod_exp_simple' [27+0]
    Inlining graph for BN_is_bit_set[7+0] into 'BN_mod_exp_simple' [28+0]
  [BU] Done inlining: BN_mod_exp_simple [28+0]
Visiting single node SCC #: 34 fn: BN_set_params
  [BU] Calculating graph for: BN_set_params
  [BU] Done inlining: BN_set_params [4+0]
Visiting single node SCC #: 35 fn: BN_get_params
  [BU] Calculating graph for: BN_get_params
  [BU] Done inlining: BN_get_params [2+0]
Visiting single node SCC #: 36 fn: BN_clear_free
  [BU] Calculating graph for: BN_clear_free
    Inlining graph for BN_get_flags[3+0] into 'BN_clear_free' [5+0]
    Inlining graph for bn_free_d[4+0] into 'BN_clear_free' [5+0]
  [BU] Done inlining: BN_clear_free [5+0]
Visiting single node SCC #: 37 fn: BN_free
  [BU] Calculating graph for: BN_free
    Inlining graph for BN_get_flags[3+0] into 'BN_free' [3+0]
    Inlining graph for bn_free_d[4+0] into 'BN_free' [3+0]
  [BU] Done inlining: BN_free [4+0]
Visiting single node SCC #: 38 fn: bn_init
  [BU] Calculating graph for: bn_init
  [BU] Done inlining: bn_init [2+0]
Visiting single node SCC #: 39 fn: BN_new
  [BU] Calculating graph for: BN_new
  [BU] Done inlining: BN_new [4+0]
Visiting single node SCC #: 40 fn: BN_secure_new
  [BU] Calculating graph for: BN_secure_new
    Inlining graph for BN_new[4+0] into 'BN_secure_new' [2+0]
  [BU] Done inlining: BN_secure_new [2+0]
Visiting single node SCC #: 41 fn: BN_dup
  [BU] Calculating graph for: BN_dup
    Inlining graph for BN_new[4+0] into 'BN_dup' [6+0]
    Inlining graph for BN_secure_new[2+0] into 'BN_dup' [6+0]
    Inlining graph for BN_copy[14+0] into 'BN_dup' [6+0]
    Inlining graph for BN_get_flags[3+0] into 'BN_dup' [7+0]
    Inlining graph for BN_free[4+0] into 'BN_dup' [7+0]
  [BU] Done inlining: BN_dup [7+0]
Visiting single node SCC #: 42 fn: BN_swap
  [BU] Calculating graph for: BN_swap
  [BU] Done inlining: BN_swap [11+0]
Visiting single node SCC #: 43 fn: BN_clear
  [BU] Calculating graph for: BN_clear
  [BU] Done inlining: BN_clear [3+0]
Visiting single node SCC #: 44 fn: BN_get_word
  [BU] Calculating graph for: BN_get_word
  [BU] Done inlining: BN_get_word [4+0]
Visiting single node SCC #: 45 fn: BN_bin2bn
  [BU] Calculating graph for: BN_bin2bn
    Inlining graph for BN_new[4+0] into 'BN_bin2bn' [13+0]
    Inlining graph for BN_free[4+0] into 'BN_bin2bn' [13+0]
    Inlining graph for bn_wexpand[4+0] into 'BN_bin2bn' [13+0]
    Inlining graph for bn_correct_top[5+0] into 'BN_bin2bn' [12+0]
  [BU] Done inlining: BN_bin2bn [12+0]
Visiting single node SCC #: 47 fn: bn2binpad
  [BU] Calculating graph for: bn2binpad
    Inlining graph for BN_num_bits[5+0] into 'bn2binpad' [9+0]
  [BU] Done inlining: bn2binpad [9+0]
Visiting single node SCC #: 46 fn: BN_bn2binpad
  [BU] Calculating graph for: BN_bn2binpad
    Inlining graph for bn2binpad[9+0] into 'BN_bn2binpad' [6+0]
  [BU] Done inlining: BN_bn2binpad [7+0]
Visiting single node SCC #: 48 fn: BN_bn2bin
  [BU] Calculating graph for: BN_bn2bin
    Inlining graph for bn2binpad[9+0] into 'BN_bn2bin' [4+0]
  [BU] Done inlining: BN_bn2bin [5+0]
Visiting single node SCC #: 49 fn: BN_lebin2bn
  [BU] Calculating graph for: BN_lebin2bn
    Inlining graph for BN_new[4+0] into 'BN_lebin2bn' [13+0]
    Inlining graph for BN_free[4+0] into 'BN_lebin2bn' [13+0]
    Inlining graph for bn_wexpand[4+0] into 'BN_lebin2bn' [13+0]
    Inlining graph for bn_correct_top[5+0] into 'BN_lebin2bn' [12+0]
  [BU] Done inlining: BN_lebin2bn [12+0]
Visiting single node SCC #: 50 fn: BN_bn2lebinpad
  [BU] Calculating graph for: BN_bn2lebinpad
    Inlining graph for BN_num_bits[5+0] into 'BN_bn2lebinpad' [9+0]
  [BU] Done inlining: BN_bn2lebinpad [9+0]
Visiting single node SCC #: 51 fn: BN_cmp
  [BU] Calculating graph for: BN_cmp
  [BU] Done inlining: BN_cmp [12+0]
Visiting single node SCC #: 52 fn: BN_set_bit
  [BU] Calculating graph for: BN_set_bit
    Inlining graph for bn_wexpand[4+0] into 'BN_set_bit' [9+0]
  [BU] Done inlining: BN_set_bit [8+0]
Visiting single node SCC #: 53 fn: BN_clear_bit
  [BU] Calculating graph for: BN_clear_bit
    Inlining graph for bn_correct_top[5+0] into 'BN_clear_bit' [7+0]
  [BU] Done inlining: BN_clear_bit [7+0]
Visiting single node SCC #: 54 fn: BN_mask_bits
  [BU] Calculating graph for: BN_mask_bits
    Inlining graph for bn_correct_top[5+0] into 'BN_mask_bits' [7+0]
  [BU] Done inlining: BN_mask_bits [7+0]
Visiting single node SCC #: 55 fn: BN_set_negative
  [BU] Calculating graph for: BN_set_negative
    Inlining graph for BN_is_zero[2+0] into 'BN_set_negative' [3+0]
  [BU] Done inlining: BN_set_negative [3+0]
Visiting single node SCC #: 56 fn: bn_cmp_words
  [BU] Calculating graph for: bn_cmp_words
  [BU] Done inlining: bn_cmp_words [9+0]
Visiting single node SCC #: 57 fn: bn_cmp_part_words
  [BU] Calculating graph for: bn_cmp_part_words
    Inlining graph for bn_cmp_words[9+0] into 'bn_cmp_part_words' [9+0]
  [BU] Done inlining: bn_cmp_part_words [9+0]
Visiting single node SCC #: 58 fn: BN_consttime_swap
  [BU] Calculating graph for: BN_consttime_swap
  [BU] Done inlining: BN_consttime_swap [14+0]
Visiting single node SCC #: 59 fn: BN_security_bits
  [BU] Calculating graph for: BN_security_bits
  [BU] Done inlining: BN_security_bits [5+0]
Visiting single node SCC #: 60 fn: BN_zero_ex
  [BU] Calculating graph for: BN_zero_ex
  [BU] Done inlining: BN_zero_ex [2+0]
Visiting single node SCC #: 61 fn: BN_is_word
  [BU] Calculating graph for: BN_is_word
    Inlining graph for BN_abs_is_word[4+0] into 'BN_is_word' [3+0]
  [BU] Done inlining: BN_is_word [4+0]
Visiting single node SCC #: 62 fn: BN_is_negative
  [BU] Calculating graph for: BN_is_negative
  [BU] Done inlining: BN_is_negative [2+0]
Visiting single node SCC #: 63 fn: BN_with_flags
  [BU] Calculating graph for: BN_with_flags
  [BU] Done inlining: BN_with_flags [6+0]
Visiting single node SCC #: 64 fn: BN_GENCB_new
  [BU] Calculating graph for: BN_GENCB_new
  [BU] Done inlining: BN_GENCB_new [4+0]
Visiting single node SCC #: 65 fn: BN_GENCB_free
  [BU] Calculating graph for: BN_GENCB_free
  [BU] Done inlining: BN_GENCB_free [3+0]
Visiting single node SCC #: 66 fn: BN_GENCB_set_old
  [BU] Calculating graph for: BN_GENCB_set_old
  [BU] Done inlining: BN_GENCB_set_old [7+0]
Visiting single node SCC #: 67 fn: BN_GENCB_set
  [BU] Calculating graph for: BN_GENCB_set
  [BU] Done inlining: BN_GENCB_set [7+0]
Visiting single node SCC #: 68 fn: BN_GENCB_get_arg
  [BU] Calculating graph for: BN_GENCB_get_arg
  [BU] Done inlining: BN_GENCB_get_arg [3+0]
[TD] Inlining callers into 'BN_GENCB_get_arg'
[TD] Inlining callers into 'BN_GENCB_set'
[TD] Inlining callers into 'BN_GENCB_set_old'
[TD] Inlining callers into 'BN_GENCB_free'
[TD] Inlining callers into 'BN_GENCB_new'
[TD] Inlining callers into 'BN_with_flags'
[TD] Inlining callers into 'BN_is_negative'
[TD] Inlining callers into 'BN_is_word'
[TD] Inlining callers into 'BN_zero_ex'
[TD] Inlining callers into 'BN_security_bits'
[TD] Inlining callers into 'BN_consttime_swap'
[TD] Inlining callers into 'bn_cmp_part_words'
[TD] Inlining callers into 'bn_cmp_words'
   [TD] Inlining graph into Fn 'bn_cmp_words' from Fn 'bn_cmp_part_words': 3 args
[TD] Inlining callers into 'BN_set_negative'
[TD] Inlining callers into 'BN_mask_bits'
[TD] Inlining callers into 'BN_clear_bit'
[TD] Inlining callers into 'BN_set_bit'
[TD] Inlining callers into 'BN_cmp'
[TD] Inlining callers into 'BN_bn2lebinpad'
[TD] Inlining callers into 'BN_lebin2bn'
[TD] Inlining callers into 'BN_bn2bin'
[TD] Inlining callers into 'BN_bn2binpad'
[TD] Inlining callers into 'bn2binpad'
   [TD] Inlining graph into Fn 'bn2binpad' from Fn 'BN_bn2bin': 3 args
   [TD] Inlining graph into Fn 'bn2binpad' from Fn 'BN_bn2binpad': 3 args
[TD] Inlining callers into 'BN_bin2bn'
[TD] Inlining callers into 'BN_get_word'
[TD] Inlining callers into 'BN_clear'
[TD] Inlining callers into 'BN_swap'
[TD] Inlining callers into 'BN_dup'
[TD] Inlining callers into 'BN_secure_new'
   [TD] Inlining graph into Fn 'BN_secure_new' from Fn 'BN_dup': 0 args
[TD] Inlining callers into 'BN_new'
   [TD] Inlining graph into Fn 'BN_new' from Fn 'BN_lebin2bn': 0 args
   [TD] Inlining graph into Fn 'BN_new' from Fn 'BN_bin2bn': 0 args
   [TD] Inlining graph into Fn 'BN_new' from Fn 'BN_dup': 0 args
   [TD] Inlining graph into Fn 'BN_new' from Fn 'BN_secure_new': 0 args
[TD] Inlining callers into 'bn_init'
[TD] Inlining callers into 'BN_free'
   [TD] Inlining graph into Fn 'BN_free' from Fn 'BN_lebin2bn': 1 args
   [TD] Inlining graph into Fn 'BN_free' from Fn 'BN_bin2bn': 1 args
   [TD] Inlining graph into Fn 'BN_free' from Fn 'BN_dup': 1 args
[TD] Inlining callers into 'BN_clear_free'
[TD] Inlining callers into 'BN_get_params'
[TD] Inlining callers into 'BN_set_params'
[TD] Inlining callers into 'BN_mod_exp_simple'
[TD] Inlining callers into 'BN_mod_exp'
[TD] Inlining callers into 'BN_mod_exp_recp'
   [TD] Inlining graph into Fn 'BN_mod_exp_recp' from Fn 'BN_mod_exp': 5 args
[TD] Inlining callers into 'BN_mod_exp_mont'
   [TD] Inlining graph into Fn 'BN_mod_exp_mont' from Fn 'BN_mod_exp': 6 args
[TD] Inlining callers into 'BN_mod_exp_mont_consttime'
   [TD] Inlining graph into Fn 'BN_mod_exp_mont_consttime' from Fn 'BN_mod_exp_mont': 6 args
[TD] Inlining callers into 'BN_ucmp'
   [TD] Inlining graph into Fn 'BN_ucmp' from Fn 'BN_mod_exp_mont_consttime': 2 args
   [TD] Inlining graph into Fn 'BN_ucmp' from Fn 'BN_mod_exp_mont': 2 args
[TD] Inlining callers into 'BN_value_one'
   [TD] Inlining graph into Fn 'BN_value_one' from Fn 'BN_mod_exp_mont_consttime': 0 args
   [TD] Inlining graph into Fn 'BN_value_one' from Fn 'BN_mod_exp_mont': 0 args
[TD] Inlining callers into 'MOD_EXP_CTIME_COPY_FROM_PREBUF'
   [TD] Inlining graph into Fn 'MOD_EXP_CTIME_COPY_FROM_PREBUF' from Fn 'BN_mod_exp_mont_consttime': 5 args
   [TD] Inlining graph into Fn 'MOD_EXP_CTIME_COPY_FROM_PREBUF' from Fn 'BN_mod_exp_mont_consttime': 5 args
[TD] Inlining callers into 'bn_correct_top'
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'BN_mask_bits': 1 args
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'BN_clear_bit': 1 args
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'BN_lebin2bn': 1 args
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'BN_bin2bn': 1 args
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'MOD_EXP_CTIME_COPY_FROM_PREBUF': 1 args
   [TD] Inlining graph into Fn 'bn_correct_top' from Fn 'BN_mod_exp_mont': 1 args
[TD] Inlining callers into 'constant_time_eq_int'
   [TD] Inlining graph into Fn 'constant_time_eq_int' from Fn 'MOD_EXP_CTIME_COPY_FROM_PREBUF': 2 args
[TD] Inlining callers into 'constant_time_eq'
   [TD] Inlining graph into Fn 'constant_time_eq' from Fn 'constant_time_eq_int': 2 args
[TD] Inlining callers into 'constant_time_is_zero'
   [TD] Inlining graph into Fn 'constant_time_is_zero' from Fn 'constant_time_eq': 1 args
[TD] Inlining callers into 'constant_time_msb'
   [TD] Inlining graph into Fn 'constant_time_msb' from Fn 'constant_time_is_zero': 1 args
[TD] Inlining callers into 'MOD_EXP_CTIME_COPY_TO_PREBUF'
   [TD] Inlining graph into Fn 'MOD_EXP_CTIME_COPY_TO_PREBUF' from Fn 'BN_mod_exp_mont_consttime': 5 args
   [TD] Inlining graph into Fn 'MOD_EXP_CTIME_COPY_TO_PREBUF' from Fn 'BN_mod_exp_mont_consttime': 5 args
[TD] Inlining callers into 'BN_mod_exp_mont_word'
   [TD] Inlining graph into Fn 'BN_mod_exp_mont_word' from Fn 'BN_mod_exp': 6 args
[TD] Inlining callers into 'BN_to_montgomery'
   [TD] Inlining graph into Fn 'BN_to_montgomery' from Fn 'BN_mod_exp_mont_consttime': 4 args
   [TD] Inlining graph into Fn 'BN_to_montgomery' from Fn 'BN_mod_exp_mont_consttime': 4 args
   [TD] Inlining graph into Fn 'BN_to_montgomery' from Fn 'BN_mod_exp_mont_consttime': 4 args
   [TD] Inlining graph into Fn 'BN_to_montgomery' from Fn 'BN_mod_exp_mont': 4 args
   [TD] Inlining graph into Fn 'BN_to_montgomery' from Fn 'BN_mod_exp_mont': 4 args
   [TD] Inlining graph into Fn 'BN_to_montgomery' from Fn 'BN_mod_exp_mont_word': 4 args
[TD] Inlining callers into 'BN_is_one'
   [TD] Inlining graph into Fn 'BN_is_one' from Fn 'BN_mod_exp_simple': 1 args
   [TD] Inlining graph into Fn 'BN_is_one' from Fn 'BN_mod_exp_recp': 1 args
   [TD] Inlining graph into Fn 'BN_is_one' from Fn 'BN_mod_exp_mont_consttime': 1 args
   [TD] Inlining graph into Fn 'BN_is_one' from Fn 'BN_mod_exp_mont': 1 args
   [TD] Inlining graph into Fn 'BN_is_one' from Fn 'BN_mod_exp_mont_word': 1 args
[TD] Inlining callers into 'BN_abs_is_word'
   [TD] Inlining graph into Fn 'BN_abs_is_word' from Fn 'BN_is_word': 2 args
   [TD] Inlining graph into Fn 'BN_abs_is_word' from Fn 'BN_is_one': 2 args
[TD] Inlining callers into 'BN_exp'
[TD] Inlining callers into 'BN_is_bit_set'
   [TD] Inlining graph into Fn 'BN_is_bit_set' from Fn 'BN_mod_exp_simple': 2 args
   [TD] Inlining graph into Fn 'BN_is_bit_set' from Fn 'BN_mod_exp_recp': 2 args
   [TD] Inlining graph into Fn 'BN_is_bit_set' from Fn 'BN_mod_exp_mont_consttime': 2 args
   [TD] Inlining graph into Fn 'BN_is_bit_set' from Fn 'BN_mod_exp_mont': 2 args
   [TD] Inlining graph into Fn 'BN_is_bit_set' from Fn 'BN_mod_exp_mont_word': 2 args
   [TD] Inlining graph into Fn 'BN_is_bit_set' from Fn 'BN_exp': 2 args
[TD] Inlining callers into 'BN_set_word'
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_mod_exp_simple': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_mod_exp_recp': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_mod_exp_mont_consttime': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_mod_exp_mont': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_mod_exp_mont_word': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_mod_exp_mont_word': 2 args
   [TD] Inlining graph into Fn 'BN_set_word' from Fn 'BN_exp': 2 args
[TD] Inlining callers into 'bn_expand'
   [TD] Inlining graph into Fn 'bn_expand' from Fn 'BN_set_word': 2 args
[TD] Inlining callers into 'BN_num_bits'
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_bn2lebinpad': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'bn2binpad': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_mod_exp_simple': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_mod_exp_recp': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_mod_exp_mont_consttime': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_mod_exp_mont': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_mod_exp_mont_word': 1 args
   [TD] Inlining graph into Fn 'BN_num_bits' from Fn 'BN_exp': 1 args
[TD] Inlining callers into 'BN_is_zero'
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_set_negative': 1 args
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_mod_exp_simple': 1 args
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_mod_exp_recp': 1 args
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_mod_exp_mont': 1 args
   [TD] Inlining graph into Fn 'BN_is_zero' from Fn 'BN_num_bits': 1 args
[TD] Inlining callers into 'BN_num_bits_word'
   [TD] Inlining graph into Fn 'BN_num_bits_word' from Fn 'BN_num_bits': 1 args
[TD] Inlining callers into 'BN_is_odd'
   [TD] Inlining graph into Fn 'BN_is_odd' from Fn 'BN_mod_exp_mont_consttime': 1 args
   [TD] Inlining graph into Fn 'BN_is_odd' from Fn 'BN_mod_exp_mont': 1 args
   [TD] Inlining graph into Fn 'BN_is_odd' from Fn 'BN_mod_exp_mont_word': 1 args
   [TD] Inlining graph into Fn 'BN_is_odd' from Fn 'BN_mod_exp': 1 args
   [TD] Inlining graph into Fn 'BN_is_odd' from Fn 'BN_exp': 1 args
[TD] Inlining callers into 'BN_copy'
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_dup': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_mod_exp_recp': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_exp': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_exp': 2 args
   [TD] Inlining graph into Fn 'BN_copy' from Fn 'BN_exp': 2 args
[TD] Inlining callers into 'BN_set_flags'
   [TD] Inlining graph into Fn 'BN_set_flags' from Fn 'BN_copy': 2 args
[TD] Inlining callers into 'bn_wexpand'
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'BN_set_bit': 2 args
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'BN_lebin2bn': 2 args
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'BN_bin2bn': 2 args
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'MOD_EXP_CTIME_COPY_FROM_PREBUF': 2 args
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'BN_mod_exp_mont': 2 args
   [TD] Inlining graph into Fn 'bn_wexpand' from Fn 'BN_copy': 2 args
[TD] Inlining callers into 'bn_expand2'
   [TD] Inlining graph into Fn 'bn_expand2' from Fn 'bn_expand': 2 args
   [TD] Inlining graph into Fn 'bn_expand2' from Fn 'bn_wexpand': 2 args
[TD] Inlining callers into 'bn_expand_internal'
   [TD] Inlining graph into Fn 'bn_expand_internal' from Fn 'bn_expand2': 2 args
[TD] Inlining callers into 'bn_free_d'
   [TD] Inlining graph into Fn 'bn_free_d' from Fn 'BN_free': 1 args
   [TD] Inlining graph into Fn 'bn_free_d' from Fn 'BN_clear_free': 1 args
   [TD] Inlining graph into Fn 'bn_free_d' from Fn 'bn_expand2': 1 args
[TD] Inlining callers into 'BN_get_flags'
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_dup': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_free': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_clear_free': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_simple': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_simple': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_simple': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_recp': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_recp': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_recp': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_mont': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_mont': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_mont': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_mont_word': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp_mont_word': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_mod_exp': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'bn_expand_internal': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'bn_free_d': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_copy': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_exp': 2 args
   [TD] Inlining graph into Fn 'BN_get_flags' from Fn 'BN_exp': 2 args
Running on BN_exp in context []
Running on llvm.dbg.declare in context []
Running on ERR_put_error in context []
Running on BN_CTX_start in context []
Running on BN_CTX_get in context []
Running on BN_sqr in context []
Running on BN_mul in context []
Running on BN_CTX_end in context []
Running on BN_mod_exp in context []
Running on BN_mod_exp_mont_word in context []
Running on BN_mod_exp_mont in context []
Using taint reachable signature for:   call void @ERR_put_error(i32 3, i32 109, i32 102, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 328), !dbg !334
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
Creating ConsElem Map for :	Node0x4a7c670 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str = private unnamed_addr constant [9 x i8] c\"bn_exp.c\\00\", align 1\n|{<s0>0}}"];
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
	Node0x4a7c670 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str = private unnamed_addr constant [9 x i8] c\"bn_exp.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %16), !dbg !359
RSINKGEP INSTRUCTION   %16 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !358
Creating ConsElem Map for :	Node0x4a68180 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
REACHABLE SOURCE:   %16 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !358
	Node0x4a68180 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %16 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !358
Using taint reachable signature for:   %call20 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %17), !dbg !361
RSINKGEP INSTRUCTION   %17 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !360
REACHABLE SOURCE:   %17 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !360
	Node0x4a68180 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %17 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !360
Using taint reachable signature for:   %call21 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %18), !dbg !364
RSINKGEP INSTRUCTION   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !363
REACHABLE SOURCE:   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !363
	Node0x4a68180 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !363
Using taint reachable signature for:   %call22 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %19), !dbg !367
RSINKGEP INSTRUCTION   %19 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !366
REACHABLE SOURCE:   %19 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !366
	Node0x4a68180 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %19 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !366
Using taint reachable signature for:   %call34 = call %struct.bn_mont_ctx_st* @BN_MONT_CTX_new(), !dbg !387
Using taint reachable signature for:   %call38 = call i32 @BN_MONT_CTX_set(%struct.bn_mont_ctx_st* %25, %struct.bignum_st* %26, %struct.bignum_ctx* %27), !dbg !398
RSINKGEP INSTRUCTION   %27 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !397
RSINKGEP INSTRUCTION   %25 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !394
RSINKGEP INSTRUCTION   %26 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !396
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Creating ConsElem Map for :	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
EDGE: [0: tymap-size 1]:i64
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Creating ConsElem Map for :	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Creating ConsElem Map for :	Node0x4a5f8f0 [shape=record,shape=Mrecord,label="{VOID: E\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23|<s24>24|<s25>25|<s26>26|<s27>27|<s28>28|<s29>29|<s30>30|<s31>31|<s32>32|<s33>33|<s34>34|<s35>35|<s36>36|<s37>37|<s38>38|<s39>39|<s40>40|<s41>41|<s42>42|<s43>43|<s44>44|<s45>45|<s46>46|<s47>47|<s48>48|<s49>49|<s50>50|<s51>51|<s52>52|<s53>53|<s54>54|<s55>55|<s56>56|<s57>57|<s58>58|<s59>59|<s60>60|<s61>61|<s62>62|<s63>63|<s64>truncated...}}"];
REACHABLE SOURCE:   %27 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !397
REACHABLE SOURCE:   %25 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !394
REACHABLE SOURCE:   %26 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !396
	Node0x4a68180 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x4a5f8f0 [shape=record,shape=Mrecord,label="{VOID: E\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23|<s24>24|<s25>25|<s26>26|<s27>27|<s28>28|<s29>29|<s30>30|<s31>31|<s32>32|<s33>33|<s34>34|<s35>35|<s36>36|<s37>37|<s38>38|<s39>39|<s40>40|<s41>41|<s42>42|<s43>43|<s44>44|<s45>45|<s46>46|<s47>47|<s48>48|<s49>49|<s50>50|<s51>51|<s52>52|<s53>53|<s54>54|<s55>55|<s56>56|<s57>57|<s58>58|<s59>59|<s60>60|<s61>61|<s62>62|<s63>63|<s64>truncated...}}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %27 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !397
RSINKGEP INSTRUCTION   %25 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !394
RSINKGEP INSTRUCTION   %26 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !396
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Using taint reachable signature for:   %call49 = call i32 @BN_nnmod(%struct.bignum_st* %32, %struct.bignum_st* %33, %struct.bignum_st* %34, %struct.bignum_ctx* %35), !dbg !417
RSINKGEP INSTRUCTION   %35 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !416
RSINKGEP INSTRUCTION   %34 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !415
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %33 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !414
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %32 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx48, align 8, !dbg !411
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
REACHABLE SOURCE:   %35 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !416
REACHABLE SOURCE:   %34 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !415
REACHABLE SOURCE:   %33 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !414
REACHABLE SOURCE:   %32 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx48, align 8, !dbg !411
	Node0x4a68180 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %35 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !416
RSINKGEP INSTRUCTION   %34 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !415
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %33 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !414
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %32 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx48, align 8, !dbg !411
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Using taint reachable signature for:   %call83 = call i32 @BN_mod_mul_montgomery(%struct.bignum_st* %49, %struct.bignum_st* %50, %struct.bignum_st* %51, %struct.bn_mont_ctx_st* %52, %struct.bignum_ctx* %53), !dbg !474
RSINKGEP INSTRUCTION   %50 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx81, align 8, !dbg !470
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %49 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !467
RSINKGEP INSTRUCTION   %51 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx82, align 8, !dbg !471
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %52 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !472
RSINKGEP INSTRUCTION   %53 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !473
Creating ConsElem Map for :	Node0x4a62e40 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
REACHABLE SOURCE:   %50 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx81, align 8, !dbg !470
REACHABLE SOURCE:   %49 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !467
REACHABLE SOURCE:   %51 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx82, align 8, !dbg !471
REACHABLE SOURCE:   %52 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !472
REACHABLE SOURCE:   %53 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !473
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
	Node0x4a62e40 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
	Node0x4a5f8f0 [shape=record,shape=Mrecord,label="{VOID: E\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23|<s24>24|<s25>25|<s26>26|<s27>27|<s28>28|<s29>29|<s30>30|<s31>31|<s32>32|<s33>33|<s34>34|<s35>35|<s36>36|<s37>37|<s38>38|<s39>39|<s40>40|<s41>41|<s42>42|<s43>43|<s44>44|<s45>45|<s46>46|<s47>47|<s48>48|<s49>49|<s50>50|<s51>51|<s52>52|<s53>53|<s54>54|<s55>55|<s56>56|<s57>57|<s58>58|<s59>59|<s60>60|<s61>61|<s62>62|<s63>63|<s64>truncated...}}"];
	Node0x4a68180 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %50 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx81, align 8, !dbg !470
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %49 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !467
RSINKGEP INSTRUCTION   %51 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx82, align 8, !dbg !471
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %52 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !472
RSINKGEP INSTRUCTION   %53 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !473
Using taint reachable signature for:   %call88 = call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* %57), !dbg !494
RSINKGEP INSTRUCTION   %57 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !491
REACHABLE SOURCE:   %57 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !491
	Node0x4a68180 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %57 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !491
Using taint reachable signature for:   %call97 = call i32 @BN_mod_mul_montgomery(%struct.bignum_st* %60, %struct.bignum_st* %62, %struct.bignum_st* %63, %struct.bn_mont_ctx_st* %64, %struct.bignum_ctx* %65), !dbg !508
RSINKGEP INSTRUCTION   %62 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx96, align 8, !dbg !504
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %60 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx93, align 8, !dbg !501
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %65 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !507
RSINKGEP INSTRUCTION   %64 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !506
RSINKGEP INSTRUCTION   %63 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !505
REACHABLE SOURCE:   %62 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx96, align 8, !dbg !504
REACHABLE SOURCE:   %60 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx93, align 8, !dbg !501
REACHABLE SOURCE:   %65 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !507
REACHABLE SOURCE:   %64 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !506
REACHABLE SOURCE:   %63 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !505
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
	Node0x4a68180 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x4a5f8f0 [shape=record,shape=Mrecord,label="{VOID: E\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23|<s24>24|<s25>25|<s26>26|<s27>27|<s28>28|<s29>29|<s30>30|<s31>31|<s32>32|<s33>33|<s34>34|<s35>35|<s36>36|<s37>37|<s38>38|<s39>39|<s40>40|<s41>41|<s42>42|<s43>43|<s44>44|<s45>45|<s46>46|<s47>47|<s48>48|<s49>49|<s50>50|<s51>51|<s52>52|<s53>53|<s54>54|<s55>55|<s56>56|<s57>57|<s58>58|<s59>59|<s60>60|<s61>61|<s62>62|<s63>63|<s64>truncated...}}"];
	Node0x4a62e40 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %62 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx96, align 8, !dbg !504
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %60 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx93, align 8, !dbg !501
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %65 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !507
RSINKGEP INSTRUCTION   %64 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !506
RSINKGEP INSTRUCTION   %63 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !505
Using taint reachable signature for:   %call145 = call i32 @BN_mod_mul_montgomery(%struct.bignum_st* %100, %struct.bignum_st* %101, %struct.bignum_st* %102, %struct.bn_mont_ctx_st* %103, %struct.bignum_ctx* %104), !dbg !601
RSINKGEP INSTRUCTION   %104 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !600
RSINKGEP INSTRUCTION   %103 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !599
RSINKGEP INSTRUCTION   %102 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !598
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %101 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !597
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %100 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !594
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
REACHABLE SOURCE:   %104 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !600
REACHABLE SOURCE:   %103 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !599
REACHABLE SOURCE:   %102 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !598
REACHABLE SOURCE:   %101 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !597
REACHABLE SOURCE:   %100 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !594
	Node0x4a68180 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x4a5f8f0 [shape=record,shape=Mrecord,label="{VOID: E\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23|<s24>24|<s25>25|<s26>26|<s27>27|<s28>28|<s29>29|<s30>30|<s31>31|<s32>32|<s33>33|<s34>34|<s35>35|<s36>36|<s37>37|<s38>38|<s39>39|<s40>40|<s41>41|<s42>42|<s43>43|<s44>44|<s45>45|<s46>46|<s47>47|<s48>48|<s49>49|<s50>50|<s51>51|<s52>52|<s53>53|<s54>54|<s55>55|<s56>56|<s57>57|<s58>58|<s59>59|<s60>60|<s61>61|<s62>62|<s63>63|<s64>truncated...}}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %104 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !600
RSINKGEP INSTRUCTION   %103 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !599
RSINKGEP INSTRUCTION   %102 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !598
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %101 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !597
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %100 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !594
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Using taint reachable signature for:   %call176 = call i32 @BN_mod_mul_montgomery(%struct.bignum_st* %125, %struct.bignum_st* %126, %struct.bignum_st* %127, %struct.bn_mont_ctx_st* %128, %struct.bignum_ctx* %129), !dbg !676
RSINKGEP INSTRUCTION   %126 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !672
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %125 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !669
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %129 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !675
RSINKGEP INSTRUCTION   %128 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !674
RSINKGEP INSTRUCTION   %127 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !673
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
REACHABLE SOURCE:   %126 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !672
REACHABLE SOURCE:   %125 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !669
REACHABLE SOURCE:   %129 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !675
REACHABLE SOURCE:   %128 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !674
REACHABLE SOURCE:   %127 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !673
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
	Node0x4a68180 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x4a5f8f0 [shape=record,shape=Mrecord,label="{VOID: E\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23|<s24>24|<s25>25|<s26>26|<s27>27|<s28>28|<s29>29|<s30>30|<s31>31|<s32>32|<s33>33|<s34>34|<s35>35|<s36>36|<s37>37|<s38>38|<s39>39|<s40>40|<s41>41|<s42>42|<s43>43|<s44>44|<s45>45|<s46>46|<s47>47|<s48>48|<s49>49|<s50>50|<s51>51|<s52>52|<s53>53|<s54>54|<s55>55|<s56>56|<s57>57|<s58>58|<s59>59|<s60>60|<s61>61|<s62>62|<s63>63|<s64>truncated...}}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %126 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !672
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %125 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !669
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %129 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !675
RSINKGEP INSTRUCTION   %128 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !674
RSINKGEP INSTRUCTION   %127 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !673
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Using taint reachable signature for:   %call186 = call i32 @BN_mod_mul_montgomery(%struct.bignum_st* %131, %struct.bignum_st* %132, %struct.bignum_st* %134, %struct.bn_mont_ctx_st* %135, %struct.bignum_ctx* %136), !dbg !691
RSINKGEP INSTRUCTION   %136 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !690
RSINKGEP INSTRUCTION   %131 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !683
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %132 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !685
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %134 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx185, align 8, !dbg !688
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %135 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !689
REACHABLE SOURCE:   %136 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !690
REACHABLE SOURCE:   %131 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !683
REACHABLE SOURCE:   %132 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !685
REACHABLE SOURCE:   %134 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx185, align 8, !dbg !688
REACHABLE SOURCE:   %135 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !689
	Node0x4a68180 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
	Node0x4a5f8f0 [shape=record,shape=Mrecord,label="{VOID: E\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23|<s24>24|<s25>25|<s26>26|<s27>27|<s28>28|<s29>29|<s30>30|<s31>31|<s32>32|<s33>33|<s34>34|<s35>35|<s36>36|<s37>37|<s38>38|<s39>39|<s40>40|<s41>41|<s42>42|<s43>43|<s44>44|<s45>45|<s46>46|<s47>47|<s48>48|<s49>49|<s50>50|<s51>51|<s52>52|<s53>53|<s54>54|<s55>55|<s56>56|<s57>57|<s58>58|<s59>59|<s60>60|<s61>61|<s62>62|<s63>63|<s64>truncated...}}"];
RSINKGEP INSTRUCTION   %136 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !690
RSINKGEP INSTRUCTION   %131 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !683
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %132 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !685
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %134 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx185, align 8, !dbg !688
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %135 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !689
Using taint reachable signature for:   %call196 = call i32 @BN_from_montgomery(%struct.bignum_st* %140, %struct.bignum_st* %141, %struct.bn_mont_ctx_st* %142, %struct.bignum_ctx* %143), !dbg !710
RSINKGEP INSTRUCTION   %142 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !708
RSINKGEP INSTRUCTION   %143 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !709
RSINKGEP INSTRUCTION   %141 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !707
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %140 = load %struct.bignum_st*, %struct.bignum_st** %rr.addr, align 8, !dbg !705
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
REACHABLE SOURCE:   %142 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !708
REACHABLE SOURCE:   %143 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !709
REACHABLE SOURCE:   %141 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !707
REACHABLE SOURCE:   %140 = load %struct.bignum_st*, %struct.bignum_st** %rr.addr, align 8, !dbg !705
	Node0x4a5f8f0 [shape=record,shape=Mrecord,label="{VOID: E\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23|<s24>24|<s25>25|<s26>26|<s27>27|<s28>28|<s29>29|<s30>30|<s31>31|<s32>32|<s33>33|<s34>34|<s35>35|<s36>36|<s37>37|<s38>38|<s39>39|<s40>40|<s41>41|<s42>42|<s43>43|<s44>44|<s45>45|<s46>46|<s47>47|<s48>48|<s49>49|<s50>50|<s51>51|<s52>52|<s53>53|<s54>54|<s55>55|<s56>56|<s57>57|<s58>58|<s59>59|<s60>60|<s61>61|<s62>62|<s63>63|<s64>truncated...}}"];
	Node0x4a68180 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %142 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !708
RSINKGEP INSTRUCTION   %143 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !709
RSINKGEP INSTRUCTION   %141 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !707
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %140 = load %struct.bignum_st*, %struct.bignum_st** %rr.addr, align 8, !dbg !705
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Using taint reachable signature for:   call void @BN_MONT_CTX_free(%struct.bn_mont_ctx_st* %145), !dbg !720
RSINKGEP INSTRUCTION   %145 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !719
REACHABLE SOURCE:   %145 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !719
	Node0x4a5f8f0 [shape=record,shape=Mrecord,label="{VOID: E\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23|<s24>24|<s25>25|<s26>26|<s27>27|<s28>28|<s29>29|<s30>30|<s31>31|<s32>32|<s33>33|<s34>34|<s35>35|<s36>36|<s37>37|<s38>38|<s39>39|<s40>40|<s41>41|<s42>42|<s43>43|<s44>44|<s45>45|<s46>46|<s47>47|<s48>48|<s49>49|<s50>50|<s51>51|<s52>52|<s53>53|<s54>54|<s55>55|<s56>56|<s57>57|<s58>58|<s59>59|<s60>60|<s61>61|<s62>62|<s63>63|<s64>truncated...}}"];
RSINKGEP INSTRUCTION   %145 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !719
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %146), !dbg !722
RSINKGEP INSTRUCTION   %146 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !721
REACHABLE SOURCE:   %146 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !721
	Node0x4a68180 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %146 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !721
Creating ConsElem Map for :	Node0x4a61180 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a61180:s0 -> Node0x4a60680;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a60680 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a60680:s0 -> Node0x4a636e0;
Creating ConsElem Map for :	Node0x4a61300 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a61300:s0 -> Node0x4a60800;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a60800 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a60800:s0 -> Node0x4a63820;
Creating ConsElem Map for :	Node0x4a61480 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a61480:s0 -> Node0x4a60a00;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a60a00 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a60a00:s0 -> Node0x4a63960;
Creating ConsElem Map for :	Node0x4a61600 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a61600:s0 -> Node0x4a60c00;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a60c00 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a60c00:s0 -> Node0x4a631c0;
Creating ConsElem Map for :	Node0x4a61780 [shape=record,shape=Mrecord,label="{0: %struct.bignum_ctx*,  : SMR\n|{<s0>0}}"];
	Node0x4a61780:s0 -> Node0x4a60e40;
EDGE: [0: tymap-size 1]:%struct.bignum_ctx = type opaque
	Node0x4a60e40 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x4a61900 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a61900:s0 -> Node0x4a60f40;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x4a60f40 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x4a61e40 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a62480 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a62bc0 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a62bc0:s0 -> Node0x4a60f40;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x4a60f40 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x4a61040 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a61d00 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a625c0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a625c0:s0 -> Node0x4a62e40;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a62e40 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x4a62740 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a62740:s0 -> Node0x4a62f40;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a62f40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x4a62f40:s0 -> Node0x4a63300;
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !368
[Sink:]   %arrayidx = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !368
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Tainting at offset: 0
	Node0x4a60800 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a60800:s0 -> Node0x4a63820;
Trying to find element at offset 0
Tainting at offset: 0
Created 32 constraint variable(s) for node of size 8
	Node0x4a62a40 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x4a62a40:s0 -> Node0x4a60800;
Trying to find element at offset 0
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !368
[Sink:]   %arrayidx = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !368
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Tainting at offset: 0
	Node0x4a60800 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a60800:s0 -> Node0x4a63820;
Trying to find element at offset 0
Tainting at offset: 0
	Node0x4a62a40 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x4a62a40:s0 -> Node0x4a60800;
Trying to find element at offset 0
DSOURCEGEP INSTRUCTION   %arrayidx27 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !376
[Source:]   %arrayidx27 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !376
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Trying to find element at offset 0
	Node0x4a62a40 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x4a62a40:s0 -> Node0x4a60800;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x4c73130
CONSTRAINING: 0: %struct.bignum_st*,   array: SCMR: elem 0::0x4d39110
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %28, i32 0, i32 3, !dbg !403
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %28, i32 0, i32 3, !dbg !403
StructType: allocation intermediate:   %28 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !401
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 16
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[16,20]0x4b55980
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
DSOURCEGEP INSTRUCTION   %arrayidx48 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !411
[Source:]   %arrayidx48 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !411
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Trying to find element at offset 0
	Node0x4a62a40 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x4a62a40:s0 -> Node0x4a60800;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x4c73130
CONSTRAINING: 0: %struct.bignum_st*,   array: SCMR: elem 0::0x4d39110
DSOURCEGEP INSTRUCTION   %arrayidx53 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !420
[Source:]   %arrayidx53 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !420
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Trying to find element at offset 0
	Node0x4a62a40 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x4a62a40:s0 -> Node0x4a60800;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x4c73130
CONSTRAINING: 0: %struct.bignum_st*,   array: SCMR: elem 0::0x4d39110
Creating ConsElem Map for :	Node0x4a628c0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a628c0:s0 -> Node0x4a60800;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a60800 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a60800:s0 -> Node0x4a63820;
DSOURCEGEP INSTRUCTION   %arrayidx61 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !433
[Source:]   %arrayidx61 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !433
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Trying to find element at offset 0
	Node0x4a62a40 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x4a62a40:s0 -> Node0x4a60800;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x4c73130
CONSTRAINING: 0: %struct.bignum_st*,   array: SCMR: elem 0::0x4d39110
Creating ConsElem Map for :	Node0x4a62200 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx81 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !470
[Source:]   %arrayidx81 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !470
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Trying to find element at offset 0
	Node0x4a62a40 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x4a62a40:s0 -> Node0x4a60800;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x4c73130
CONSTRAINING: 0: %struct.bignum_st*,   array: SCMR: elem 0::0x4d39110
DSOURCEGEP INSTRUCTION   %arrayidx82 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !471
[Source:]   %arrayidx82 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 0, !dbg !471
ArrayType:FINAL:   %val = alloca [32 x %struct.bignum_st*], align 16
Trying to find element at offset 0
	Node0x4a62a40 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,   array: SMR\n|{<s0>0}}"];
	Node0x4a62a40:s0 -> Node0x4a60800;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x4c73130
CONSTRAINING: 0: %struct.bignum_st*,   array: SCMR: elem 0::0x4d39110
Creating ConsElem Map for :	Node0x4a61bc0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a61a80 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSINKGEP INSTRUCTION   %arrayidx89 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom, !dbg !496
[Sink:]   %arrayidx89 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom, !dbg !496
DSINKGEP INSTRUCTION   %arrayidx89 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom, !dbg !496
[Sink:]   %arrayidx89 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom, !dbg !496
DSOURCEGEP INSTRUCTION   %arrayidx93 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom92, !dbg !501
[Source:]   %arrayidx93 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom92, !dbg !501
DSOURCEGEP INSTRUCTION   %arrayidx96 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom95, !dbg !504
[Source:]   %arrayidx96 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom95, !dbg !504
Creating ConsElem Map for :	Node0x4a62340 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a61f80 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a620c0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %68, i32 0, i32 1, !dbg !522
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %68, i32 0, i32 1, !dbg !522
StructType: allocation intermediate:   %68 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !521
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[8,12]0x4ca1660
DSOURCEGEP INSTRUCTION   %d105 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %71, i32 0, i32 0, !dbg !528
[Source:]   %d105 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %71, i32 0, i32 0, !dbg !528
StructType: allocation intermediate:   %71 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !527
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x4ca15b0
DSOURCEGEP INSTRUCTION   %arrayidx106 = getelementptr inbounds i64, i64* %72, i64 %idxprom104, !dbg !527
[Source:]   %arrayidx106 = getelementptr inbounds i64, i64* %72, i64 %idxprom104, !dbg !527
DSOURCEGEP INSTRUCTION   %d113 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %76, i32 0, i32 0, !dbg !540
[Source:]   %d113 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %76, i32 0, i32 0, !dbg !540
StructType: allocation intermediate:   %76 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !539
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x4ca15b0
DSOURCEGEP INSTRUCTION   %arrayidx114 = getelementptr inbounds i64, i64* %77, i64 0, !dbg !539
[Source:]   %arrayidx114 = getelementptr inbounds i64, i64* %77, i64 0, !dbg !539
 allocation intermediate:   %77 = load i64*, i64** %d113, align 8, !dbg !540
=>  %d113 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %76, i32 0, i32 0, !dbg !540
 allocation intermediate:   %d113 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %76, i32 0, i32 0, !dbg !540
=>  %76 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !539
 allocation intermediate:   %76 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !539
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 0
CONSTRAINING: 0: i64,   array: CRE: elem 0:default:0x4b5aa50
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x4ca15b0
DSOURCEGEP INSTRUCTION   %d116 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %79, i32 0, i32 0, !dbg !543
[Source:]   %d116 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %79, i32 0, i32 0, !dbg !543
StructType: allocation intermediate:   %79 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !542
=>  %r = alloca %struct.bignum_st*, align 8
FINAL:   %r = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x4d246f0
DSINKGEP INSTRUCTION   %arrayidx117 = getelementptr inbounds i64, i64* %80, i64 0, !dbg !542
[Sink:]   %arrayidx117 = getelementptr inbounds i64, i64* %80, i64 0, !dbg !542
 allocation intermediate:   %80 = load i64*, i64** %d116, align 8, !dbg !543
=>  %d116 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %79, i32 0, i32 0, !dbg !543
 allocation intermediate:   %d116 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %79, i32 0, i32 0, !dbg !543
=>  %79 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !542
 allocation intermediate:   %79 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !542
=>  %r = alloca %struct.bignum_st*, align 8
FINAL:   %r = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 0
Tainting at offset: 0
	Node0x4a62f40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x4a62f40:s0 -> Node0x4a63300;
Trying to find element at offset 0
DSINKGEP INSTRUCTION   %arrayidx117 = getelementptr inbounds i64, i64* %80, i64 0, !dbg !542
[Sink:]   %arrayidx117 = getelementptr inbounds i64, i64* %80, i64 0, !dbg !542
 allocation intermediate:   %80 = load i64*, i64** %d116, align 8, !dbg !543
=>  %d116 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %79, i32 0, i32 0, !dbg !543
 allocation intermediate:   %d116 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %79, i32 0, i32 0, !dbg !543
=>  %79 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !542
 allocation intermediate:   %79 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !542
=>  %r = alloca %struct.bignum_st*, align 8
FINAL:   %r = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 0
Tainting at offset: 0
	Node0x4a62f40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x4a62f40:s0 -> Node0x4a63300;
Trying to find element at offset 0
DSOURCEGEP INSTRUCTION   %d122 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %84, i32 0, i32 0, !dbg !557
[Source:]   %d122 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %84, i32 0, i32 0, !dbg !557
StructType: allocation intermediate:   %84 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !556
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x4ca15b0
DSOURCEGEP INSTRUCTION   %arrayidx123 = getelementptr inbounds i64, i64* %85, i64 %idxprom121, !dbg !556
[Source:]   %arrayidx123 = getelementptr inbounds i64, i64* %85, i64 %idxprom121, !dbg !556
DSOURCEGEP INSTRUCTION   %d126 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %88, i32 0, i32 0, !dbg !561
[Source:]   %d126 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %88, i32 0, i32 0, !dbg !561
StructType: allocation intermediate:   %88 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !560
=>  %r = alloca %struct.bignum_st*, align 8
FINAL:   %r = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x4d246f0
DSINKGEP INSTRUCTION   %arrayidx127 = getelementptr inbounds i64, i64* %89, i64 %idxprom125, !dbg !560
[Sink:]   %arrayidx127 = getelementptr inbounds i64, i64* %89, i64 %idxprom125, !dbg !560
DSINKGEP INSTRUCTION   %arrayidx127 = getelementptr inbounds i64, i64* %89, i64 %idxprom125, !dbg !560
[Sink:]   %arrayidx127 = getelementptr inbounds i64, i64* %89, i64 %idxprom125, !dbg !560
DSINKGEP INSTRUCTION   %top131 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %92, i32 0, i32 1, !dbg !567
[Sink:]   %top131 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %92, i32 0, i32 1, !dbg !567
StructType:::IS STRUCT TY:: allocation intermediate:   %92 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !566
=>  %r = alloca %struct.bignum_st*, align 8
FINAL:   %r = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
Tainting at offset: 8
	Node0x4a62f40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x4a62f40:s0 -> Node0x4a63300;
Trying to find element at offset 8
DSINKGEP INSTRUCTION   %top131 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %92, i32 0, i32 1, !dbg !567
[Sink:]   %top131 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %92, i32 0, i32 1, !dbg !567
StructType:::IS STRUCT TY:: allocation intermediate:   %92 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !566
=>  %r = alloca %struct.bignum_st*, align 8
FINAL:   %r = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
Tainting at offset: 8
	Node0x4a62f40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0}}"];
	Node0x4a62f40:s0 -> Node0x4a63300;
Trying to find element at offset 8
DSOURCEGEP INSTRUCTION   %arrayidx185 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom184, !dbg !688
[Source:]   %arrayidx185 = getelementptr inbounds [32 x %struct.bignum_st*], [32 x %struct.bignum_st*]* %val, i32 0, i64 %idxprom184, !dbg !688
Running on BN_mod_exp_recp in context []
Running on BN_RECP_CTX_init in context []
Running on BN_RECP_CTX_set in context []
Running on BN_nnmod in context []
Running on BN_mod_mul_reciprocal in context []
Running on BN_new in context []
Running on CRYPTO_zalloc in context []
Running on BN_secure_new in context []
Running on bn_expand2 in context []
Running on BN_dup in context []
Running on BN_copy in context []
Running on BN_RECP_CTX_free in context []
Running on BN_mod_exp_mont_consttime in context []
Running on BN_MONT_CTX_new in context []
Running on BN_MONT_CTX_set in context []
Running on BN_mod_mul_montgomery in context []
Running on BN_from_montgomery in context []
Running on BN_MONT_CTX_free in context []
Running on CRYPTO_malloc in context []
Running on llvm.memset.p0i8.i64 in context []
Running on BN_div in context []
Running on OPENSSL_cleanse in context []
Running on CRYPTO_free in context []
Running on BN_mul_word in context []
Running on BN_mod_exp_simple in context []
Running on BN_mod_mul in context []
Running on BN_abs_is_word in context []
Running on BN_is_one in context []
Running on BN_is_word in context []
Running on BN_is_odd in context []
Running on BN_is_negative in context []
Running on BN_to_montgomery in context []
Running on BN_with_flags in context []
Running on BN_GENCB_new in context []
Running on BN_set_params in context []
Running on BN_get_params in context []
Running on BN_value_one in context []
Running on BN_num_bits_word in context []
Running on BN_num_bits in context []
Running on BN_is_zero in context []
Running on BN_clear_free in context []
Running on BN_get_flags in context []
Running on BN_free in context []
Running on bn_init in context []
Running on llvm.memcpy.p0i8.p0i8.i64 in context []
Running on bn_wexpand in context []
Running on BN_set_flags in context []
Running on BN_swap in context []
Running on BN_clear in context []
Running on BN_get_word in context []
Running on BN_set_word in context []
Running on BN_bin2bn in context []
Running on bn_correct_top in context []
Running on BN_bn2binpad in context []
Running on BN_bn2bin in context []
Running on BN_lebin2bn in context []
Running on BN_bn2lebinpad in context []
Running on BN_ucmp in context []
Running on BN_cmp in context []
Running on BN_set_bit in context []
Running on BN_clear_bit in context []
Running on BN_is_bit_set in context []
Running on BN_mask_bits in context []
Running on BN_set_negative in context []
Running on bn_cmp_words in context []
Running on bn_cmp_part_words in context []
Running on BN_consttime_swap in context []
Running on __assert_fail in context []
Running on BN_security_bits in context []
Running on BN_zero_ex in context []
Running on BN_GENCB_free in context []
Running on BN_GENCB_set_old in context []
Running on BN_GENCB_set in context []
Running on BN_GENCB_get_arg in context []
Running on CRYPTO_secure_free in context []
Running on CRYPTO_secure_zalloc in context []
Running on BN_get_flags in context [BN_mod_exp_mont ]
Creating ConsElem Map for :	Node0x4a4c530 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a4c530:s0 -> Node0x4a4c3b0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a4c3b0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a4c3b0:s0 -> Node0x4a506c0;
Creating ConsElem Map for :	Node0x4a4c5f0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !269
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !269
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !268
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 20
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[20,24]0x4b7a2b0
Running on BN_mod_exp_mont_consttime in context [BN_mod_exp_mont ]
Using taint reachable signature for:   call void @ERR_put_error(i32 3, i32 124, i32 102, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 622), !dbg !306
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
	Node0x4a7c670 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str = private unnamed_addr constant [9 x i8] c\"bn_exp.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
Using taint reachable signature for:   call void @BN_CTX_start(%struct.bignum_ctx* %9), !dbg !334
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !333
REACHABLE SOURCE:   %9 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !333
	Node0x4a68180 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %9 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !333
Using taint reachable signature for:   %call15 = call %struct.bn_mont_ctx_st* @BN_MONT_CTX_new(), !dbg !342
Using taint reachable signature for:   %call19 = call i32 @BN_MONT_CTX_set(%struct.bn_mont_ctx_st* %12, %struct.bignum_st* %13, %struct.bignum_ctx* %14), !dbg !353
RSINKGEP INSTRUCTION   %12 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !349
RSINKGEP INSTRUCTION   %13 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !351
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %14 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !352
REACHABLE SOURCE:   %12 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !349
REACHABLE SOURCE:   %13 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !351
REACHABLE SOURCE:   %14 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !352
	Node0x4a5f8f0 [shape=record,shape=Mrecord,label="{VOID: E\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23|<s24>24|<s25>25|<s26>26|<s27>27|<s28>28|<s29>29|<s30>30|<s31>31|<s32>32|<s33>33|<s34>34|<s35>35|<s36>36|<s37>37|<s38>38|<s39>39|<s40>40|<s41>41|<s42>42|<s43>43|<s44>44|<s45>45|<s46>46|<s47>47|<s48>48|<s49>49|<s50>50|<s51>51|<s52>52|<s53>53|<s54>54|<s55>55|<s56>56|<s57>57|<s58>58|<s59>59|<s60>60|<s61>61|<s62>62|<s63>63|<s64>truncated...}}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
	Node0x4a68180 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %12 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !349
RSINKGEP INSTRUCTION   %13 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !351
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %14 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !352
Using taint reachable signature for:   %call56 = call i8* @CRYPTO_malloc(i64 %conv55, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 718), !dbg !403
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
	Node0x4a7c670 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str = private unnamed_addr constant [9 x i8] c\"bn_exp.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
Using taint reachable signature for:   %call113 = call i32 @BN_div(%struct.bignum_st* null, %struct.bignum_st* %am, %struct.bignum_st* %68, %struct.bignum_st* %69, %struct.bignum_ctx* %70), !dbg !506
RSINKGEP INSTRUCTION   %70 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !506
RSINKGEP INSTRUCTION %struct.bignum_st* null
RSINKGEP INSTRUCTION   %69 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !506
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %68 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !506
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %am = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
REACHABLE SOURCE:   %70 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !506
REACHABLE SOURCE: %struct.bignum_st* null
REACHABLE SOURCE:   %69 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !506
REACHABLE SOURCE:   %68 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !506
REACHABLE SOURCE:   %am = alloca %struct.bignum_st, align 8
	Node0x4a68180 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %70 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !506
RSINKGEP INSTRUCTION %struct.bignum_st* null
RSINKGEP INSTRUCTION   %69 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !506
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %68 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !506
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %am = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Using taint reachable signature for:   %call138 = call i32 @BN_mod_mul_montgomery(%struct.bignum_st* %tmp, %struct.bignum_st* %am, %struct.bignum_st* %am, %struct.bn_mont_ctx_st* %83, %struct.bignum_ctx* %84), !dbg !548
RSINKGEP INSTRUCTION   %83 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !544
RSINKGEP INSTRUCTION   %84 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !547
RSINKGEP INSTRUCTION   %tmp = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %am = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
REACHABLE SOURCE:   %83 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !544
REACHABLE SOURCE:   %84 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !547
REACHABLE SOURCE:   %tmp = alloca %struct.bignum_st, align 8
REACHABLE SOURCE:   %am = alloca %struct.bignum_st, align 8
	Node0x4a5f8f0 [shape=record,shape=Mrecord,label="{VOID: E\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23|<s24>24|<s25>25|<s26>26|<s27>27|<s28>28|<s29>29|<s30>30|<s31>31|<s32>32|<s33>33|<s34>34|<s35>35|<s36>36|<s37>37|<s38>38|<s39>39|<s40>40|<s41>41|<s42>42|<s43>43|<s44>44|<s45>45|<s46>46|<s47>47|<s48>48|<s49>49|<s50>50|<s51>51|<s52>52|<s53>53|<s54>54|<s55>55|<s56>56|<s57>57|<s58>58|<s59>59|<s60>60|<s61>61|<s62>62|<s63>63|<s64>truncated...}}"];
	Node0x4a68180 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %83 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !544
RSINKGEP INSTRUCTION   %84 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !547
RSINKGEP INSTRUCTION   %tmp = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %am = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Using taint reachable signature for:   %call150 = call i32 @BN_mod_mul_montgomery(%struct.bignum_st* %tmp, %struct.bignum_st* %am, %struct.bignum_st* %tmp, %struct.bn_mont_ctx_st* %90, %struct.bignum_ctx* %91), !dbg !572
RSINKGEP INSTRUCTION   %91 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !571
RSINKGEP INSTRUCTION   %90 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !568
RSINKGEP INSTRUCTION   %tmp = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %am = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
REACHABLE SOURCE:   %91 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !571
REACHABLE SOURCE:   %90 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !568
REACHABLE SOURCE:   %tmp = alloca %struct.bignum_st, align 8
REACHABLE SOURCE:   %am = alloca %struct.bignum_st, align 8
	Node0x4a68180 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x4a5f8f0 [shape=record,shape=Mrecord,label="{VOID: E\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23|<s24>24|<s25>25|<s26>26|<s27>27|<s28>28|<s29>29|<s30>30|<s31>31|<s32>32|<s33>33|<s34>34|<s35>35|<s36>36|<s37>37|<s38>38|<s39>39|<s40>40|<s41>41|<s42>42|<s43>43|<s44>44|<s45>45|<s46>46|<s47>47|<s48>48|<s49>49|<s50>50|<s51>51|<s52>52|<s53>53|<s54>54|<s55>55|<s56>56|<s57>57|<s58>58|<s59>59|<s60>60|<s61>61|<s62>62|<s63>63|<s64>truncated...}}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %91 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !571
RSINKGEP INSTRUCTION   %90 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !568
RSINKGEP INSTRUCTION   %tmp = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %am = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Using taint reachable signature for:   %call183 = call i32 @BN_mod_mul_montgomery(%struct.bignum_st* %tmp, %struct.bignum_st* %tmp, %struct.bignum_st* %tmp, %struct.bn_mont_ctx_st* %113, %struct.bignum_ctx* %114), !dbg !641
RSINKGEP INSTRUCTION   %114 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !640
RSINKGEP INSTRUCTION   %113 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !637
RSINKGEP INSTRUCTION   %tmp = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
REACHABLE SOURCE:   %114 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !640
REACHABLE SOURCE:   %113 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !637
REACHABLE SOURCE:   %tmp = alloca %struct.bignum_st, align 8
	Node0x4a68180 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x4a5f8f0 [shape=record,shape=Mrecord,label="{VOID: E\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23|<s24>24|<s25>25|<s26>26|<s27>27|<s28>28|<s29>29|<s30>30|<s31>31|<s32>32|<s33>33|<s34>34|<s35>35|<s36>36|<s37>37|<s38>38|<s39>39|<s40>40|<s41>41|<s42>42|<s43>43|<s44>44|<s45>45|<s46>46|<s47>47|<s48>48|<s49>49|<s50>50|<s51>51|<s52>52|<s53>53|<s54>54|<s55>55|<s56>56|<s57>57|<s58>58|<s59>59|<s60>60|<s61>61|<s62>62|<s63>63|<s64>truncated...}}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %114 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !640
RSINKGEP INSTRUCTION   %113 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !637
RSINKGEP INSTRUCTION   %tmp = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Using taint reachable signature for:   %call198 = call i32 @BN_mod_mul_montgomery(%struct.bignum_st* %tmp, %struct.bignum_st* %tmp, %struct.bignum_st* %am, %struct.bn_mont_ctx_st* %124, %struct.bignum_ctx* %125), !dbg !666
RSINKGEP INSTRUCTION   %125 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !665
RSINKGEP INSTRUCTION   %124 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !663
RSINKGEP INSTRUCTION   %tmp = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %am = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
REACHABLE SOURCE:   %125 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !665
REACHABLE SOURCE:   %124 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !663
REACHABLE SOURCE:   %tmp = alloca %struct.bignum_st, align 8
REACHABLE SOURCE:   %am = alloca %struct.bignum_st, align 8
	Node0x4a68180 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x4a5f8f0 [shape=record,shape=Mrecord,label="{VOID: E\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23|<s24>24|<s25>25|<s26>26|<s27>27|<s28>28|<s29>29|<s30>30|<s31>31|<s32>32|<s33>33|<s34>34|<s35>35|<s36>36|<s37>37|<s38>38|<s39>39|<s40>40|<s41>41|<s42>42|<s43>43|<s44>44|<s45>45|<s46>46|<s47>47|<s48>48|<s49>49|<s50>50|<s51>51|<s52>52|<s53>53|<s54>54|<s55>55|<s56>56|<s57>57|<s58>58|<s59>59|<s60>60|<s61>61|<s62>62|<s63>63|<s64>truncated...}}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %125 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !665
RSINKGEP INSTRUCTION   %124 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !663
RSINKGEP INSTRUCTION   %tmp = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %am = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Using taint reachable signature for:   %call202 = call i32 @BN_from_montgomery(%struct.bignum_st* %126, %struct.bignum_st* %tmp, %struct.bn_mont_ctx_st* %127, %struct.bignum_ctx* %128), !dbg !673
RSINKGEP INSTRUCTION   %127 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !671
RSINKGEP INSTRUCTION   %128 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !672
RSINKGEP INSTRUCTION   %tmp = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %126 = load %struct.bignum_st*, %struct.bignum_st** %rr.addr, align 8, !dbg !669
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
REACHABLE SOURCE:   %127 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !671
REACHABLE SOURCE:   %128 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !672
REACHABLE SOURCE:   %tmp = alloca %struct.bignum_st, align 8
REACHABLE SOURCE:   %126 = load %struct.bignum_st*, %struct.bignum_st** %rr.addr, align 8, !dbg !669
	Node0x4a5f8f0 [shape=record,shape=Mrecord,label="{VOID: E\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23|<s24>24|<s25>25|<s26>26|<s27>27|<s28>28|<s29>29|<s30>30|<s31>31|<s32>32|<s33>33|<s34>34|<s35>35|<s36>36|<s37>37|<s38>38|<s39>39|<s40>40|<s41>41|<s42>42|<s43>43|<s44>44|<s45>45|<s46>46|<s47>47|<s48>48|<s49>49|<s50>50|<s51>51|<s52>52|<s53>53|<s54>54|<s55>55|<s56>56|<s57>57|<s58>58|<s59>59|<s60>60|<s61>61|<s62>62|<s63>63|<s64>truncated...}}"];
	Node0x4a68180 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %127 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !671
RSINKGEP INSTRUCTION   %128 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !672
RSINKGEP INSTRUCTION   %tmp = alloca %struct.bignum_st, align 8
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %126 = load %struct.bignum_st*, %struct.bignum_st** %rr.addr, align 8, !dbg !669
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Using taint reachable signature for:   call void @BN_MONT_CTX_free(%struct.bn_mont_ctx_st* %130), !dbg !683
RSINKGEP INSTRUCTION   %130 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !682
REACHABLE SOURCE:   %130 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !682
	Node0x4a5f8f0 [shape=record,shape=Mrecord,label="{VOID: E\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23|<s24>24|<s25>25|<s26>26|<s27>27|<s28>28|<s29>29|<s30>30|<s31>31|<s32>32|<s33>33|<s34>34|<s35>35|<s36>36|<s37>37|<s38>38|<s39>39|<s40>40|<s41>41|<s42>42|<s43>43|<s44>44|<s45>45|<s46>46|<s47>47|<s48>48|<s49>49|<s50>50|<s51>51|<s52>52|<s53>53|<s54>54|<s55>55|<s56>56|<s57>57|<s58>58|<s59>59|<s60>60|<s61>61|<s62>62|<s63>63|<s64>truncated...}}"];
RSINKGEP INSTRUCTION   %130 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !682
Using taint reachable signature for:   call void @OPENSSL_cleanse(i8* %132, i64 %conv213), !dbg !691
RSINKGEP INSTRUCTION   %132 = load i8*, i8** %powerbuf, align 8, !dbg !688
REACHABLE SOURCE:   %132 = load i8*, i8** %powerbuf, align 8, !dbg !688
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %132 = load i8*, i8** %powerbuf, align 8, !dbg !688
Using taint reachable signature for:   call void @CRYPTO_free(i8* %134, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 1091), !dbg !692
RSINKGEP INSTRUCTION   %134 = load i8*, i8** %powerbufFree, align 8, !dbg !692
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
REACHABLE SOURCE:   %134 = load i8*, i8** %powerbufFree, align 8, !dbg !692
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
	Node0x4a7c670 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str = private unnamed_addr constant [9 x i8] c\"bn_exp.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION   %134 = load i8*, i8** %powerbufFree, align 8, !dbg !692
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0)
Using taint reachable signature for:   call void @BN_CTX_end(%struct.bignum_ctx* %135), !dbg !695
RSINKGEP INSTRUCTION   %135 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !694
REACHABLE SOURCE:   %135 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !694
	Node0x4a68180 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
RSINKGEP INSTRUCTION   %135 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !694
Creating ConsElem Map for :	Node0x4a683c0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a683c0:s0 -> Node0x4a67dc0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a67dc0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a67dc0:s0 -> Node0x4a6a580;
Creating ConsElem Map for :	Node0x4a68480 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a68480:s0 -> Node0x4a67f40;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a67f40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a67f40:s0 -> Node0x4a6a6c0;
Creating ConsElem Map for :	Node0x4a68540 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a68540:s0 -> Node0x4a68000;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a68000 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a68000:s0 -> Node0x4a6a440;
Creating ConsElem Map for :	Node0x4a68600 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a68600:s0 -> Node0x4a680c0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a680c0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a680c0:s0 -> Node0x4a69f40;
Creating ConsElem Map for :	Node0x4a686c0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_ctx*,  : SMR\n|{<s0>0}}"];
	Node0x4a686c0:s0 -> Node0x4a68180;
EDGE: [0: tymap-size 1]:%struct.bignum_ctx = type opaque
	Node0x4a68180 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Creating ConsElem Map for :	Node0x4a68840 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a68840:s0 -> Node0x4a68240;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x4a68240 [shape=record,shape=Mrecord,label="{VOID: E\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23|<s24>24|<s25>25|<s26>26|<s27>27|<s28>28|<s29>29|<s30>30|<s31>31|<s32>32|<s33>33|<s34>34|<s35>35|<s36>36|<s37>37|<s38>38|<s39>39|<s40>40|<s41>41|<s42>42|<s43>43|<s44>44|<s45>45|<s46>46|<s47>47|<s48>48|<s49>49|<s50>50|<s51>51|<s52>52|<s53>53|<s54>54|<s55>55|<s56>56|<s57>57|<s58>58|<s59>59|<s60>60|<s61>61|<s62>62|<s63>63|<s64>truncated...}}"];
Creating ConsElem Map for :	Node0x4a68c40 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a69140 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a69140:s0 -> Node0x4a68240;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x4a68240 [shape=record,shape=Mrecord,label="{VOID: E\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23|<s24>24|<s25>25|<s26>26|<s27>27|<s28>28|<s29>29|<s30>30|<s31>31|<s32>32|<s33>33|<s34>34|<s35>35|<s36>36|<s37>37|<s38>38|<s39>39|<s40>40|<s41>41|<s42>42|<s43>43|<s44>44|<s45>45|<s46>46|<s47>47|<s48>48|<s49>49|<s50>50|<s51>51|<s52>52|<s53>53|<s54>54|<s55>55|<s56>56|<s57>57|<s58>58|<s59>59|<s60>60|<s61>61|<s62>62|<s63>63|<s64>truncated...}}"];
Creating ConsElem Map for :	Node0x4a69400 [shape=record,shape=Mrecord,label="{0: i8*,  : SMR\n|{<s0>0}}"];
	Node0x4a69400:s0 -> Node0x4a69e40;
EDGE: [0: tymap-size 1]:i8
	Node0x4a69e40 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n}"];
Creating ConsElem Map for :	Node0x4a69580 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a696c0 [shape=record,shape=Mrecord,label="{0: i8*,  : SMR\n|{<s0>0}}"];
	Node0x4a696c0:s0 -> Node0x4a69e40;
EDGE: [0: tymap-size 1]:i8
	Node0x4a69e40 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n}"];
Creating ConsElem Map for :	Node0x4a68300 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %top2 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 1, !dbg !310
[Source:]   %top2 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 1, !dbg !310
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !309
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[8,12]0x4d9d3d0
Creating ConsElem Map for :	Node0x4a69000 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a68b00 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a68d80 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a692c0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSINKGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !427
[Sink:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !427
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
Tainting at offset: 0
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 0
DSINKGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !427
[Sink:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !427
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
Tainting at offset: 0
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 0
DSOURCEGEP INSTRUCTION   %d72 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !429
[Source:]   %d72 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !429
StructType:FINAL:   %tmp = alloca %struct.bignum_st, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64,   array: CRE: elem 0:default:0x4b5aa50
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
DSINKGEP INSTRUCTION   %d74 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 0, !dbg !432
[Sink:]   %d74 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 0, !dbg !432
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
Tainting at offset: 0
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 0
DSINKGEP INSTRUCTION   %d74 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 0, !dbg !432
[Sink:]   %d74 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 0, !dbg !432
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
Tainting at offset: 0
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 0
DSINKGEP INSTRUCTION   %top75 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 1, !dbg !434
[Sink:]   %top75 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 1, !dbg !434
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
Tainting at offset: 8
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 8
DSINKGEP INSTRUCTION   %top75 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 1, !dbg !434
[Sink:]   %top75 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 1, !dbg !434
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
Tainting at offset: 8
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 8
DSINKGEP INSTRUCTION   %top76 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 1, !dbg !436
[Sink:]   %top76 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 1, !dbg !436
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
Tainting at offset: 8
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 8
DSINKGEP INSTRUCTION   %top76 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 1, !dbg !436
[Sink:]   %top76 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 1, !dbg !436
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
Tainting at offset: 8
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 8
DSINKGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 2, !dbg !439
[Sink:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 2, !dbg !439
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 12
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 12
Tainting at offset: 12
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 12
DSINKGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 2, !dbg !439
[Sink:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 2, !dbg !439
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 12
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 12
Tainting at offset: 12
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 12
DSINKGEP INSTRUCTION   %dmax77 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 2, !dbg !441
[Sink:]   %dmax77 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 2, !dbg !441
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 12
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 12
Tainting at offset: 12
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 12
DSINKGEP INSTRUCTION   %dmax77 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 2, !dbg !441
[Sink:]   %dmax77 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 2, !dbg !441
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 12
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 12
Tainting at offset: 12
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 12
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 3, !dbg !443
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 3, !dbg !443
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 16
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 16
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 3, !dbg !443
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 3, !dbg !443
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 16
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 16
DSINKGEP INSTRUCTION   %neg78 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 3, !dbg !445
[Sink:]   %neg78 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 3, !dbg !445
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 16
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 16
DSINKGEP INSTRUCTION   %neg78 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 3, !dbg !445
[Sink:]   %neg78 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 3, !dbg !445
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 16
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 16
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 4, !dbg !447
[Sink:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 4, !dbg !447
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 20
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 20
Tainting at offset: 20
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 20
DSINKGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 4, !dbg !447
[Sink:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %am, i32 0, i32 4, !dbg !447
StructType:::IS STRUCT TY::FINAL:   %am = alloca %struct.bignum_st, align 8
Tainting at offset: 20
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 20
Tainting at offset: 20
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 20
DSINKGEP INSTRUCTION   %flags79 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 4, !dbg !449
[Sink:]   %flags79 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 4, !dbg !449
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 20
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 20
Tainting at offset: 20
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 20
DSINKGEP INSTRUCTION   %flags79 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 4, !dbg !449
[Sink:]   %flags79 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 4, !dbg !449
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 20
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 20
Tainting at offset: 20
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 20
DSOURCEGEP INSTRUCTION   %d81 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %45, i32 0, i32 0, !dbg !455
[Source:]   %d81 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %45, i32 0, i32 0, !dbg !455
StructType: allocation intermediate:   %45 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !454
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x4d9d320
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %46, i64 %idxprom, !dbg !454
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %46, i64 %idxprom, !dbg !454
DSOURCEGEP INSTRUCTION   %d85 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %48, i32 0, i32 0, !dbg !460
[Source:]   %d85 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %48, i32 0, i32 0, !dbg !460
StructType: allocation intermediate:   %48 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !458
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x4d9d320
DSOURCEGEP INSTRUCTION   %arrayidx86 = getelementptr inbounds i64, i64* %49, i64 0, !dbg !458
[Source:]   %arrayidx86 = getelementptr inbounds i64, i64* %49, i64 0, !dbg !458
 allocation intermediate:   %49 = load i64*, i64** %d85, align 8, !dbg !460
=>  %d85 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %48, i32 0, i32 0, !dbg !460
 allocation intermediate:   %d85 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %48, i32 0, i32 0, !dbg !460
=>  %48 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !458
 allocation intermediate:   %48 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !458
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 0
CONSTRAINING: 0: i64,   array: CRE: elem 0:default:0x4b5aa50
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x4d9d320
DSOURCEGEP INSTRUCTION   %d88 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !462
[Source:]   %d88 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !462
StructType:FINAL:   %tmp = alloca %struct.bignum_st, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64,   array: CRE: elem 0:default:0x4b5aa50
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
DSINKGEP INSTRUCTION   %arrayidx89 = getelementptr inbounds i64, i64* %51, i64 0, !dbg !463
[Sink:]   %arrayidx89 = getelementptr inbounds i64, i64* %51, i64 0, !dbg !463
 allocation intermediate:   %51 = load i64*, i64** %d88, align 8, !dbg !462
=>  %d88 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !462
 allocation intermediate:   %d88 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !462
=>  %tmp = alloca %struct.bignum_st, align 8
FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 0
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 0
DSINKGEP INSTRUCTION   %arrayidx89 = getelementptr inbounds i64, i64* %51, i64 0, !dbg !463
[Sink:]   %arrayidx89 = getelementptr inbounds i64, i64* %51, i64 0, !dbg !463
 allocation intermediate:   %51 = load i64*, i64** %d88, align 8, !dbg !462
=>  %d88 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !462
 allocation intermediate:   %d88 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !462
=>  %tmp = alloca %struct.bignum_st, align 8
FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 0
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 0
Creating ConsElem Map for :	Node0x4a689c0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %d93 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %55, i32 0, i32 0, !dbg !477
[Source:]   %d93 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %55, i32 0, i32 0, !dbg !477
StructType: allocation intermediate:   %55 = load %struct.bignum_st*, %struct.bignum_st** %m.addr, align 8, !dbg !476
=>  %m.addr = alloca %struct.bignum_st*, align 8
FINAL:   %m.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x4d9d320
DSOURCEGEP INSTRUCTION   %arrayidx94 = getelementptr inbounds i64, i64* %56, i64 %idxprom92, !dbg !476
[Source:]   %arrayidx94 = getelementptr inbounds i64, i64* %56, i64 %idxprom92, !dbg !476
DSOURCEGEP INSTRUCTION   %d97 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !481
[Source:]   %d97 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 0, !dbg !481
StructType:FINAL:   %tmp = alloca %struct.bignum_st, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64,   array: CRE: elem 0:default:0x4b5aa50
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
DSINKGEP INSTRUCTION   %arrayidx98 = getelementptr inbounds i64, i64* %59, i64 %idxprom96, !dbg !480
[Sink:]   %arrayidx98 = getelementptr inbounds i64, i64* %59, i64 %idxprom96, !dbg !480
DSINKGEP INSTRUCTION   %arrayidx98 = getelementptr inbounds i64, i64* %59, i64 %idxprom96, !dbg !480
[Sink:]   %arrayidx98 = getelementptr inbounds i64, i64* %59, i64 %idxprom96, !dbg !480
DSINKGEP INSTRUCTION   %top99 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 1, !dbg !486
[Sink:]   %top99 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 1, !dbg !486
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
Tainting at offset: 8
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 8
DSINKGEP INSTRUCTION   %top99 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 1, !dbg !486
[Sink:]   %top99 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %tmp, i32 0, i32 1, !dbg !486
StructType:::IS STRUCT TY::FINAL:   %tmp = alloca %struct.bignum_st, align 8
Tainting at offset: 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
Tainting at offset: 8
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 8
DSOURCEGEP INSTRUCTION   %neg107 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %64, i32 0, i32 3, !dbg !498
[Source:]   %neg107 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %64, i32 0, i32 3, !dbg !498
StructType: allocation intermediate:   %64 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !496
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 16
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[16,20]0x4b6e5f0
Creating ConsElem Map for :	Node0x4a68ec0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Running on BN_is_odd in context [BN_mod_exp_mont ]
Creating ConsElem Map for :	Node0x4a522f0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a522f0:s0 -> Node0x4a52130;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a52130 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a52130:s0 -> Node0x4a52470;
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !267
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !267
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !266
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[8,12]0x4b93e00
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !272
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !272
StructType: allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !270
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x4b93d50
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %3, i64 0, !dbg !273
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %3, i64 0, !dbg !273
 allocation intermediate:   %3 = load i64*, i64** %d, align 8, !dbg !272
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !272
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !272
=>  %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !270
 allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !270
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 0
CONSTRAINING: 0: i64,   array: CRE: elem 0:default:0x4b5aa50
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x4b93d50
Running on BN_num_bits in context [BN_mod_exp_mont ]
Creating ConsElem Map for :	Node0x4a52ca0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a52ca0:s0 -> Node0x4a529a0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a529a0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a529a0:s0 -> Node0x4a52f60;
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !269
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !269
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !268
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  20: i32,  : CRE[8,12]0x502a3b0
Creating ConsElem Map for :	Node0x4a52e20 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a52b60 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !280
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !280
StructType: allocation intermediate:   %5 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !279
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  20: i32,  : CRE[0,8]0x502a410
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !279
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !279
Running on BN_is_one in context [BN_mod_exp_mont ]
Creating ConsElem Map for :	Node0x4a5ebd0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a5ebd0:s0 -> Node0x4a5ea50;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a5ea50 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ea50:s0 -> Node0x4a5ec90;
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !271
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !271
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !269
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 16
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[16,20]0x4b0db90
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
Running on BN_set_word in context [BN_mod_exp_mont ]
Creating ConsElem Map for :	Node0x4a54830 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a54830:s0 -> Node0x4a54430;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a54430 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a54430:s0 -> Node0x4a54af0;
Creating ConsElem Map for :	Node0x4a549b0 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a546f0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !275
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !275
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !274
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x4a54430 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a54430:s0 -> Node0x4a54af0;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 16
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !275
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !275
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !274
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x4a54430 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a54430:s0 -> Node0x4a54af0;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 16
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !279
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !279
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !278
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x4b357e0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !278
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !278
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !279
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !279
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !279
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !278
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !278
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x4a54430 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a54430:s0 -> Node0x4a54af0;
Trying to find element at offset 0
Tainting at offset: 0
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 0
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !278
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !278
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !279
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !279
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !279
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !278
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !278
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x4a54430 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a54430:s0 -> Node0x4a54af0;
Trying to find element at offset 0
Tainting at offset: 0
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 0
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !283
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !283
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !282
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x4a54430 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a54430:s0 -> Node0x4a54af0;
Trying to find element at offset 8
Tainting at offset: 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !283
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !283
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !282
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x4a54430 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a54430:s0 -> Node0x4a54af0;
Trying to find element at offset 8
Tainting at offset: 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
Running on BN_ucmp in context [BN_mod_exp_mont ]
Creating ConsElem Map for :	Node0x4a743b0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a743b0:s0 -> Node0x4a73eb0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a73eb0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a73eb0:s0 -> Node0x4a74d70;
Creating ConsElem Map for :	Node0x4a74530 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a74530:s0 -> Node0x4a740b0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a740b0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a740b0:s0 -> Node0x4a74eb0;
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !279
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !279
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !278
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[8,12]0x4af2280
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
DSOURCEGEP INSTRUCTION   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 1, !dbg !281
[Source:]   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 1, !dbg !281
StructType: allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !280
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[8,12]0x4af98e0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
Creating ConsElem Map for :	Node0x4a746b0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a74270 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !291
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !291
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !290
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x541af80
Creating ConsElem Map for :	Node0x4a74a70 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x4a74a70:s0 -> Node0x4a74d70;
EDGE: [0: tymap-size 1]:i64
	Node0x4a74d70 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
DSOURCEGEP INSTRUCTION   %d2 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !294
[Source:]   %d2 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !294
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !293
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x4af9830
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
Creating ConsElem Map for :	Node0x4a74bf0 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x4a74bf0:s0 -> Node0x4a74eb0;
EDGE: [0: tymap-size 1]:i64
	Node0x4a74eb0 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
DSOURCEGEP INSTRUCTION   %top3 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !298
[Source:]   %top3 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !298
StructType: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !296
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[8,12]0x4af2280
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !310
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !310
Creating ConsElem Map for :	Node0x4a747f0 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx7 = getelementptr inbounds i64, i64* %17, i64 %idxprom6, !dbg !313
[Source:]   %arrayidx7 = getelementptr inbounds i64, i64* %17, i64 %idxprom6, !dbg !313
Creating ConsElem Map for :	Node0x4a74930 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Running on BN_is_zero in context [BN_mod_exp_mont ]
Creating ConsElem Map for :	Node0x4a54000 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a54000:s0 -> Node0x4a53e80;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a53e80 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a53e80:s0 -> Node0x4a45390;
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !267
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !267
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !266
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CMRE[8,12]0x4b58910
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
Running on BN_to_montgomery in context [BN_mod_exp_mont ]
Using taint reachable signature for:   %call = call i32 @BN_mod_mul_montgomery(%struct.bignum_st* %0, %struct.bignum_st* %1, %struct.bignum_st* %RR, %struct.bn_mont_ctx_st* %3, %struct.bignum_ctx* %4), !dbg !278
RSINKGEP INSTRUCTION   %4 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !277
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !273
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !272
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %3 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !276
RSINKGEP INSTRUCTION   %RR = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 1, !dbg !275
[Sink:]   %RR = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 1, !dbg !275
StructType:::IS STRUCT TY:: allocation intermediate:   %2 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !274
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 8
	Node0x4a5f8f0 [shape=record,shape=Mrecord,label="{VOID: E\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23|<s24>24|<s25>25|<s26>26|<s27>27|<s28>28|<s29>29|<s30>30|<s31>31|<s32>32|<s33>33|<s34>34|<s35>35|<s36>36|<s37>37|<s38>38|<s39>39|<s40>40|<s41>41|<s42>42|<s43>43|<s44>44|<s45>45|<s46>46|<s47>47|<s48>48|<s49>49|<s50>50|<s51>51|<s52>52|<s53>53|<s54>54|<s55>55|<s56>56|<s57>57|<s58>58|<s59>59|<s60>60|<s61>61|<s62>62|<s63>63|<s64>truncated...}}"];
Trying to find element at offset 8
REACHABLE SOURCE:   %4 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !277
REACHABLE SOURCE:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !273
REACHABLE SOURCE:   %0 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !272
REACHABLE SOURCE:   %3 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !276
REACHABLE SOURCE:   %RR = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 1, !dbg !275
	Node0x4a68180 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
	Node0x4a5f8f0 [shape=record,shape=Mrecord,label="{VOID: E\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23|<s24>24|<s25>25|<s26>26|<s27>27|<s28>28|<s29>29|<s30>30|<s31>31|<s32>32|<s33>33|<s34>34|<s35>35|<s36>36|<s37>37|<s38>38|<s39>39|<s40>40|<s41>41|<s42>42|<s43>43|<s44>44|<s45>45|<s46>46|<s47>47|<s48>48|<s49>49|<s50>50|<s51>51|<s52>52|<s53>53|<s54>54|<s55>55|<s56>56|<s57>57|<s58>58|<s59>59|<s60>60|<s61>61|<s62>62|<s63>63|<s64>truncated...}}"];
RSOURCEGEP INSTRUCTION   %RR = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 1, !dbg !275
[Source:]   %RR = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 1, !dbg !275
StructType: allocation intermediate:   %2 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !274
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 8
	Node0x4a5f8f0 [shape=record,shape=Mrecord,label="{VOID: E\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23|<s24>24|<s25>25|<s26>26|<s27>27|<s28>28|<s29>29|<s30>30|<s31>31|<s32>32|<s33>33|<s34>34|<s35>35|<s36>36|<s37>37|<s38>38|<s39>39|<s40>40|<s41>41|<s42>42|<s43>43|<s44>44|<s45>45|<s46>46|<s47>47|<s48>48|<s49>49|<s50>50|<s51>51|<s52>52|<s53>53|<s54>54|<s55>55|<s56>56|<s57>57|<s58>58|<s59>59|<s60>60|<s61>61|<s62>62|<s63>63|<s64>truncated...}}"];
Trying to find element at offset 8
CONSTRAINING: VOIDTB==TE: CE: elem 0:default:0x4b5ef30
RSINKGEP INSTRUCTION   %4 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !277
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !273
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !272
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %3 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !276
RSINKGEP INSTRUCTION   %RR = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 1, !dbg !275
[Sink:]   %RR = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 1, !dbg !275
StructType:::IS STRUCT TY:: allocation intermediate:   %2 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !274
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 8
	Node0x4a5f8f0 [shape=record,shape=Mrecord,label="{VOID: E\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23|<s24>24|<s25>25|<s26>26|<s27>27|<s28>28|<s29>29|<s30>30|<s31>31|<s32>32|<s33>33|<s34>34|<s35>35|<s36>36|<s37>37|<s38>38|<s39>39|<s40>40|<s41>41|<s42>42|<s43>43|<s44>44|<s45>45|<s46>46|<s47>47|<s48>48|<s49>49|<s50>50|<s51>51|<s52>52|<s53>53|<s54>54|<s55>55|<s56>56|<s57>57|<s58>58|<s59>59|<s60>60|<s61>61|<s62>62|<s63>63|<s64>truncated...}}"];
Trying to find element at offset 8
Creating ConsElem Map for :	Node0x4a5fa70 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a5fa70:s0 -> Node0x4a5f6b0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a5f6b0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5f6b0:s0 -> Node0x4a6e360;
Creating ConsElem Map for :	Node0x4a5fbf0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a5fbf0:s0 -> Node0x4a5f6b0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a5f6b0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SGMRE\n@BN_value_one.const_one = internal constant %struct.bignum_st \{ i64* @BN_value_one.data_one, i32 1, i32 1, i32 0, i32 2 \}, align 8\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5f6b0:s0 -> Node0x4a6e360;
Creating ConsElem Map for :	Node0x4a5fd70 [shape=record,shape=Mrecord,label="{0: %struct.bn_mont_ctx_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a5fd70:s0 -> Node0x4a5f8f0;
EDGE: [0: tymap-size 1]:%struct.bn_mont_ctx_st = type { i32, %struct.bignum_st, %struct.bignum_st, %struct.bignum_st, [2 x i64], i32 }
	Node0x4a5f8f0 [shape=record,shape=Mrecord,label="{VOID: E\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23|<s24>24|<s25>25|<s26>26|<s27>27|<s28>28|<s29>29|<s30>30|<s31>31|<s32>32|<s33>33|<s34>34|<s35>35|<s36>36|<s37>37|<s38>38|<s39>39|<s40>40|<s41>41|<s42>42|<s43>43|<s44>44|<s45>45|<s46>46|<s47>47|<s48>48|<s49>49|<s50>50|<s51>51|<s52>52|<s53>53|<s54>54|<s55>55|<s56>56|<s57>57|<s58>58|<s59>59|<s60>60|<s61>61|<s62>62|<s63>63|<s64>truncated...}}"];
Creating ConsElem Map for :	Node0x4a5fef0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_ctx*,  : SMR\n|{<s0>0}}"];
	Node0x4a5fef0:s0 -> Node0x4a5f9b0;
EDGE: [0: tymap-size 1]:%struct.bignum_ctx = type opaque
	Node0x4a5f9b0 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
Running on bn_wexpand in context [BN_mod_exp_mont ]
Creating ConsElem Map for :	Node0x4a4ca60 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a4ca60:s0 -> Node0x4a4c820;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a4c820 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a4c820:s0 -> Node0x4a49c40;
Creating ConsElem Map for :	Node0x4a4cbe0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !270
[Source:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !270
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !269
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 12
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[12,16]0x4fd8450
Running on bn_correct_top in context [BN_mod_exp_mont ]
Creating ConsElem Map for :	Node0x4a72cc0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a72cc0:s0 -> Node0x4a72a40;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a72a40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a72a40:s0 -> Node0x4a6f390;
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !271
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !271
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !270
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[8,12]0x54772a0
Creating ConsElem Map for :	Node0x4a72fc0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !280
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !280
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !279
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[0,8]0x5477230
Creating ConsElem Map for :	Node0x4a72e40 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x4a72e40:s0 -> Node0x4a6f390;
EDGE: [0: tymap-size 1]:i64
	Node0x4a6f390 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
DSINKGEP INSTRUCTION   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !302
[Sink:]   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !302
StructType:::IS STRUCT TY:: allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !301
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
Tainting at offset: 8
	Node0x4a72a40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a72a40:s0 -> Node0x4a6f390;
Trying to find element at offset 8
DSINKGEP INSTRUCTION   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !302
[Sink:]   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !302
StructType:::IS STRUCT TY:: allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !301
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
Tainting at offset: 8
	Node0x4a72a40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a72a40:s0 -> Node0x4a6f390;
Trying to find element at offset 8
DSOURCEGEP INSTRUCTION   %top6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %13, i32 0, i32 1, !dbg !307
[Source:]   %top6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %13, i32 0, i32 1, !dbg !307
StructType: allocation intermediate:   %13 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !305
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[8,12]0x54772a0
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !311
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !311
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !310
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x4a72a40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a72a40:s0 -> Node0x4a6f390;
Trying to find element at offset 16
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !311
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !311
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !310
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x4a72a40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a72a40:s0 -> Node0x4a6f390;
Trying to find element at offset 16
Running on BN_value_one in context [BN_mod_exp_mont ]
Running on BN_is_bit_set in context [BN_mod_exp_mont ]
Creating ConsElem Map for :	Node0x4a56170 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a56170:s0 -> Node0x4a55ef0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a55ef0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a55ef0:s0 -> Node0x4a566b0;
Creating ConsElem Map for :	Node0x4a562f0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a56070 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a56430 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a56570 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 1, !dbg !285
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 1, !dbg !285
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !283
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  20: i32,  : CRE[8,12]0x4fd92a0
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 0, !dbg !292
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 0, !dbg !292
StructType: allocation intermediate:   %7 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !291
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  20: i32,  : CRE[0,8]0x4fd92d0
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %8, i64 %idxprom, !dbg !291
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %8, i64 %idxprom, !dbg !291
Running on BN_is_odd in context [BN_mod_exp_mont_consttime ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !267
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !267
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !266
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[8,12]0x4b93e00
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !272
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !272
StructType: allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !270
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x4b93d50
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %3, i64 0, !dbg !273
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %3, i64 0, !dbg !273
 allocation intermediate:   %3 = load i64*, i64** %d, align 8, !dbg !272
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !272
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !272
=>  %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !270
 allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !270
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 0
CONSTRAINING: 0: i64,   array: CRE: elem 0:default:0x4b5aa50
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x4b93d50
Running on BN_num_bits in context [BN_mod_exp_mont_consttime ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !269
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !269
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !268
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  20: i32,  : CRE[8,12]0x502a3b0
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !280
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %5, i32 0, i32 0, !dbg !280
StructType: allocation intermediate:   %5 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !279
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  20: i32,  : CRE[0,8]0x502a410
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !279
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %6, i64 %idxprom, !dbg !279
Running on BN_is_one in context [BN_mod_exp_mont_consttime ]
DSOURCEGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !271
[Source:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !271
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !269
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 16
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 16
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[16,20]0x4b0db90
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
Running on BN_set_word in context [BN_mod_exp_mont_consttime ]
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !275
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !275
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !274
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x4a54430 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a54430:s0 -> Node0x4a54af0;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 16
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !275
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 3, !dbg !275
StructType:::IS STRUCT TY:: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !274
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x4a54430 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a54430:s0 -> Node0x4a54af0;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 16
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !279
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !279
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !278
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[0,8]0x4b357e0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !278
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !278
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !279
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !279
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !279
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !278
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !278
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x4a54430 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a54430:s0 -> Node0x4a54af0;
Trying to find element at offset 0
Tainting at offset: 0
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 0
DSINKGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !278
[Sink:]   %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !278
 allocation intermediate:   %4 = load i64*, i64** %d, align 8, !dbg !279
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !279
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 0, !dbg !279
=>  %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !278
 allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !278
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x4a54430 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a54430:s0 -> Node0x4a54af0;
Trying to find element at offset 0
Tainting at offset: 0
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 0
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !283
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !283
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !282
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x4a54430 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a54430:s0 -> Node0x4a54af0;
Trying to find element at offset 8
Tainting at offset: 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
DSINKGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !283
[Sink:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !283
StructType:::IS STRUCT TY:: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !282
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x4a54430 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a54430:s0 -> Node0x4a54af0;
Trying to find element at offset 8
Tainting at offset: 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
Running on BN_value_one in context [BN_mod_exp_mont_consttime ]
Running on BN_to_montgomery in context [BN_mod_exp_mont_consttime ]
Using taint reachable signature for:   %call = call i32 @BN_mod_mul_montgomery(%struct.bignum_st* %0, %struct.bignum_st* %1, %struct.bignum_st* %RR, %struct.bn_mont_ctx_st* %3, %struct.bignum_ctx* %4), !dbg !278
RSINKGEP INSTRUCTION   %4 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !277
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !273
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !272
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %3 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !276
RSINKGEP INSTRUCTION   %RR = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 1, !dbg !275
[Sink:]   %RR = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 1, !dbg !275
StructType:::IS STRUCT TY:: allocation intermediate:   %2 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !274
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 8
	Node0x4a5f8f0 [shape=record,shape=Mrecord,label="{VOID: E\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23|<s24>24|<s25>25|<s26>26|<s27>27|<s28>28|<s29>29|<s30>30|<s31>31|<s32>32|<s33>33|<s34>34|<s35>35|<s36>36|<s37>37|<s38>38|<s39>39|<s40>40|<s41>41|<s42>42|<s43>43|<s44>44|<s45>45|<s46>46|<s47>47|<s48>48|<s49>49|<s50>50|<s51>51|<s52>52|<s53>53|<s54>54|<s55>55|<s56>56|<s57>57|<s58>58|<s59>59|<s60>60|<s61>61|<s62>62|<s63>63|<s64>truncated...}}"];
Trying to find element at offset 8
REACHABLE SOURCE:   %4 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !277
REACHABLE SOURCE:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !273
REACHABLE SOURCE:   %0 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !272
REACHABLE SOURCE:   %3 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !276
REACHABLE SOURCE:   %RR = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 1, !dbg !275
	Node0x4a68180 [shape=record,shape=Mrecord,label="{VOID: E\n}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
	Node0x4a5f8f0 [shape=record,shape=Mrecord,label="{VOID: E\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23|<s24>24|<s25>25|<s26>26|<s27>27|<s28>28|<s29>29|<s30>30|<s31>31|<s32>32|<s33>33|<s34>34|<s35>35|<s36>36|<s37>37|<s38>38|<s39>39|<s40>40|<s41>41|<s42>42|<s43>43|<s44>44|<s45>45|<s46>46|<s47>47|<s48>48|<s49>49|<s50>50|<s51>51|<s52>52|<s53>53|<s54>54|<s55>55|<s56>56|<s57>57|<s58>58|<s59>59|<s60>60|<s61>61|<s62>62|<s63>63|<s64>truncated...}}"];
RSOURCEGEP INSTRUCTION   %RR = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 1, !dbg !275
[Source:]   %RR = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 1, !dbg !275
StructType: allocation intermediate:   %2 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !274
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Trying to find element at offset 8
	Node0x4a5f8f0 [shape=record,shape=Mrecord,label="{VOID: E\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23|<s24>24|<s25>25|<s26>26|<s27>27|<s28>28|<s29>29|<s30>30|<s31>31|<s32>32|<s33>33|<s34>34|<s35>35|<s36>36|<s37>37|<s38>38|<s39>39|<s40>40|<s41>41|<s42>42|<s43>43|<s44>44|<s45>45|<s46>46|<s47>47|<s48>48|<s49>49|<s50>50|<s51>51|<s52>52|<s53>53|<s54>54|<s55>55|<s56>56|<s57>57|<s58>58|<s59>59|<s60>60|<s61>61|<s62>62|<s63>63|<s64>truncated...}}"];
Trying to find element at offset 8
CONSTRAINING: VOIDTB==TE: CE: elem 0:default:0x4b5ef30
RSINKGEP INSTRUCTION   %4 = load %struct.bignum_ctx*, %struct.bignum_ctx** %ctx.addr, align 8, !dbg !277
RSINKGEP INSTRUCTION   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !273
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %0 = load %struct.bignum_st*, %struct.bignum_st** %r.addr, align 8, !dbg !272
Added child elem: 	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %3 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !276
RSINKGEP INSTRUCTION   %RR = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 1, !dbg !275
[Sink:]   %RR = getelementptr inbounds %struct.bn_mont_ctx_st, %struct.bn_mont_ctx_st* %2, i32 0, i32 1, !dbg !275
StructType:::IS STRUCT TY:: allocation intermediate:   %2 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont.addr, align 8, !dbg !274
=>  %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
FINAL:   %mont.addr = alloca %struct.bn_mont_ctx_st*, align 8
Tainting at offset: 8
	Node0x4a5f8f0 [shape=record,shape=Mrecord,label="{VOID: E\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23|<s24>24|<s25>25|<s26>26|<s27>27|<s28>28|<s29>29|<s30>30|<s31>31|<s32>32|<s33>33|<s34>34|<s35>35|<s36>36|<s37>37|<s38>38|<s39>39|<s40>40|<s41>41|<s42>42|<s43>43|<s44>44|<s45>45|<s46>46|<s47>47|<s48>48|<s49>49|<s50>50|<s51>51|<s52>52|<s53>53|<s54>54|<s55>55|<s56>56|<s57>57|<s58>58|<s59>59|<s60>60|<s61>61|<s62>62|<s63>63|<s64>truncated...}}"];
Trying to find element at offset 8
Running on BN_ucmp in context [BN_mod_exp_mont_consttime ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !279
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !279
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !278
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[8,12]0x4af2280
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
DSOURCEGEP INSTRUCTION   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 1, !dbg !281
[Source:]   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 1, !dbg !281
StructType: allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !280
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[8,12]0x4af98e0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !291
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !291
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !290
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x541af80
DSOURCEGEP INSTRUCTION   %d2 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !294
[Source:]   %d2 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !294
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !293
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[0,8]0x4af9830
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
DSOURCEGEP INSTRUCTION   %top3 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !298
[Source:]   %top3 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %10, i32 0, i32 1, !dbg !298
StructType: allocation intermediate:   %10 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !296
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE[8,12]0x4af2280
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !310
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !310
DSOURCEGEP INSTRUCTION   %arrayidx7 = getelementptr inbounds i64, i64* %17, i64 %idxprom6, !dbg !313
[Source:]   %arrayidx7 = getelementptr inbounds i64, i64* %17, i64 %idxprom6, !dbg !313
Running on MOD_EXP_CTIME_COPY_TO_PREBUF in context [BN_mod_exp_mont_consttime ]
Creating ConsElem Map for :	Node0x4a6e420 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a6e420:s0 -> Node0x4a6e1e0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a6e1e0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a6e1e0:s0 -> Node0x4a70990;
Creating ConsElem Map for :	Node0x4a6e4e0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a6e5a0 [shape=record,shape=Mrecord,label="{0: i8*,  : SMR\n|{<s0>0}}"];
	Node0x4a6e5a0:s0 -> Node0x4a70990;
EDGE: [0: tymap-size 1]:i8
	Node0x4a70990 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x4a6e660 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a6e720 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a6e960 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a6ea20 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x4a6ea20:s0 -> Node0x4a70990;
EDGE: [0: tymap-size 1]:i64
	Node0x4a70990 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
DSOURCEGEP INSTRUCTION   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !289
[Source:]   %top1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 1, !dbg !289
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !288
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[8,12]0x5718bb0
DSOURCEGEP INSTRUCTION   %top2 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !293
[Source:]   %top2 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 1, !dbg !293
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !292
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[8,12]0x5718bb0
Creating ConsElem Map for :	Node0x4a6e7e0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a6e8a0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !311
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 0, !dbg !311
StructType: allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !310
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[0,8]0x5718b80
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %13, i64 %idxprom, !dbg !310
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %13, i64 %idxprom, !dbg !310
DSINKGEP INSTRUCTION   %arrayidx5 = getelementptr inbounds i64, i64* %16, i64 %idxprom4, !dbg !313
[Sink:]   %arrayidx5 = getelementptr inbounds i64, i64* %16, i64 %idxprom4, !dbg !313
DSINKGEP INSTRUCTION   %arrayidx5 = getelementptr inbounds i64, i64* %16, i64 %idxprom4, !dbg !313
[Sink:]   %arrayidx5 = getelementptr inbounds i64, i64* %16, i64 %idxprom4, !dbg !313
Running on BN_is_bit_set in context [BN_mod_exp_mont_consttime ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 1, !dbg !285
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %3, i32 0, i32 1, !dbg !285
StructType: allocation intermediate:   %3 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !283
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  20: i32,  : CRE[8,12]0x4fd92a0
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 0, !dbg !292
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 0, !dbg !292
StructType: allocation intermediate:   %7 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !291
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  20: i32,  : CRE[0,8]0x4fd92d0
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %8, i64 %idxprom, !dbg !291
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %8, i64 %idxprom, !dbg !291
Running on MOD_EXP_CTIME_COPY_FROM_PREBUF in context [BN_mod_exp_mont_consttime ]
Creating ConsElem Map for :	Node0x4a6f510 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a6f510:s0 -> Node0x4a6f210;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a6f210 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a6f210:s0 -> Node0x4aa3080;
Creating ConsElem Map for :	Node0x4a6f650 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a6f790 [shape=record,shape=Mrecord,label="{0: i8*,  : SMR\n|{<s0>0}}"];
	Node0x4a6f790:s0 -> Node0x4aa3080;
EDGE: [0: tymap-size 1]:i8
	Node0x4aa3080 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x4a6f910 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a6fa50 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a6fe10 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a6ff50 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x4a6ff50:s0 -> Node0x4aa3080;
EDGE: [0: tymap-size 1]:i64
	Node0x4aa3080 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x4a6f450 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a6fb90 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a700d0 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a6fcd0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %11, i64 %idxprom, !dbg !323
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %11, i64 %idxprom, !dbg !323
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %19, i32 0, i32 0, !dbg !338
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %19, i32 0, i32 0, !dbg !338
StructType: allocation intermediate:   %19 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !337
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[0,8]0x57857a0
DSINKGEP INSTRUCTION   %arrayidx10 = getelementptr inbounds i64, i64* %20, i64 %idxprom9, !dbg !337
[Sink:]   %arrayidx10 = getelementptr inbounds i64, i64* %20, i64 %idxprom9, !dbg !337
DSINKGEP INSTRUCTION   %arrayidx10 = getelementptr inbounds i64, i64* %20, i64 %idxprom9, !dbg !337
[Sink:]   %arrayidx10 = getelementptr inbounds i64, i64* %20, i64 %idxprom9, !dbg !337
Creating ConsElem Map for :	Node0x4a70210 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a70350 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a70490 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a705d0 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a70710 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a70850 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx45 = getelementptr inbounds i64, i64* %39, i64 %idxprom44, !dbg !420
[Source:]   %arrayidx45 = getelementptr inbounds i64, i64* %39, i64 %idxprom44, !dbg !420
DSOURCEGEP INSTRUCTION   %arrayidx50 = getelementptr inbounds i64, i64* %44, i64 %idxprom49, !dbg !427
[Source:]   %arrayidx50 = getelementptr inbounds i64, i64* %44, i64 %idxprom49, !dbg !427
DSOURCEGEP INSTRUCTION   %arrayidx56 = getelementptr inbounds i64, i64* %49, i64 %idxprom55, !dbg !435
[Source:]   %arrayidx56 = getelementptr inbounds i64, i64* %49, i64 %idxprom55, !dbg !435
DSOURCEGEP INSTRUCTION   %arrayidx62 = getelementptr inbounds i64, i64* %54, i64 %idxprom61, !dbg !443
[Source:]   %arrayidx62 = getelementptr inbounds i64, i64* %54, i64 %idxprom61, !dbg !443
DSOURCEGEP INSTRUCTION   %d75 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %63, i32 0, i32 0, !dbg !461
[Source:]   %d75 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %63, i32 0, i32 0, !dbg !461
StructType: allocation intermediate:   %63 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !460
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[0,8]0x57857a0
DSINKGEP INSTRUCTION   %arrayidx76 = getelementptr inbounds i64, i64* %64, i64 %idxprom74, !dbg !460
[Sink:]   %arrayidx76 = getelementptr inbounds i64, i64* %64, i64 %idxprom74, !dbg !460
DSINKGEP INSTRUCTION   %arrayidx76 = getelementptr inbounds i64, i64* %64, i64 %idxprom74, !dbg !460
[Sink:]   %arrayidx76 = getelementptr inbounds i64, i64* %64, i64 %idxprom74, !dbg !460
DSINKGEP INSTRUCTION   %top83 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %69, i32 0, i32 1, !dbg !470
[Sink:]   %top83 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %69, i32 0, i32 1, !dbg !470
StructType:::IS STRUCT TY:: allocation intermediate:   %69 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !469
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
Tainting at offset: 8
	Node0x4a6f210 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a6f210:s0 -> Node0x4aa3080;
Trying to find element at offset 8
DSINKGEP INSTRUCTION   %top83 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %69, i32 0, i32 1, !dbg !470
[Sink:]   %top83 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %69, i32 0, i32 1, !dbg !470
StructType:::IS STRUCT TY:: allocation intermediate:   %69 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !469
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
Tainting at offset: 8
	Node0x4a6f210 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a6f210:s0 -> Node0x4aa3080;
Trying to find element at offset 8
Running on BN_is_zero in context [BN_num_bits ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !267
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !267
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !266
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CMRE[8,12]0x4b58910
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
Running on BN_num_bits_word in context [BN_num_bits ]
Creating ConsElem Map for :	Node0x4a53810 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom, !dbg !284
[Source:]   %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom, !dbg !284
Created 256 constraint variable(s) for node of size 1
Creating ConsElem Map for :	Node0x4a53690 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx11 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom10, !dbg !290
[Source:]   %arrayidx11 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom10, !dbg !290
DSOURCEGEP INSTRUCTION   %arrayidx21 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom20, !dbg !302
[Source:]   %arrayidx21 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom20, !dbg !302
DSOURCEGEP INSTRUCTION   %arrayidx28 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom27, !dbg !308
[Source:]   %arrayidx28 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom27, !dbg !308
DSOURCEGEP INSTRUCTION   %arrayidx41 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom40, !dbg !324
[Source:]   %arrayidx41 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom40, !dbg !324
DSOURCEGEP INSTRUCTION   %arrayidx48 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom47, !dbg !330
[Source:]   %arrayidx48 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom47, !dbg !330
DSOURCEGEP INSTRUCTION   %arrayidx58 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom57, !dbg !341
[Source:]   %arrayidx58 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom57, !dbg !341
DSOURCEGEP INSTRUCTION   %arrayidx64 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom63, !dbg !346
[Source:]   %arrayidx64 = getelementptr inbounds [256 x i8], [256 x i8]* @BN_num_bits_word.bits, i32 0, i64 %idxprom63, !dbg !346
Running on BN_abs_is_word in context [BN_is_one ]
Creating ConsElem Map for :	Node0x4a5f0c0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a5f0c0:s0 -> Node0x4a5ef40;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Creating ConsElem Map for :	Node0x4a5f180 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !269
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !269
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !268
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !274
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !274
StructType: allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !272
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %3, i64 0, !dbg !275
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %3, i64 0, !dbg !275
 allocation intermediate:   %3 = load i64*, i64** %d, align 8, !dbg !274
=>  %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !274
 allocation intermediate:   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 0, !dbg !274
=>  %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !272
 allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !272
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 0
CONSTRAINING: 0: i64,   array: CRE: elem 0:default:0x4b5aa50
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
DSOURCEGEP INSTRUCTION   %top3 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 1, !dbg !286
[Source:]   %top3 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %7, i32 0, i32 1, !dbg !286
StructType: allocation intermediate:   %7 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !284
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
Running on bn_expand in context [BN_set_word ]
Creating ConsElem Map for :	Node0x4a555c0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a555c0:s0 -> Node0x4a55280;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a55280 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a55280:s0 -> Node0x4a55880;
Creating ConsElem Map for :	Node0x4a55740 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a55440 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a55440:s0 -> Node0x4a55280;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a55280 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : MRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a55280:s0 -> Node0x4a55880;
DSOURCEGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 2, !dbg !279
[Source:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %2, i32 0, i32 2, !dbg !279
StructType: allocation intermediate:   %2 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !278
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 12
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : CMRE[12,16]0x5039e30
Running on bn_expand2 in context [bn_wexpand ]
Using taint reachable signature for:   call void @OPENSSL_cleanse(i8* %10, i64 %mul), !dbg !294
RSINKGEP INSTRUCTION   %10 = bitcast i64* %9 to i8*, !dbg !288
REACHABLE SOURCE:   %10 = bitcast i64* %9 to i8*, !dbg !288
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %10 = bitcast i64* %9 to i8*, !dbg !288
Creating ConsElem Map for :	Node0x4a4d6f0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a4d6f0:s0 -> Node0x4a4d370;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a4d370 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a4d370:s0 -> Node0x4a4cd20;
Creating ConsElem Map for :	Node0x4a4d870 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !271
[Source:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !271
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !270
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 12
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[12,16]0x5a90ba0
Creating ConsElem Map for :	Node0x4a4d9b0 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x4a4d9b0:s0 -> Node0x4a4cd20;
EDGE: [0: tymap-size 1]:i64
	Node0x4a4cd20 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x4a4d570 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a4d570:s0 -> Node0x4a4d370;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a4d370 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a4d370:s0 -> Node0x4a4cd20;
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !286
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !286
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !284
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[0,8]0x5a90ab0
DSOURCEGEP INSTRUCTION   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !290
[Source:]   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !290
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !288
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[0,8]0x5a90ab0
DSOURCEGEP INSTRUCTION   %dmax5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %11, i32 0, i32 2, !dbg !292
[Source:]   %dmax5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %11, i32 0, i32 2, !dbg !292
StructType: allocation intermediate:   %11 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !291
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 12
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[12,16]0x5a90ba0
DSINKGEP INSTRUCTION   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !300
[Sink:]   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !300
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !299
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x4a4d370 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a4d370:s0 -> Node0x4a4cd20;
Trying to find element at offset 0
Tainting at offset: 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
DSINKGEP INSTRUCTION   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !300
[Sink:]   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !300
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !299
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x4a4d370 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a4d370:s0 -> Node0x4a4cd20;
Trying to find element at offset 0
Tainting at offset: 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
DSINKGEP INSTRUCTION   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !304
[Sink:]   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !304
StructType:::IS STRUCT TY:: allocation intermediate:   %17 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !303
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 12
	Node0x4a4d370 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a4d370:s0 -> Node0x4a4cd20;
Trying to find element at offset 12
Tainting at offset: 12
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 12
DSINKGEP INSTRUCTION   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !304
[Sink:]   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !304
StructType:::IS STRUCT TY:: allocation intermediate:   %17 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !303
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 12
	Node0x4a4d370 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a4d370:s0 -> Node0x4a4cd20;
Trying to find element at offset 12
Tainting at offset: 12
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 12
Running on bn_wexpand in context [MOD_EXP_CTIME_COPY_FROM_PREBUF ]
DSOURCEGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !270
[Source:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !270
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !269
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 12
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[12,16]0x4fd8450
Running on constant_time_eq_int in context [MOD_EXP_CTIME_COPY_FROM_PREBUF ]
Creating ConsElem Map for :	Node0x4a71ae0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a71c60 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Running on bn_correct_top in context [MOD_EXP_CTIME_COPY_FROM_PREBUF ]
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !271
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 1, !dbg !271
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !270
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[8,12]0x54772a0
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !280
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !280
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !279
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[0,8]0x5477230
DSINKGEP INSTRUCTION   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !302
[Sink:]   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !302
StructType:::IS STRUCT TY:: allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !301
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
Tainting at offset: 8
	Node0x4a72a40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a72a40:s0 -> Node0x4a6f390;
Trying to find element at offset 8
DSINKGEP INSTRUCTION   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !302
[Sink:]   %top4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %12, i32 0, i32 1, !dbg !302
StructType:::IS STRUCT TY:: allocation intermediate:   %12 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !301
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
Tainting at offset: 8
	Node0x4a72a40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a72a40:s0 -> Node0x4a6f390;
Trying to find element at offset 8
DSOURCEGEP INSTRUCTION   %top6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %13, i32 0, i32 1, !dbg !307
[Source:]   %top6 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %13, i32 0, i32 1, !dbg !307
StructType: allocation intermediate:   %13 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !305
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[8,12]0x54772a0
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !311
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !311
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !310
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x4a72a40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a72a40:s0 -> Node0x4a6f390;
Trying to find element at offset 16
DSINKGEP INSTRUCTION   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !311
[Sink:]   %neg = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 3, !dbg !311
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !310
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 16
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 16
Tainting at offset: 16
	Node0x4a72a40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a72a40:s0 -> Node0x4a6f390;
Trying to find element at offset 16
Running on bn_expand2 in context [bn_expand ]
Using taint reachable signature for:   call void @OPENSSL_cleanse(i8* %10, i64 %mul), !dbg !294
RSINKGEP INSTRUCTION   %10 = bitcast i64* %9 to i8*, !dbg !288
REACHABLE SOURCE:   %10 = bitcast i64* %9 to i8*, !dbg !288
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION   %10 = bitcast i64* %9 to i8*, !dbg !288
DSOURCEGEP INSTRUCTION   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !271
[Source:]   %dmax = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 2, !dbg !271
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !270
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 12
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[12,16]0x5a90ba0
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !286
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %6, i32 0, i32 0, !dbg !286
StructType: allocation intermediate:   %6 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !284
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[0,8]0x5a90ab0
DSOURCEGEP INSTRUCTION   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !290
[Source:]   %d4 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !290
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !288
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[0,8]0x5a90ab0
DSOURCEGEP INSTRUCTION   %dmax5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %11, i32 0, i32 2, !dbg !292
[Source:]   %dmax5 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %11, i32 0, i32 2, !dbg !292
StructType: allocation intermediate:   %11 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !291
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 12
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 12
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[12,16]0x5a90ba0
DSINKGEP INSTRUCTION   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !300
[Sink:]   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !300
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !299
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x4a4d370 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a4d370:s0 -> Node0x4a4cd20;
Trying to find element at offset 0
Tainting at offset: 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
DSINKGEP INSTRUCTION   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !300
[Sink:]   %d7 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %15, i32 0, i32 0, !dbg !300
StructType:::IS STRUCT TY:: allocation intermediate:   %15 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !299
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 0
	Node0x4a4d370 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a4d370:s0 -> Node0x4a4cd20;
Trying to find element at offset 0
Tainting at offset: 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
DSINKGEP INSTRUCTION   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !304
[Sink:]   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !304
StructType:::IS STRUCT TY:: allocation intermediate:   %17 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !303
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 12
	Node0x4a4d370 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a4d370:s0 -> Node0x4a4cd20;
Trying to find element at offset 12
Tainting at offset: 12
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 12
DSINKGEP INSTRUCTION   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !304
[Sink:]   %dmax8 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %17, i32 0, i32 2, !dbg !304
StructType:::IS STRUCT TY:: allocation intermediate:   %17 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !303
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Tainting at offset: 12
	Node0x4a4d370 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a4d370:s0 -> Node0x4a4cd20;
Trying to find element at offset 12
Tainting at offset: 12
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 12
Running on bn_expand_internal in context [bn_expand2 ]
Using taint reachable signature for:   call void @ERR_put_error(i32 3, i32 120, i32 114, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 255), !dbg !280
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Creating ConsElem Map for :	Node0x4a50480 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
	Node0x4a50480 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Using taint reachable signature for:   call void @ERR_put_error(i32 3, i32 120, i32 105, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 259), !dbg !287
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
	Node0x4a50480 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Using taint reachable signature for:   %call6 = call i8* @CRYPTO_secure_zalloc(i64 %mul, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 263), !dbg !294
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
	Node0x4a50480 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Using taint reachable signature for:   %call9 = call i8* @CRYPTO_zalloc(i64 %mul8, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 265), !dbg !298
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
	Node0x4a50480 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Using taint reachable signature for:   call void @ERR_put_error(i32 3, i32 120, i32 65, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 267), !dbg !305
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
	Node0x4a50480 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
Creating ConsElem Map for :	Node0x4a4f700 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a4f700:s0 -> Node0x4a4f3c0;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a4f3c0 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a4f3c0:s0 -> Node0x4a5f830;
Creating ConsElem Map for :	Node0x4a4f880 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a4fb40 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x4a4fb40:s0 -> Node0x4a5f830;
EDGE: [0: tymap-size 1]:i64
	Node0x4a5f830 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x4a4f580 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x4a4f580:s0 -> Node0x4a5f830;
EDGE: [0: tymap-size 1]:i64
	Node0x4a5f830 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
Creating ConsElem Map for :	Node0x4a4f9c0 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x4a4f9c0:s0 -> Node0x4a5f830;
EDGE: [0: tymap-size 1]:i64
	Node0x4a5f830 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !309
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %8, i32 0, i32 0, !dbg !309
StructType: allocation intermediate:   %8 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !308
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[0,8]0x5bdbb40
Creating ConsElem Map for :	Node0x4a4fcc0 [shape=record,shape=Mrecord,label="{0: i64*,  : SMR\n|{<s0>0}}"];
	Node0x4a4fcc0:s0 -> Node0x4a5f830;
EDGE: [0: tymap-size 1]:i64
	Node0x4a5f830 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
DSOURCEGEP INSTRUCTION   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %11, i32 0, i32 1, !dbg !318
[Source:]   %top = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %11, i32 0, i32 1, !dbg !318
StructType: allocation intermediate:   %11 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !315
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[8,12]0x5bdbbb0
Creating ConsElem Map for :	Node0x4a4fe40 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx = getelementptr inbounds i64, i64* %14, i64 0, !dbg !337
[Source:]   %arrayidx = getelementptr inbounds i64, i64* %14, i64 0, !dbg !337
 allocation intermediate:   %14 = load i64*, i64** %B, align 8, !dbg !337
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 0
CONSTRAINING: 0: i64,   array: CRE: elem 0:default:0x4b5aa50
Creating ConsElem Map for :	Node0x4a4ff80 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx20 = getelementptr inbounds i64, i64* %16, i64 1, !dbg !339
[Source:]   %arrayidx20 = getelementptr inbounds i64, i64* %16, i64 1, !dbg !339
 allocation intermediate:   %16 = load i64*, i64** %B, align 8, !dbg !339
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 1
CONSTRAINING: 0: i64,   array: CRE: elem 0:default:0x4b5aa50
Creating ConsElem Map for :	Node0x4a500c0 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx21 = getelementptr inbounds i64, i64* %18, i64 2, !dbg !341
[Source:]   %arrayidx21 = getelementptr inbounds i64, i64* %18, i64 2, !dbg !341
 allocation intermediate:   %18 = load i64*, i64** %B, align 8, !dbg !341
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 2
CONSTRAINING: 0: i64,   array: CRE: elem 0:default:0x4b5aa50
Creating ConsElem Map for :	Node0x4a50200 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSOURCEGEP INSTRUCTION   %arrayidx22 = getelementptr inbounds i64, i64* %20, i64 3, !dbg !343
[Source:]   %arrayidx22 = getelementptr inbounds i64, i64* %20, i64 3, !dbg !343
 allocation intermediate:   %20 = load i64*, i64** %B, align 8, !dbg !343
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 3
CONSTRAINING: 0: i64,   array: CRE: elem 0:default:0x4b5aa50
Creating ConsElem Map for :	Node0x4a50340 [shape=record,shape=Mrecord,label="{0: i64,  : SMR\n}"];
DSINKGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds i64, i64* %23, i64 0, !dbg !346
[Sink:]   %arrayidx23 = getelementptr inbounds i64, i64* %23, i64 0, !dbg !346
 allocation intermediate:   %23 = load i64*, i64** %A, align 8, !dbg !346
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 0
Tainting at offset: 0
Created 1 constraint variable(s) for node of size 1
	Node0x4a5f830 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx23 = getelementptr inbounds i64, i64* %23, i64 0, !dbg !346
[Sink:]   %arrayidx23 = getelementptr inbounds i64, i64* %23, i64 0, !dbg !346
 allocation intermediate:   %23 = load i64*, i64** %A, align 8, !dbg !346
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 0
Tainting at offset: 0
	Node0x4a5f830 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx24 = getelementptr inbounds i64, i64* %25, i64 1, !dbg !349
[Sink:]   %arrayidx24 = getelementptr inbounds i64, i64* %25, i64 1, !dbg !349
 allocation intermediate:   %25 = load i64*, i64** %A, align 8, !dbg !349
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 1
Tainting at offset: 1
	Node0x4a5f830 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx24 = getelementptr inbounds i64, i64* %25, i64 1, !dbg !349
[Sink:]   %arrayidx24 = getelementptr inbounds i64, i64* %25, i64 1, !dbg !349
 allocation intermediate:   %25 = load i64*, i64** %A, align 8, !dbg !349
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 1
Tainting at offset: 1
	Node0x4a5f830 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx25 = getelementptr inbounds i64, i64* %27, i64 2, !dbg !352
[Sink:]   %arrayidx25 = getelementptr inbounds i64, i64* %27, i64 2, !dbg !352
 allocation intermediate:   %27 = load i64*, i64** %A, align 8, !dbg !352
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 2
Tainting at offset: 2
	Node0x4a5f830 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx25 = getelementptr inbounds i64, i64* %27, i64 2, !dbg !352
[Sink:]   %arrayidx25 = getelementptr inbounds i64, i64* %27, i64 2, !dbg !352
 allocation intermediate:   %27 = load i64*, i64** %A, align 8, !dbg !352
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 2
Tainting at offset: 2
	Node0x4a5f830 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx26 = getelementptr inbounds i64, i64* %29, i64 3, !dbg !355
[Sink:]   %arrayidx26 = getelementptr inbounds i64, i64* %29, i64 3, !dbg !355
 allocation intermediate:   %29 = load i64*, i64** %A, align 8, !dbg !355
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 3
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 3
Tainting at offset: 3
	Node0x4a5f830 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx26 = getelementptr inbounds i64, i64* %29, i64 3, !dbg !355
[Sink:]   %arrayidx26 = getelementptr inbounds i64, i64* %29, i64 3, !dbg !355
 allocation intermediate:   %29 = load i64*, i64** %A, align 8, !dbg !355
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 3
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 3
Tainting at offset: 3
	Node0x4a5f830 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %top28 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %33, i32 0, i32 1, !dbg !363
[Source:]   %top28 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %33, i32 0, i32 1, !dbg !363
StructType: allocation intermediate:   %33 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !362
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 8
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 8
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[8,12]0x5bdbbb0
DSOURCEGEP INSTRUCTION   %arrayidx29 = getelementptr inbounds i64, i64* %35, i64 2, !dbg !366
[Source:]   %arrayidx29 = getelementptr inbounds i64, i64* %35, i64 2, !dbg !366
 allocation intermediate:   %35 = load i64*, i64** %B, align 8, !dbg !366
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 2
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 2
CONSTRAINING: 0: i64,   array: CRE: elem 0:default:0x4b5aa50
CONSTRAINING: COLLAPSED: SCMRE2: elem 0::0x5d36d70
DSINKGEP INSTRUCTION   %arrayidx30 = getelementptr inbounds i64, i64* %37, i64 2, !dbg !368
[Sink:]   %arrayidx30 = getelementptr inbounds i64, i64* %37, i64 2, !dbg !368
 allocation intermediate:   %37 = load i64*, i64** %A, align 8, !dbg !368
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 2
Tainting at offset: 2
	Node0x4a5f830 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx30 = getelementptr inbounds i64, i64* %37, i64 2, !dbg !368
[Sink:]   %arrayidx30 = getelementptr inbounds i64, i64* %37, i64 2, !dbg !368
 allocation intermediate:   %37 = load i64*, i64** %A, align 8, !dbg !368
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 2
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 2
Tainting at offset: 2
	Node0x4a5f830 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx32 = getelementptr inbounds i64, i64* %38, i64 1, !dbg !370
[Source:]   %arrayidx32 = getelementptr inbounds i64, i64* %38, i64 1, !dbg !370
 allocation intermediate:   %38 = load i64*, i64** %B, align 8, !dbg !370
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 1
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 1
CONSTRAINING: 0: i64,   array: CRE: elem 0:default:0x4b5aa50
CONSTRAINING: COLLAPSED: SCMRE2: elem 0::0x5d36d70
DSINKGEP INSTRUCTION   %arrayidx33 = getelementptr inbounds i64, i64* %40, i64 1, !dbg !371
[Sink:]   %arrayidx33 = getelementptr inbounds i64, i64* %40, i64 1, !dbg !371
 allocation intermediate:   %40 = load i64*, i64** %A, align 8, !dbg !371
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 1
Tainting at offset: 1
	Node0x4a5f830 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx33 = getelementptr inbounds i64, i64* %40, i64 1, !dbg !371
[Sink:]   %arrayidx33 = getelementptr inbounds i64, i64* %40, i64 1, !dbg !371
 allocation intermediate:   %40 = load i64*, i64** %A, align 8, !dbg !371
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 1
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 1
Tainting at offset: 1
	Node0x4a5f830 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
Adding 1 elements
DSOURCEGEP INSTRUCTION   %arrayidx35 = getelementptr inbounds i64, i64* %41, i64 0, !dbg !373
[Source:]   %arrayidx35 = getelementptr inbounds i64, i64* %41, i64 0, !dbg !373
 allocation intermediate:   %41 = load i64*, i64** %B, align 8, !dbg !373
=>  %B = alloca i64*, align 8
FINAL:   %B = alloca i64*, align 8
Trying to find element at offset 0
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 0
CONSTRAINING: 0: i64,   array: CRE: elem 0:default:0x4b5aa50
CONSTRAINING: COLLAPSED: SCMRE2: elem 0::0x5d36d70
DSINKGEP INSTRUCTION   %arrayidx36 = getelementptr inbounds i64, i64* %43, i64 0, !dbg !374
[Sink:]   %arrayidx36 = getelementptr inbounds i64, i64* %43, i64 0, !dbg !374
 allocation intermediate:   %43 = load i64*, i64** %A, align 8, !dbg !374
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 0
Tainting at offset: 0
	Node0x4a5f830 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
Adding 1 elements
DSINKGEP INSTRUCTION   %arrayidx36 = getelementptr inbounds i64, i64* %43, i64 0, !dbg !374
[Sink:]   %arrayidx36 = getelementptr inbounds i64, i64* %43, i64 0, !dbg !374
 allocation intermediate:   %43 = load i64*, i64** %A, align 8, !dbg !374
=>  %A = alloca i64*, align 8
FINAL:   %A = alloca i64*, align 8
Tainting at offset: 0
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
Trying to find element at offset 0
Tainting at offset: 0
	Node0x4a5f830 [shape=record,shape=Mrecord,label="{COLLAPSED: SMRE2\n|{<s0>0}}"];
Adding 1 elements
Running on bn_free_d in context [bn_expand2 ]
Using taint reachable signature for:   call void @CRYPTO_secure_free(i8* %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 174), !dbg !270
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
RSINKGEP INSTRUCTION   %3 = bitcast i64* %2 to i8*, !dbg !270
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE:   %3 = bitcast i64* %2 to i8*, !dbg !270
	Node0x4a50480 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
RSINKGEP INSTRUCTION   %3 = bitcast i64* %2 to i8*, !dbg !270
Using taint reachable signature for:   call void @CRYPTO_free(i8* %6, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0), i32 176), !dbg !271
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
RSINKGEP INSTRUCTION   %6 = bitcast i64* %5 to i8*, !dbg !271
REACHABLE SOURCE: i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
REACHABLE SOURCE:   %6 = bitcast i64* %5 to i8*, !dbg !271
	Node0x4a50480 [shape=record,shape=Mrecord,label="{VOID array: GE\n@.str27 = private unnamed_addr constant [9 x i8] c\"bn_lib.c\\00\", align 1\n|{<s0>0}}"];
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
RSINKGEP INSTRUCTION i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str27, i32 0, i32 0)
RSINKGEP INSTRUCTION   %6 = bitcast i64* %5 to i8*, !dbg !271
Creating ConsElem Map for :	Node0x4a4e8e0 [shape=record,shape=Mrecord,label="{0: %struct.bignum_st*,  : SMR\n|{<s0>0}}"];
	Node0x4a4e8e0:s0 -> Node0x4a4e760;
EDGE: [0: tymap-size 1]:%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
	Node0x4a4e760 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SMRE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a4e760:s0 -> Node0x4a50580;
DSOURCEGEP INSTRUCTION   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 0, !dbg !270
[Source:]   %d = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %1, i32 0, i32 0, !dbg !270
StructType: allocation intermediate:   %1 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !270
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[0,8]0x596a2b0
DSOURCEGEP INSTRUCTION   %d1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !271
[Source:]   %d1 = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %4, i32 0, i32 0, !dbg !271
StructType: allocation intermediate:   %4 = load %struct.bignum_st*, %struct.bignum_st** %a.addr, align 8, !dbg !271
=>  %a.addr = alloca %struct.bignum_st*, align 8
FINAL:   %a.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 0
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 0
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[0,8]0x596a2b0
Running on constant_time_eq in context [constant_time_eq_int ]
Creating ConsElem Map for :	Node0x4a71ef0 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Creating ConsElem Map for :	Node0x4a72070 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Running on BN_get_flags in context [bn_expand_internal ]
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !269
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !269
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !268
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 20
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[20,24]0x4b7a2b0
Running on BN_get_flags in context [bn_free_d ]
DSOURCEGEP INSTRUCTION   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !269
[Source:]   %flags = getelementptr inbounds %struct.bignum_st, %struct.bignum_st* %0, i32 0, i32 4, !dbg !269
StructType: allocation intermediate:   %0 = load %struct.bignum_st*, %struct.bignum_st** %b.addr, align 8, !dbg !268
=>  %b.addr = alloca %struct.bignum_st*, align 8
FINAL:   %b.addr = alloca %struct.bignum_st*, align 8
Trying to find element at offset 20
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Trying to find element at offset 20
CONSTRAINING: 0: i64*,  8: i32,  16: i32,  20: i32,  : CRE: elem 0:default:0x4b5adb0
CONSTRAINING: 0: i64*,  8: i32,  12: i32,  16: i32,  20: i32,  : SCMRE[20,24]0x4b7a2b0
Running on constant_time_is_zero in context [constant_time_eq ]
Creating ConsElem Map for :	Node0x4a72300 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Running on constant_time_msb in context [constant_time_is_zero ]
Creating ConsElem Map for :	Node0x4a72650 [shape=record,shape=Mrecord,label="{0: i32,  : SMR\n}"];
Running on bn2binpad in context []
Trying to constrain p at 0 for value : p
%struct.bignum_st* %p
%struct.bignum_st* %p
 has 5 elements.
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
Map size does not match number of elements 1
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Matching Type:%struct.bignum_st*
Map size does not match number of elements 1
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
FOUND 0 elements from the locsForValue
Number of elements to constrain: 0
Trying to constrain p at 0 for value : p
%struct.bignum_st* %p
%struct.bignum_st* %p
 has 5 elements.
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
Map size does not match number of elements 1
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Matching Type:%struct.bignum_st*
Map size does not match number of elements 1
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
FOUND 0 elements from the locsForValue
Number of elements to constrain: 0
DONE
Trying to constrain m at 0 for value : m
%struct.bignum_st* %m
%struct.bignum_st* %m
 has 5 elements.
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
Map size does not match number of elements 1
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Matching Type:%struct.bignum_st*
Map size does not match number of elements 1
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
FOUND 0 elements from the locsForValue
Number of elements to constrain: 0
Trying to constrain m at 0 for value : m
%struct.bignum_st* %m
%struct.bignum_st* %m
 has 5 elements.
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
Map size does not match number of elements 1
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Matching Type:%struct.bignum_st*
Map size does not match number of elements 1
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
FOUND 0 elements from the locsForValue
Number of elements to constrain: 0
DONE
Trying to constrain p at 0 for value : p
%struct.bignum_st* %p
%struct.bignum_st* %p
 has 5 elements.
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
Map size does not match number of elements 1
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Matching Type:%struct.bignum_st*
Map size does not match number of elements 1
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
FOUND 0 elements from the locsForValue
Number of elements to constrain: 0
Trying to constrain p at 0 for value : p
%struct.bignum_st* %p
%struct.bignum_st* %p
 has 5 elements.
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
Map size does not match number of elements 1
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Matching Type:%struct.bignum_st*
Map size does not match number of elements 1
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
FOUND 0 elements from the locsForValue
Number of elements to constrain: 0
DONE
Trying to constrain m at 0 for value : m
%struct.bignum_st* %m
%struct.bignum_st* %m
 has 5 elements.
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
Map size does not match number of elements 1
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Matching Type:%struct.bignum_st*
Map size does not match number of elements 1
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
FOUND 0 elements from the locsForValue
Number of elements to constrain: 0
Trying to constrain m at 0 for value : m
%struct.bignum_st* %m
%struct.bignum_st* %m
 has 5 elements.
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
Map size does not match number of elements 1
	Node0x4a5ef40 [shape=record,shape=Mrecord,label="{0: i64*,  8: i32,  16: i32,  20: i32,  : RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7|<s8>8|<s9>9|<s10>10|<s11>11|<s12>12|<s13>13|<s14>14|<s15>15|<s16>16|<s17>17|<s18>18|<s19>19|<s20>20|<s21>21|<s22>22|<s23>23}}"];
	Node0x4a5ef40:s0 -> Node0x4a5f240;
Matching Type:%struct.bignum_st*
Map size does not match number of elements 1
	Node0x4a5f240 [shape=record,shape=Mrecord,label="{0: i64,   array: RE\n|{<s0>0|<s1>1|<s2>2|<s3>3|<s4>4|<s5>5|<s6>6|<s7>7}}"];
FOUND 0 elements from the locsForValue
Number of elements to constrain: 0
DONE
#--------------Results------------------
bn_exp.c line 318
bn_exp.c line 319
bn_exp.c line 317
bn_exp.c line 327
bn_exp.c line 332
bn_exp.c line 334
bn_exp.c line 347
bn_exp.c line 347
bn_exp.c line 347
bn_exp.c line 359
bn_exp.c line 363
bn_exp.c line 363
bn_exp.c line 364
bn_exp.c line 369
bn_exp.c line 374
bn_exp.c line 377
bn_exp.c line 377
bn_exp.c line 377
bn_exp.c line 378
bn_exp.c line 379
bn_exp.c line 382
bn_exp.c line 383
bn_exp.c line 383
bn_exp.c line 398
bn_exp.c line 399
bn_exp.c line 403
bn_exp.c line 413
bn_exp.c line 416
bn_exp.c line 418
bn_exp.c line 421
bn_exp.c line 434
bn_exp.c line 435
bn_exp.c line 437
bn_exp.c line 448
bn_exp.c line 449
bn_exp.c line 454
bn_exp.c line 461
bn_exp.c line 475
bn_exp.c line 621
bn_exp.c line 629
bn_exp.c line 631
bn_exp.c line 651
bn_exp.c line 685
bn_exp.c line 685
bn_exp.c line 685
bn_exp.c line 709
bn_exp.c line 712
bn_exp.c line 717
bn_exp.c line 726
bn_exp.c line 740
bn_exp.c line 743
bn_exp.c line 748
bn_exp.c line 752
bn_exp.c line 752
bn_exp.c line 753
bn_exp.c line 755
bn_exp.c line 757
bn_exp.c line 1023
bn_exp.c line 1024
bn_exp.c line 1029
bn_exp.c line 1031
bn_exp.c line 1040
bn_exp.c line 1050
bn_exp.c line 1054
bn_exp.c line 1055
bn_exp.c line 1068
bn_exp.c line 1083
bn_exp.c line 1089
bn_exp.c line 522
bn_exp.c line 525
bn_exp.c line 540
bn_exp.c line 543
bn_exp.c line 544
bn_exp.c line 547
bn_exp.c line 566
bn_exp.c line 569
bn_lib.c line 111
bn_lib.c line 112
bn_lib.c line 113
bn_lib.c line 118
bn_lib.c line 143
bn_lib.c line 144
bn_lib.c line 152
bn_lib.c line 166
bn_lib.c line 330
bn_lib.c line 332
bn_lib.c line 334
bn_lib.c line 1027
bn_lib.c line 475
bn_lib.c line 1035
bn_lib.c line 1036
bn_lib.c line 1038
bn_lib.c line 1043
bn_lib.c line 641
bn_lib.c line 645
bn_lib.c line 648
bn_lib.c line 746
bn_lib.c line 750
bn_lib.c line 926
bn_lib.c line 926
bn_lib.c line 936
bn_lib.c line 946
bn_lib.c line 173
bn_lib.c line 254
bn_lib.c line 258
bn_lib.c line 262
bn_lib.c line 266
bn_lib.c line 274
bn_lib.c line 275
include/bn_lcl.h line 679
#--------------Statistics----------------
:: Tainted Branches: 110
:: Branch Instructions: 885
:: Conditional Branches: 357
:: Vulnerable Branches: 12.43% [110/885]
